{"version":3,"file":"tf-backend-cpu.min.js","sources":["../src/cpu_util.ts","../src/utils/pool_utils.ts","../src/backend_cpu.ts","../src/kernels/Max_impl.ts","../src/kernels/Transpose_impl.ts","../src/base.ts","../src/kernels/Cos.ts","../src/kernels/Dilation2D.ts","../src/kernels/Dilation2DBackpropFilter.ts","../src/kernels/Dilation2DBackpropInput.ts","../src/utils/kernel_utils.ts","../src/kernels/Div_impl.ts","../src/kernels/Div.ts","../src/kernels/FlipLeftRight.ts","../src/kernels/Identity.ts","../src/kernels/Max.ts","../src/kernels/MaxPoolWithArgmax.ts","../src/kernels/MaxPoolWithArgmax_impl.ts","../src/kernels/NonMaxSuppressionV4.ts","../src/kernels/NonMaxSuppressionV5.ts","../src/kernels/PadV2.ts","../src/kernels/Reshape.ts","../src/kernels/RotateWithOffset.ts","../src/kernels/Transpose.ts","../src/register_all_kernels.ts","../src/kernels/SpaceToBatchND.ts","../src/kernels/Square.ts","../src/kernels/SquaredDifference.ts","../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${\n              opName} does not support complex64 tensors in the CPU backend.`);\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function pool(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv2DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides =\n      convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n  const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n  const outputColStrides = convInfo.outShape[3];\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const outputBatchOffset = b * outputBatchStrides;\n    const inputBatchOffset = b * strides[0];\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          const xCMin = Math.max(0, xCCorner);\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let minMaxValue = initialValue;\n          let avgValue = 0;\n          let count = 0;\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const xROffset = inputBatchOffset + xR * strides[1];\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const xCOffset = xROffset + xC * strides[2];\n              const pixel = xValues[xCOffset + d];\n              if ((poolType === 'max' && pixel > minMaxValue)) {\n                minMaxValue = pixel;\n              } else if (poolType === 'avg') {\n                avgValue += pixel;\n                count++;\n              }\n            }\n            if (isNaN(minMaxValue)) {\n              break;\n            }\n          }\n          const outputOffset = outputRowOffset + yC * outputColStrides + d;\n          outputVals[outputOffset] =\n              poolType === 'avg' ? avgValue / count : minMaxValue;\n        }\n      }\n    }\n  }\n  return output;\n}\n\nexport function maxPoolPositions(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    convInfo: backend_util.Conv2DInfo, flattenPositions = false,\n    includeBatchInIndex = false): TensorBuffer<Rank, 'int32'> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const xBuf = buffer(xShape, dtype, xValues);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        let xRMin = xRCorner;\n        while (xRMin < 0) {\n          xRMin += dilationHeight;\n        }\n        // const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          let xCMin = xCCorner;\n          while (xCMin < 0) {\n            xCMin += dilationWidth;\n          }\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let maxValue = Number.NEGATIVE_INFINITY;\n          let maxPosition = -1;\n\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const wR = xR - xRCorner;\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const wC = xC - xCCorner;\n              const pixel = xBuf.get(b, xR, xC, d);\n              if (pixel > maxValue) {\n                maxValue = pixel as number;\n                if (flattenPositions) {\n                  maxPosition = includeBatchInIndex ?\n                      ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) *\n                              convInfo.inChannels +\n                          d :\n                      (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                } else {\n                  maxPosition = wR * effectiveFilterWidth + wC;\n                }\n              }\n            }\n          }\n          maxPositions.set(maxPosition, b, yR, yC, d);\n        }\n      }\n    }\n  }\n  return maxPositions;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {backend_util, BackendTimingInfo, buffer, DataStorage, DataType, DataValues, engine, env, kernel_impls, KernelBackend, max, NumericDataType, Rank, Scalar, ShapeMap, slice_util, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, Tensor5D, TensorBuffer, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\nconst split = kernel_impls.split;\nconst tile = kernel_impls.tile;\nconst topkImpl = kernel_impls.topkImpl;\nconst whereImpl = kernel_impls.whereImpl;\nimport * as seedrandom from 'seedrandom';\nimport {assertNotComplex} from './cpu_util';\nimport {maxPoolPositions, pool} from './utils/pool_utils';\n\ninterface DataId {}\n\nfunction mapActivation(\n    backend: MathBackendCPU, x: Tensor, activation: backend_util.Activation,\n    preluActivationWeights?: Tensor): Tensor {\n  if (activation === 'linear') {\n    return backend.linear(x);\n  } else if (activation === 'relu') {\n    return backend.relu(x);\n  } else if (activation === 'elu') {\n    return backend.elu(x);\n  } else if (activation === 'relu6') {\n    return backend.relu6(x);\n  } else if (activation === 'prelu') {\n    return backend.prelu(x, preluActivationWeights);\n  }\n  throw new Error(\n      `Activation ${activation} has not been implemented for the CPU backend.`);\n}\n\nexport interface TensorData<D extends DataType> {\n  values?: backend_util.BackendValues;\n  dtype: D;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensors field.\n  // TODO(smilkov): Replace Tensor with TensorInfo when you modularize ops\n  // that work with complex tensors.\n  complexTensors?: {real: Tensor, imag: Tensor};\n  // refCount keeps track of how many tensors reference it. Used for memory\n  // management.\n  refCount: number;\n}\n\nexport class MathBackendCPU extends KernelBackend {\n  public blockSize = 48;\n\n  data: DataStorage<TensorData<DataType>>;\n  private firstUse = true;\n\n  constructor() {\n    super();\n    this.data = new DataStorage(this, engine());\n  }\n\n  write(values: backend_util.BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (this.firstUse) {\n      this.firstUse = false;\n      if (env().get('IS_NODE')) {\n        backend_util.warn(\n            '\\n============================\\n' +\n            'Hi there 👋. Looks like you are running TensorFlow.js in ' +\n            'Node.js. To speed things up dramatically, install our node ' +\n            'backend, which binds to TensorFlow C++, by running ' +\n            'npm i @tensorflow/tfjs-node, ' +\n            'or npm i @tensorflow/tfjs-node-gpu if you have CUDA. ' +\n            'Then call require(\\'@tensorflow/tfjs-node\\'); (-gpu ' +\n            'suffix for CUDA) at the start of your program. ' +\n            'Visit https://github.com/tensorflow/tfjs-node for more details.' +\n            '\\n============================');\n      }\n    }\n    const dataId = {};\n\n    this.data.set(dataId, {values, dtype, refCount: 1});\n\n    return dataId;\n  }\n\n  /** Increase refCount of a `TensorData`. */\n  incRef(dataId: DataId): void {\n    const tensorData = this.data.get(dataId);\n    tensorData.refCount++;\n  }\n\n  /** Decrease refCount of a `TensorData`. */\n  decRef(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      tensorData.refCount--;\n    }\n  }\n\n  move(\n      dataId: DataId, values: backend_util.BackendValues, shape: number[],\n      dtype: DataType): void {\n    this.data.set(dataId, {values, dtype, refCount: 1});\n  }\n\n  numDataIds(): number {\n    return this.data.numDataIds();\n  }\n\n  async read(dataId: DataId): Promise<backend_util.BackendValues> {\n    return this.readSync(dataId);\n  }\n  readSync(dataId: DataId): backend_util.BackendValues {\n    const {dtype, complexTensors} = this.data.get(dataId);\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensors.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensors.imag.dataId) as Float32Array;\n      return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    }\n    return this.data.get(dataId).values;\n  }\n\n  private bufferSync<R extends Rank>(t: Tensor<R>): TensorBuffer<R> {\n    const data = this.readSync(t.dataId);\n    let decodedData = data as DataValues;\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = (data as Uint8Array[]).map(d => util.decodeString(d));\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return tf.buffer(t.shape, t.dtype, decodedData) as TensorBuffer<R>;\n  }\n\n  private makeOutput<T extends Tensor>(\n      values: backend_util.BackendValues, shape: number[], dtype: DataType): T {\n    const dataId = this.write(values, shape, dtype);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this) as T;\n  }\n\n  disposeData(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const {complexTensors} = this.data.get(dataId);\n      if (complexTensors != null) {\n        complexTensors.real.dispose();\n        complexTensors.imag.dispose();\n      }\n      this.data.delete(dataId);\n    }\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    const dataId = tensorInfo.dataId;\n\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n\n      tensorData.refCount--;\n\n      if (tensorData.refCount < 1) {\n        this.disposeData(dataId);\n      }\n    }\n  }\n\n  async time(f: () => void): Promise<BackendTimingInfo> {\n    const start = util.now();\n    f();\n    const kernelMs = util.now() - start;\n    return {kernelMs};\n  }\n\n  memory() {\n    return {\n      // Unreliable due to automatic gc. The numbers above are cumulative.\n      unreliable: true,\n      reasons:\n          ['The reported memory is an upper bound. Due to automatic garbage ' +\n           'collection, the true allocated memory may be less.']\n    };\n  }\n\n  complex<T extends Tensor>(real: T, imag: T): T {\n    const result = this.makeOutput(null, real.shape, 'complex64');\n\n    const resultData = this.data.get(result.dataId);\n    // The backend owns the reference to the underlying real and imaginary\n    // clones. These will explicitly get disposed when the complex tensor is\n    // disposed.\n    resultData.complexTensors = {\n      real: engine().keep(real.clone()),\n      imag: engine().keep(imag.clone())\n    };\n\n    return result as T;\n  }\n  real<T extends Tensor>(input: T): T {\n    const resultData = this.data.get(input.dataId);\n    return resultData.complexTensors.real.clone() as T;\n  }\n  imag<T extends Tensor>(input: T): T {\n    const resultData = this.data.get(input.dataId);\n    return resultData.complexTensors.imag.clone() as T;\n  }\n\n  slice<T extends Tensor>(x: T, begin: number[], size: number[]): T {\n    assertNotComplex(x, 'slice');\n\n    const isContinous = slice_util.isSliceContinous(x.shape, begin, size);\n    if (isContinous) {\n      const flatOffset = slice_util.computeFlatOffset(begin, x.strides);\n      const length = util.sizeFromShape(size);\n      const vals = this.readSync(x.dataId) as TypedArray;\n      return tf.tensor(\n                 vals.subarray(flatOffset, flatOffset + length), size,\n                 x.dtype) as T;\n    }\n\n    const buffer = tf.buffer(size, x.dtype);\n    const xBuf = this.bufferSync(x);\n    for (let i = 0; i < buffer.size; ++i) {\n      const loc = buffer.indexToLoc(i);\n      const xLoc = loc.map((idx, j) => idx + begin[j]);\n      buffer.values[i] = xBuf.get(...xLoc);\n    }\n    return buffer.toTensor() as T;\n  }\n\n  stridedSlice<T extends Tensor>(\n      x: T, begin: number[], end: number[], strides: number[]): T {\n    assertNotComplex(x, 'stridedSlice');\n\n    const outShape = slice_util.computeOutShape(begin, end, strides);\n\n    if (outShape.some(axis => axis === 0)) {\n      return tf.tensor([], outShape) as T;\n    }\n\n    const buffer = tf.buffer(outShape, x.dtype);\n    const xBuf = this.bufferSync(x);\n    for (let i = 0; i < buffer.size; i++) {\n      const loc = buffer.indexToLoc(i);\n\n      const newLoc: number[] = new Array(loc.length);\n      for (let j = 0; j < newLoc.length; j++) {\n        newLoc[j] = loc[j] * strides[j] + begin[j];\n      }\n      buffer.set(xBuf.get(...newLoc), ...loc);\n    }\n\n    return buffer.toTensor() as T;\n  }\n\n  diag(x: Tensor): Tensor {\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    const buffer = tf.buffer([x.size, x.size], x.dtype);\n    const vals = buffer.values;\n    for (let i = 0; i < xVals.length; i++) {\n      vals[i * x.size + i] = xVals[i];\n    }\n    return buffer.toTensor();\n  }\n\n  unstack(x: Tensor, axis: number): Tensor[] {\n    const num = x.shape[axis];\n    const outShape: number[] = new Array(x.rank - 1);\n    let outIndex = 0;\n    for (let i = 0; i < x.rank; i++) {\n      if (i !== axis) {\n        outShape[outIndex++] = x.shape[i];\n      }\n    }\n\n    const begin = new Array(x.rank).fill(0);\n    const size = x.shape.slice();\n    size[axis] = 1;\n    const res = new Array(num);\n    for (let i = 0; i < res.length; i++) {\n      begin[axis] = i;\n      res[i] = this.slice(x, begin, size).reshape(outShape);\n    }\n    return res;\n  }\n\n  reverse<T extends Tensor>(x: T, axis: number[]): T {\n    assertNotComplex(x, 'reverse');\n\n    const buffer = tf.buffer(x.shape, x.dtype);\n    const xBuf = this.bufferSync(x);\n\n    for (let i = 0; i < buffer.size; i++) {\n      const outLoc = buffer.indexToLoc(i);\n      const inLoc = outLoc.slice();\n      axis.forEach(ax => inLoc[ax] = x.shape[ax] - 1 - inLoc[ax]);\n      buffer.set(xBuf.get(...inLoc), ...outLoc);\n    }\n\n    return buffer.toTensor() as T;\n  }\n\n  concat(tensors: Tensor[], axis: number): Tensor {\n    if (tensors[0].dtype === 'complex64') {\n      const reals = tensors.map((t) => tf.real(t));\n      const imags = tensors.map((t) => tf.imag(t));\n      return tf.complex(this.concat(reals, axis), this.concat(imags, axis));\n    }\n    const tensors2D = tensors.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      return t.as2D(-1, innerSize);\n    });\n    const outShape =\n      backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis\n        */);\n    const values =\n        tf.buffer(outShape as [number, number], tensors[0].dtype as 'float32')\n            .values;\n    if (tensors2D[0].shape[0] === 1) {\n      // Use built-in TypedArray.set() method for speed.\n      let offset = 0;\n      tensors2D.forEach(t => {\n        values.set(this.readSync(t.dataId) as TypedArray, offset);\n        offset += t.size;\n      });\n    } else {\n      let colOffset = 0;\n      tensors2D.forEach(t => {\n        const tVals = this.readSync(t.dataId) as TypedArray;\n        let tIdx = 0;\n        for (let row = 0; row < t.shape[0]; ++row) {\n          const resIdx = row * outShape[1] + colOffset;\n          for (let col = 0; col < t.shape[1]; ++col) {\n            values[resIdx + col] = tVals[tIdx++];\n          }\n        }\n        colOffset += t.shape[1];\n      });\n    }\n    const finalOutShape =\n        backend_util.computeOutShape(tensors.map(t => t.shape), axis);\n    return tf.tensor(values, finalOutShape, tensors[0].dtype);\n  }\n\n  neg<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'neg');\n\n    return this.multiply(tf.scalar(-1), x) as T;\n  }\n\n  add(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      return this.broadcastedBinaryComplexOp(\n          a.cast('complex64'), b.cast('complex64'),\n          (aReal, aImag, bReal, bImag) => {\n            return {real: aReal + bReal, imag: aImag + bImag};\n          });\n    }\n\n    return this.broadcastedBinaryOp(\n        a, b, upcastType(a.dtype, b.dtype),\n        (aValue, bValue) => aValue + bValue);\n  }\n\n  addN<T extends Tensor>(tensors: T[]): T {\n    assertNotComplex(tensors, 'addN');\n\n    const vals = tensors.map(t => this.readSync(t.dataId) as TypedArray);\n    const result = tf.buffer(tensors[0].shape, tensors[0].dtype as 'float32');\n    const resultVals = result.values;\n    for (let i = 0; i < tensors.length; i++) {\n      const currVals = vals[i];\n      for (let j = 0; j < resultVals.length; j++) {\n        resultVals[j] += currVals[j];\n      }\n    }\n    return result.toTensor() as T;\n  }\n\n  softmax<T extends Tensor>(logits: T, dim: number): T {\n    const axes = util.parseAxisParam([dim], logits.shape);\n    // TODO(annxingyuan): Call maxImpl rather than op as part of softmax kernel\n    // modularization.\n    const maxLogit = max(logits, axes);\n    const expandedShape =\n        backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n    const a = this.subtract(logits, maxLogit.reshape(expandedShape));\n    const b = this.exp(a);\n    const sumExp = this.sum(b, axes).reshape(expandedShape);\n\n    // TODO(annxingyuan): Call divImpl rather than op as part of softmax\n    // kernel modularization.\n    return tf.div(b, sumExp);\n  }\n\n  subtract(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      return this.broadcastedBinaryComplexOp(\n          a.cast('complex64'), b.cast('complex64'),\n          (aReal, aImag, bReal, bImag) => {\n            return {real: aReal - bReal, imag: aImag - bImag};\n          });\n    }\n\n    return this.broadcastedBinaryOp(\n        a, b, upcastType(a.dtype, b.dtype),\n        (aValue, bValue) => aValue - bValue);\n  }\n\n  pow<T extends Tensor>(a: T, b: Tensor): T {\n    assertNotComplex([a, b], 'pow');\n\n    return this.broadcastedBinaryOp(\n               a, b, a.dtype, (aValue, bValue) => Math.pow(aValue, bValue)) as\n        T;\n  }\n\n  batchMatMul(\n      a: Tensor3D, b: Tensor3D, transposeA: boolean,\n      transposeB: boolean): Tensor3D {\n    assertNotComplex([a, b], 'matMul');\n\n    const sharedDim = transposeA ? a.shape[1] : a.shape[2];\n    const leftDim = transposeA ? a.shape[2] : a.shape[1];\n    const rightDim = transposeB ? b.shape[1] : b.shape[2];\n    const batchDim = a.shape[0];\n\n    const aValues = this.readSync(a.dataId) as TypedArray;\n    const bValues = this.readSync(b.dataId) as TypedArray;\n    const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n        [a.strides[0], 1, a.strides[1]] :\n        [a.strides[0], a.strides[1], 1];\n    const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n        [1, b.strides[1], b.strides[0]] :\n        [b.strides[1], 1, b.strides[0]];\n\n    const size = leftDim * rightDim;\n    const result = tf.buffer([batchDim, leftDim, rightDim], a.dtype);\n    const resVals = result.values as TypedArray;\n    const blockSize = this.blockSize;\n\n    for (let b = 0; b < batchDim; b++) {\n      for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n        for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n          for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n            // for when blockSize doesn't evenly divide the input\n            const iBlock = Math.min(i0 + blockSize, leftDim);\n            const jBlock = Math.min(j0 + blockSize, rightDim);\n            const kBlock = Math.min(k0 + blockSize, sharedDim);\n\n            for (let i = i0; i < iBlock; i++) {\n              for (let j = j0; j < jBlock; j++) {\n                let sum = 0.0;\n\n                for (let k = k0; k < kBlock; k++) {\n                  sum += aValues[b * aBatch + i * aOuterStep + k * aInnerStep] *\n                      bValues[k * bInnerStep + j * bOuterStep + b * bBatch];\n                }\n                resVals[b * size + (i * rightDim + j)] += sum;\n              }\n            }\n          }\n        }\n      }\n    }\n    return result.toTensor() as Tensor3D;\n  }\n\n  fusedBatchMatMul(\n      {a, b, transposeA, transposeB, bias, activation, preluActivationWeights}:\n          backend_util.FusedBatchMatMulConfig): Tensor3D {\n    let result = this.batchMatMul(a, b, transposeA, transposeB);\n    if (bias) {\n      result = this.add(result, bias) as Tensor3D;\n    }\n    if (activation) {\n      result =\n          mapActivation(this, result, activation, preluActivationWeights) as\n          Tensor3D;\n    }\n\n    return result;\n  }\n\n  multiply(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      return this.broadcastedBinaryComplexOp(\n          a.cast('complex64'), b.cast('complex64'),\n          (aReal, aImag, bReal, bImag) => {\n            return {\n              real: aReal * bReal - aImag * bImag,\n              imag: aReal * bImag + aImag * bReal\n            };\n          });\n    }\n\n    return this.broadcastedBinaryOp(\n        a, b, upcastType(a.dtype, b.dtype),\n        (aValue, bValue) => aValue * bValue);\n  }\n\n  floorDiv(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'floorDiv');\n\n    const op = (a: number, b: number) => Math.floor(a / b);\n    const outputDtype = 'int32';\n    return this.broadcastedBinaryOp(a, b, outputDtype, op);\n  }\n\n  sum(x: Tensor, axes: number[]): Tensor {\n    assertNotComplex(x, 'sum');\n\n    backend_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const resultDtype = upcastType(x.dtype, 'int32');\n    const result = tf.zeros(outShape, resultDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let sum = 0;\n      for (let j = 0; j < reduceSize; ++j) {\n        sum += aVals[offset + j];\n      }\n      vals[i] = sum;\n    }\n    return result;\n  }\n\n  prod(x: Tensor, axes: number[]): Tensor {\n    assertNotComplex(x, 'sum');\n\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const resultDtype = upcastType(x.dtype, 'int32');\n    const result = tf.zeros(outShape, resultDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let prod = 1;\n      for (let j = 0; j < reduceSize; ++j) {\n        prod *= aVals[offset + j];\n      }\n      vals[i] = prod;\n    }\n    return result;\n  }\n\n  unsortedSegmentSum<T extends Tensor>(\n      x: T, segmentIds: Tensor1D, numSegments: number): Tensor {\n    assertNotComplex(x, 'unsortedSegmentSum');\n\n    const res = [];\n\n    // Reshape the segment id's so that they can be broadcast with\n    // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n    const numIters = x.rank - segmentIds.rank;\n    for (let i = 0; i < numIters; ++i) {\n      segmentIds = segmentIds.expandDims(i + 1);\n    }\n\n    for (let i = 0; i < numSegments; ++i) {\n      const segmentId = tf.scalar(i, 'int32');\n      const mask = tf.equal(segmentId, segmentIds).asType('float32');\n      const sum = mask.mul(x).sum(0);\n      res.push(sum);\n    }\n\n    return tf.stack(res);\n  }\n\n  argMin(x: Tensor, axis: number): Tensor {\n    assertNotComplex(x, 'argMin');\n\n    const axes = [axis];\n    backend_util.assertAxesAreInnerMostDims('argMin', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = tf.zeros(outShape, 'int32');\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let min = aVals[offset];\n      let minIndex = 0;\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        if (value < min) {\n          min = value;\n          minIndex = j;\n        }\n      }\n      vals[i] = minIndex;\n    }\n    return result;\n  }\n\n  argMax(x: Tensor, axis: number): Tensor {\n    assertNotComplex(x, 'argMax');\n\n    const axes = [axis];\n    backend_util.assertAxesAreInnerMostDims('argMax', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = tf.zeros(outShape, 'int32');\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let max = aVals[offset];\n      let maxIndex = 0;\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        if (value > max) {\n          max = value;\n          maxIndex = j;\n        }\n      }\n      vals[i] = maxIndex;\n    }\n    return result;\n  }\n\n  cumsum(x: Tensor, axis: number, exclusive: boolean, reverse: boolean):\n      Tensor {\n    assertNotComplex(x, 'cumsum');\n\n    if (axis !== x.rank - 1) {\n      throw new Error(\n          `backend.cumsum in CPU expects an inner-most axis=${x.rank - 1} ` +\n          `but got axis=${axis}`);\n    }\n    const resultDtype = upcastType(x.dtype, 'int32');\n    const result = tf.zeros(x.shape, resultDtype);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    const finalDim = x.shape[x.rank - 1];\n    const indexAdjuster = reverse ?\n        (i: number, j: number) => i + finalDim - j - 1 :\n        (i: number, j: number) => i + j;\n    for (let i = 0; i < aVals.length; i += finalDim) {\n      for (let j = 0; j < finalDim; j++) {\n        const idx = indexAdjuster(i, j);\n        if (j === 0) {\n          vals[idx] = exclusive ? 0 : aVals[idx];\n        } else {\n          const prevIdx = indexAdjuster(i, j - 1);\n          vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                                  aVals[idx] + vals[prevIdx];\n        }\n      }\n    }\n    return result;\n  }\n\n  equal(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'equal');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal === bVal) ? 1 : 0;\n    });\n  }\n\n  notEqual(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'notEqual');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal !== bVal) ? 1 : 0;\n    });\n  }\n\n  less(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'less');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal < bVal) ? 1 : 0;\n    });\n  }\n\n  lessEqual(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'lessEqual');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal <= bVal) ? 1 : 0;\n    });\n  }\n\n  greater(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'greater');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal > bVal) ? 1 : 0;\n    });\n  }\n\n  greaterEqual(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'greaterEqual');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal >= bVal) ? 1 : 0;\n    });\n  }\n\n  logicalNot<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'logicalNot');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Uint8Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = values[i] ? 0 : 1;\n    }\n    return this.makeOutput(newValues, x.shape, 'bool');\n  }\n\n  logicalAnd(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'logicalAnd');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return aVal && bVal;\n    });\n  }\n\n  logicalOr(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'logicalOr');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return aVal || bVal;\n    });\n  }\n\n  select(condition: Tensor, a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([condition, a, b], 'select');\n\n    const values = this.readSync(condition.dataId) as TypedArray;\n    const aValues = this.readSync(a.dataId) as TypedArray;\n    const bValues = this.readSync(b.dataId) as TypedArray;\n    const result = tf.zeros(a.shape, upcastType(a.dtype, b.dtype));\n    const newValues = this.readSync(result.dataId) as TypedArray;\n    let index = 0;\n    const offset = condition.rank === 0 || condition.rank > 1 || a.rank === 1 ?\n        1 :\n        util.sizeFromShape(a.shape.slice(1));\n\n    for (let i = 0; i < values.length; i++) {\n      for (let j = 0; j < offset; j++) {\n        if (values[i] === 1) {\n          newValues[index++] = aValues[i];\n        } else {\n          newValues[index++] = bValues[i];\n        }\n      }\n    }\n\n    return result;\n  }\n\n  where(condition: Tensor): Tensor2D {\n    assertNotComplex([condition], 'where');\n\n    const condVals = this.readSync(condition.dataId) as TypedArray;\n    return whereImpl(condition.shape, condVals);\n  }\n\n  topk<T extends Tensor>(x: T, k: number, sorted: boolean): [T, T] {\n    assertNotComplex(x, 'topk');\n\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    return topkImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n  }\n\n  min(x: Tensor, axes: number[]): Tensor {\n    assertNotComplex(x, 'min');\n\n    backend_util.assertAxesAreInnerMostDims('min', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = tf.zeros(outShape, x.dtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let min = aVals[offset];\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        if (value < min) {\n          min = value;\n        }\n      }\n      vals[i] = min;\n    }\n    return result;\n  }\n\n  minimum(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'minimum');\n\n    return this.broadcastedBinaryOp(\n        a, b, a.dtype, (aVal, bVal) => Math.min(aVal, bVal));\n  }\n\n  mod(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'mod');\n\n    return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => {\n      const rem = aVal % bVal;\n      if ((aVal < 0 && bVal < 0) || (aVal >= 0 && bVal >= 0)) {\n        return rem;\n      } else {\n        return (rem + bVal) % bVal;\n      }\n    });\n  }\n\n  maximum(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'maximum');\n\n    return this.broadcastedBinaryOp(\n        a, b, a.dtype, (aVal, bVal) => Math.max(aVal, bVal));\n  }\n\n  all(x: Tensor, axes: number[]): Tensor {\n    assertNotComplex(x, 'all');\n\n    backend_util.assertAxesAreInnerMostDims('all', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = tf.zeros(outShape, x.dtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let all = aVals[offset];\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        all = all && value;\n      }\n      vals[i] = all;\n    }\n    return result;\n  }\n\n  any(x: Tensor, axes: number[]): Tensor {\n    assertNotComplex(x, 'any');\n\n    backend_util.assertAxesAreInnerMostDims('any', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = tf.zeros(outShape, x.dtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let anyVal = aVals[offset];\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        anyVal = anyVal || value;\n      }\n      vals[i] = anyVal;\n    }\n    return result;\n  }\n\n  squaredDifference(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'squaredDifference');\n\n    return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => {\n      const diff = aVal - bVal;\n      return diff * diff;\n    });\n  }\n\n  ceil<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'ceil');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = Math.ceil(values[i]);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  floor<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'floor');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = Math.floor(values[i]);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  sign<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'x');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      if (values[i] < 0) {\n        newValues[i] = -1;\n      } else if (values[i] > 0) {\n        newValues[i] = 1;\n      } else {\n        newValues[i] = 0;\n      }\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  isNaN<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'x');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Uint8Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      if (Number.isNaN(values[i])) {\n        newValues[i] = 1;\n      }\n    }\n    return this.makeOutput(newValues, x.shape, 'bool');\n  }\n\n  isInf<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'x');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Uint8Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      if (Math.abs(values[i]) === Infinity) {\n        newValues[i] = 1;\n      }\n    }\n    return this.makeOutput(newValues, x.shape, 'bool');\n  }\n\n  isFinite<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'x');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Uint8Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      if (Number.isFinite(values[i])) {\n        newValues[i] = 1;\n      }\n    }\n    return this.makeOutput(newValues, x.shape, 'bool');\n  }\n\n  round<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'round');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      // The algorithm is based on banker's rounding.\n      const base = Math.floor(values[i]);\n      if (values[i] - base < 0.5) {\n        newValues[i] = Math.floor(values[i]);\n      } else if (values[i] - base > 0.5) {\n        newValues[i] = Math.ceil(values[i]);\n      } else {\n        if (base % 2.0 === 0.0) {\n          newValues[i] = base;\n        } else {\n          newValues[i] = base + 1.0;\n        }\n      }\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  exp<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'exp');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = Math.exp(values[i]);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  expm1<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'expm1');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = Math.expm1(values[i]);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  log<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'log');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = Math.log(value);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  log1p<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'log1p');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = Math.log1p(value);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  sqrt<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'sqrt');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = Math.sqrt(value);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  rsqrt<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'rsqrt');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = 1 / Math.sqrt(value);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  reciprocal<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'reciprocal');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = 1 / values[i];\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  linear<T extends Tensor>(x: T): T {\n    return x;\n  }\n\n  relu<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'relu');\n\n    const res = tf.zeros(x.shape, x.dtype);\n    const resVals = this.readSync(res.dataId) as TypedArray;\n    const inVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < inVals.length; ++i) {\n      resVals[i] = Math.max(0, inVals[i]);\n    }\n    return res as T;\n  }\n\n  relu6<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'relu');\n\n    const res = tf.zeros(x.shape, x.dtype);\n    const resVals = this.readSync(res.dataId) as TypedArray;\n    const inVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < inVals.length; ++i) {\n      resVals[i] = Math.min(Math.max(0, inVals[i]), 6);\n    }\n    return res as T;\n  }\n\n  prelu<T extends Tensor>(x: T, a: T): T {\n    assertNotComplex([x, a], 'prelu');\n\n    return this.broadcastedBinaryOp(\n               x, a, x.dtype,\n               (xValue, aValue) => xValue < 0 ? aValue * xValue : xValue) as T;\n  }\n\n  elu<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'elu');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      const v = values[i];\n      if (v >= 0) {\n        resultValues[i] = v;\n      } else {\n        resultValues[i] = (Math.exp(v) - 1);\n      }\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  eluDer<T extends Tensor>(dy: T, y: T): T {\n    assertNotComplex([dy, y], 'eluDer');\n\n    const resultValues = new Float32Array(y.size);\n    const values = this.readSync(y.dataId) as TypedArray;\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      const v = values[i];\n      if (v >= 1) {\n        resultValues[i] = dyValues[i];\n      } else {\n        resultValues[i] = dyValues[i] * (v + 1);\n      }\n    }\n    return this.makeOutput(resultValues, y.shape, 'float32');\n  }\n\n  selu<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'selu');\n\n    // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n    // see: https://arxiv.org/abs/1706.02515\n    const scaleAlpha = backend_util.SELU_SCALEALPHA;\n    const scale = backend_util.SELU_SCALE;\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      const v = values[i];\n      if (v >= 0) {\n        resultValues[i] = scale * v;\n      } else {\n        resultValues[i] = scaleAlpha * (Math.exp(v) - 1);\n      }\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  clip<T extends Tensor>(x: T, min: number, max: number): T {\n    assertNotComplex(x, 'clip');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      const v = values[i];\n      resultValues[i] = v > max ? max : (v < min ? min : v);\n    }\n    return this.makeOutput(resultValues, x.shape, x.dtype);\n  }\n\n  abs<T extends Tensor>(x: T): T {\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.abs(values[i]);\n    }\n\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  complexAbs<T extends Tensor>(x: T): T {\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n\n    for (let i = 0; i < x.size; ++i) {\n      const real = values[i * 2];\n      const imag = values[i * 2 + 1];\n      resultValues[i] = Math.hypot(real, imag);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  int<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'int');\n\n    const resultValues = new Int32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = values[i];\n    }\n    return this.makeOutput(resultValues, x.shape, 'int32');\n  }\n\n  sigmoid<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'sigmoid');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = 1 / (1 + Math.exp(-values[i]));\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  softplus<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'softplus');\n\n    // mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n\n    // epsilon is the difference between 1.0 and the next representable float.\n    // For a single precision 32 bit float this should be 2^-23, see:\n    // https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\n    const epsilon = 1.1920928955078125e-7;\n    const threshold = Math.log(epsilon) + 2.0;\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n\n    for (let i = 0; i < values.length; ++i) {\n      // Value above which exp(x) may overflow, but softplus(x) == x\n      // is within machine epsilon.\n      const tooLarge = values[i] > -threshold;\n\n      // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n      // is within machine epsilon.\n      const tooSmall = values[i] < threshold;\n\n      const expX = Math.exp(values[i]);\n      let result;\n\n      if (tooSmall) {\n        result = expX;\n      } else if (tooLarge) {\n        result = values[i];\n      } else {\n        result = Math.log(1.0 + expX);\n      }\n      resultValues[i] = result;\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  sin<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'sin');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.sin(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  tan<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'tan');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.tan(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  asin<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'asin');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.asin(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  acos<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'acos');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.acos(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  atan<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'atan');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.atan(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  atan2<T extends Tensor>(a: T, b: T): T {\n    assertNotComplex([a, b], 'atan2');\n\n    return this.broadcastedBinaryOp(\n               a, b, a.dtype, (aValue, bValue) => Math.atan2(aValue, bValue)) as\n        T;\n  }\n\n  sinh<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'sinh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.sinh(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  cosh<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'cosh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.cosh(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  tanh<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'tanh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = util.tanh(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  asinh<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'asinh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.asinh(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  acosh<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'acosh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.acosh(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  atanh<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'atanh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.atanh(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  erf<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'erf');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    const p = backend_util.ERF_P;\n    const a1 = backend_util.ERF_A1;\n    const a2 = backend_util.ERF_A2;\n    const a3 = backend_util.ERF_A3;\n    const a4 = backend_util.ERF_A4;\n    const a5 = backend_util.ERF_A5;\n    for (let i = 0; i < values.length; ++i) {\n      const sign = Math.sign(values[i]);\n      const v = Math.abs(values[i]);\n      const t = 1.0 / (1.0 + p * v);\n      resultValues[i] = sign *\n          (1.0 -\n           (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n               Math.exp(-v * v));\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  step<T extends Tensor>(x: T, alpha = 0): T {\n    assertNotComplex(x, 'step');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      if (isNaN(value)) {\n        resultValues[i] = NaN;\n      } else {\n        resultValues[i] = value > 0 ? 1 : alpha;\n      }\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  fusedConv2d(\n      {input, filter, convInfo, bias, activation, preluActivationWeights}:\n          backend_util.FusedConv2DConfig): Tensor4D {\n    let result = this.conv2d(input, filter, convInfo);\n\n    if (bias) {\n      result = this.add(result, bias) as Tensor4D;\n    }\n    if (activation) {\n      result =\n          mapActivation(this, result, activation, preluActivationWeights) as\n          Tensor4D;\n    }\n    return result;\n  }\n\n  conv2d(x: Tensor4D, filter: Tensor4D, convInfo: backend_util.Conv2DInfo):\n      Tensor4D {\n    assertNotComplex([x, filter], 'conv2d');\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const padLeft = convInfo.padInfo.left;\n    const padTop = convInfo.padInfo.top;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const y = tf.buffer(convInfo.outShape, x.dtype as 'float32');\n\n    const xBatchStride = x.strides[0];\n    const xRowStride = isChannelsLast ? x.strides[1] : x.strides[2];\n    const xColStride = isChannelsLast ? x.strides[2] : 1;\n    const xChannelStride = isChannelsLast ? 1 : x.strides[1];\n    const yBatchStride = y.strides[0];\n    const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n    const yColStride = isChannelsLast ? y.strides[2] : 1;\n    const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    const wVals = this.readSync(filter.dataId) as TypedArray;\n    const yVals = y.values;\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      const xOffset1 = b * xBatchStride;\n      const yOffset1 = b * yBatchStride;\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const yOffset2 = yOffset1 + yR * yRowStride;\n        const xRCorner = yR * convInfo.strideHeight - padTop;\n        for (let wR = 0; wR < filterHeight; wR++) {\n          const xR = xRCorner + wR * dilationHeight;\n          if (xR < 0 || xR >= convInfo.inHeight) {\n            continue;\n          }\n          const wOffset1 = wR * filter.strides[0];\n          const xOffset2 = xOffset1 + xR * xRowStride;\n          for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n            const yOffset3 = yOffset2 + yC * yColStride;\n            const xCCorner = yC * convInfo.strideWidth - padLeft;\n            for (let wC = 0; wC < filterWidth; wC++) {\n              const xC = xCCorner + wC * dilationWidth;\n              if (xC < 0 || xC >= convInfo.inWidth) {\n                continue;\n              }\n              const wOffset2 = wOffset1 + wC * filter.strides[1];\n              const xOffset3 = xOffset2 + xC * xColStride;\n              let wOffset3 = wOffset2;\n              for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                const xVal = xVals[xOffset3 + d1 * xChannelStride];\n                for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                  yVals[yOffset3 + d2 * yChannelStride] +=\n                      xVal * wVals[wOffset3 + d2];\n                }\n                wOffset3 += convInfo.outChannels;\n              }\n            }\n          }\n        }\n      }\n    }\n    return y.toTensor() as Tensor4D;\n  }\n\n  conv3d(x: Tensor5D, filter: Tensor5D, convInfo: backend_util.Conv3DInfo):\n      Tensor5D {\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const padFront = convInfo.padInfo.front;\n    const padLeft = convInfo.padInfo.left;\n    const padTop = convInfo.padInfo.top;\n    const y = tf.buffer<Rank.R5>(convInfo.outShape, x.dtype as 'float32');\n\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    const wVals = this.readSync(filter.dataId) as TypedArray;\n    const yVals = y.values;\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      const xOffset1 = b * x.strides[0];\n      const yOffset1 = b * y.strides[0];\n      for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n        const yOffset2 = yOffset1 + yF * y.strides[1];\n        const xFCorner = yF * convInfo.strideDepth - padFront;\n        for (let wF = 0; wF < filterDepth; wF++) {\n          const xF = xFCorner + wF * dilationDepth;\n          if (xF < 0 || xF >= convInfo.inDepth) {\n            continue;\n          }\n          const wOffset1 = wF * filter.strides[0];\n          const xOffset2 = xOffset1 + xF * x.strides[1];\n\n          for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n            const yOffset3 = yOffset2 + yR * y.strides[2];\n            const xRCorner = yR * convInfo.strideHeight - padTop;\n            for (let wR = 0; wR < filterHeight; wR++) {\n              const xR = xRCorner + wR * dilationHeight;\n              if (xR < 0 || xR >= convInfo.inHeight) {\n                continue;\n              }\n              const wOffset2 = wOffset1 + wR * filter.strides[1];\n              const xOffset3 = xOffset2 + xR * x.strides[2];\n              for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n                const xCCorner = yC * convInfo.strideWidth - padLeft;\n                for (let wC = 0; wC < filterWidth; wC++) {\n                  const xC = xCCorner + wC * dilationWidth;\n                  if (xC < 0 || xC >= convInfo.inWidth) {\n                    continue;\n                  }\n                  const wOffset3 = wOffset2 + wC * filter.strides[2];\n                  const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                  let wOffset4 = wOffset3;\n                  for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                    const xVal = xVals[xOffset4 + d1];\n                    for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                      yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                    }\n                    wOffset4 += convInfo.outChannels;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    return y.toTensor();\n  }\n\n  conv2dDerInput(\n      dy: Tensor4D, filter: Tensor4D,\n      convInfo: backend_util.Conv2DInfo): Tensor4D {\n    assertNotComplex([dy, filter], 'conv2dDerInput');\n\n    const dx = tf.buffer<Rank.R4>(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    const fltValues = this.readSync(filter.dataId) as TypedArray;\n    const [fltS0, fltS1, fltS2] = filter.strides;\n    const {\n      batchSize,\n      filterHeight,\n      filterWidth,\n      inChannels,\n      inHeight,\n      inWidth,\n      outChannels,\n      outHeight,\n      outWidth,\n      strideHeight,\n      strideWidth,\n      dataFormat\n    } = convInfo;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const xBatchStride = dx.strides[0];\n    const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n    const xColStride = isChannelsLast ? dx.strides[2] : 1;\n    const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n    const yBatchStride = dy.strides[0];\n    const yRowStride = isChannelsLast ? dy.strides[1] : dy.strides[2];\n    const yColStride = isChannelsLast ? dy.strides[2] : 1;\n    const yChannelStride = isChannelsLast ? 1 : dy.strides[1];\n\n    for (let b = 0; b < batchSize; ++b) {\n      for (let d1 = 0; d1 < inChannels; ++d1) {\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yR = xRMin; yR < yRMax; ++yR) {\n              const wR = yR * strideHeight - xRCorner;\n\n              for (let yC = xCMin; yC < yCMax; ++yC) {\n                const wC = yC * strideWidth - xCCorner;\n                const dyOffset =\n                    yBatchStride * b + yRowStride * yR + yColStride * yC;\n                const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                    fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n                for (let d2 = 0; d2 < outChannels; ++d2) {\n                  const pixel = dyValues[dyOffset + yChannelStride * d2];\n                  const weight = fltValues[fltOffset + d2];\n                  dotProd += pixel * weight;\n                }\n              }\n            }\n            const dxOffset = xBatchStride * b + xRowStride * xR +\n                xColStride * xC + xChannelStride * d1;\n            dxValues[dxOffset] = dotProd;\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  conv3dDerInput(\n      dy: Tensor5D, filter: Tensor5D,\n      convInfo: backend_util.Conv3DInfo): Tensor5D {\n    const dx = tf.buffer<Rank.R5>(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    const [dyS0, dyS1, dyS2, dyS3] = dy.strides;\n    const fltValues = this.readSync(filter.dataId) as TypedArray;\n    const [fltS0, fltS1, fltS2, fltS3] = filter.strides;\n    const {\n      batchSize,\n      filterDepth,\n      filterHeight,\n      filterWidth,\n      inChannels,\n      inDepth,\n      inHeight,\n      inWidth,\n      outChannels,\n      outDepth,\n      outHeight,\n      outWidth,\n      strideDepth,\n      strideHeight,\n      strideWidth\n    } = convInfo;\n    const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n    for (let b = 0; b < batchSize; ++b) {\n      for (let d1 = 0; d1 < inChannels; ++d1) {\n        // Frames of depth\n        for (let xF = 0; xF < inDepth; ++xF) {\n          const xFCorner = xF - frontPad;\n          const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n          const yFMax =\n              Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n\n          // Rows as per standard 2d matrix notation\n          for (let xR = 0; xR < inHeight; ++xR) {\n            const xRCorner = xR - topPad;\n            const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n            const yRMax =\n                Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n            // Columns as per standard 2d matrix notation\n            for (let xC = 0; xC < inWidth; ++xC) {\n              const xCCorner = xC - leftPad;\n              const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n              const yCMax =\n                  Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n              let dotProd = 0;\n              for (let yF = xFMin; yF < yFMax; ++yF) {\n                const wF = yF * strideDepth - xFCorner;\n\n                for (let yR = xRMin; yR < yRMax; ++yR) {\n                  const wR = yR * strideHeight - xRCorner;\n\n                  for (let yC = xCMin; yC < yCMax; ++yC) {\n                    const wC = yC * strideWidth - xCCorner;\n                    const dyOffset =\n                        dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                    const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                        fltS1 * (filterHeight - 1 - wR) +\n                        fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                    for (let d2 = 0; d2 < outChannels; ++d2) {\n                      const pixel = dyValues[dyOffset + d2];\n                      const weight = fltValues[fltOffset + d2];\n                      dotProd += pixel * weight;\n                    }\n                  }\n                }\n              }\n              dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                  dotProd;\n            }\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  conv2dDerFilter(x: Tensor4D, dy: Tensor4D, convInfo: backend_util.Conv2DInfo):\n      Tensor4D {\n    assertNotComplex([x, dy], 'conv2dDerFilter');\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    const dW = tf.buffer<Rank.R4>(convInfo.filterShape, 'float32');\n\n    const leftPad = convInfo.padInfo.left;\n    const topPad = convInfo.padInfo.top;\n    const xBuf = this.bufferSync(x);\n    const dyBuf = this.bufferSync(dy);\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            // Need to convolve.\n            let dotProd = 0;\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              for (let yR = yRMin; yR < yRMax; ++yR) {\n                const xR = wR + yR * strideHeight - topPad;\n                for (let yC = yCMin; yC < yCMax; ++yC) {\n                  const xC = wC + yC * strideWidth - leftPad;\n                  if (isChannelsLast) {\n                    dotProd +=\n                        xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n                  } else {\n                    dotProd +=\n                        xBuf.get(b, d1, xR, xC) * dyBuf.get(b, d2, yR, yC);\n                  }\n                }\n              }\n            }\n            dW.set(dotProd, wR, wC, d1, d2);\n          }\n        }\n      }\n    }\n    return dW.toTensor();\n  }\n\n  conv3dDerFilter(x: Tensor5D, dy: Tensor5D, convInfo: backend_util.Conv3DInfo):\n      Tensor5D {\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const dw = tf.buffer<Rank.R5>(convInfo.filterShape, 'float32');\n    const dwValues = dw.values;\n    const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    const [dyS0, dyS1, dyS2, dyS3] = dy.strides;\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const [xS0, xS1, xS2, xS3] = x.strides;\n\n    const frontPad = convInfo.padInfo.front;\n    const leftPad = convInfo.padInfo.left;\n    const topPad = convInfo.padInfo.top;\n\n    for (let wF = 0; wF < filterDepth; ++wF) {\n      const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n      const yFMax = Math.min(\n          convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n      const wOffset1 = wF * dwS0;\n\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n        const yRMax = Math.min(\n            convInfo.outHeight,\n            (convInfo.inHeight + topPad - wR) / strideHeight);\n        const wOffset2 = wR * dwS1 + wOffset1;\n\n        for (let wC = 0; wC < filterWidth; ++wC) {\n          const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n          const yCMax = Math.min(\n              convInfo.outWidth,\n              (convInfo.inWidth + leftPad - wC) / strideWidth);\n          const wOffset3 = wC * dwS2 + wOffset2;\n\n          for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n            const wOffset4 = d1 * dwS3 + wOffset3;\n\n            for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n              let dotProd = 0;\n              for (let b = 0; b < convInfo.batchSize; ++b) {\n                const xOffset1 = b * xS0;\n                const yOffset1 = b * dyS0;\n\n                for (let yF = yFMin; yF < yFMax; ++yF) {\n                  const xF = wF + yF * strideDepth - frontPad;\n                  const xOffset2 = xF * xS1 + xOffset1;\n                  const yOffset2 = yF * dyS1 + yOffset1;\n\n                  for (let yR = yRMin; yR < yRMax; ++yR) {\n                    const xR = wR + yR * strideHeight - topPad;\n                    const xOffset3 = xR * xS2 + xOffset2;\n                    const yOffset3 = yR * dyS2 + yOffset2;\n\n                    for (let yC = yCMin; yC < yCMax; ++yC) {\n                      const xC = wC + yC * strideWidth - leftPad;\n                      const xOffset4 = xC * xS3 + xOffset3;\n                      const yOffset4 = yC * dyS3 + yOffset3;\n\n                      dotProd +=\n                          xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                    }\n                  }\n                }\n              }\n              dwValues[wOffset4 + d2] = dotProd;\n            }\n          }\n        }\n      }\n    }\n    return dw.toTensor();\n  }\n\n  fusedDepthwiseConv2D(\n      {input, filter, convInfo, bias, activation, preluActivationWeights}:\n          backend_util.FusedConv2DConfig): Tensor4D {\n    let result = this.depthwiseConv2D(input, filter, convInfo);\n\n    if (bias) {\n      result = this.add(result, bias) as Tensor4D;\n    }\n    if (activation) {\n      result =\n          mapActivation(this, result, activation, preluActivationWeights) as\n          Tensor4D;\n    }\n    return result;\n  }\n\n  depthwiseConv2D(\n      x: Tensor4D, filter: Tensor4D,\n      convInfo: backend_util.Conv2DInfo): Tensor4D {\n    assertNotComplex([x, filter], 'depthwiseConv2D');\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const padLeft = convInfo.padInfo.left;\n    const padTop = convInfo.padInfo.top;\n    const chMul = convInfo.outChannels / convInfo.inChannels;\n    const y = tf.buffer(convInfo.outShape, x.dtype as 'float32');\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    const wVals = this.readSync(filter.dataId) as TypedArray;\n    const yVals = y.values;\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      const xOffset1 = b * x.strides[0];\n      const yOffset1 = b * y.strides[0];\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const yOffset2 = yOffset1 + yR * y.strides[1];\n        const xRCorner = yR * convInfo.strideHeight - padLeft;\n        for (let wR = 0; wR < filterHeight; ++wR) {\n          const xR = xRCorner + wR * dilationHeight;\n          if (xR < 0 || xR >= convInfo.inHeight) {\n            continue;\n          }\n          const wOffset1 = wR * filter.strides[0];\n          const xOffset2 = xOffset1 + xR * x.strides[1];\n          for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n            const yOffset3 = yOffset2 + yC * y.strides[2];\n            const xCCorner = yC * convInfo.strideWidth - padTop;\n            for (let wC = 0; wC < filterWidth; ++wC) {\n              const xC = xCCorner + wC * dilationWidth;\n              if (xC < 0 || xC >= convInfo.inWidth) {\n                continue;\n              }\n              const wOffset2 = wOffset1 + wC * filter.strides[1];\n              const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n              let yOffset4 = yOffset3;\n              let wOffset3 = wOffset2;\n              for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                const xVal = xVals[xOffset3 + d1];\n                for (let q = 0; q < chMul; ++q) {\n                  yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n                }\n                yOffset4 += chMul;\n                wOffset3 += chMul;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return y.toTensor() as Tensor4D;\n  }\n\n  depthwiseConv2DDerInput(\n      dy: Tensor4D, filter: Tensor4D,\n      convInfo: backend_util.Conv2DInfo): Tensor4D {\n    assertNotComplex([dy, filter], 'depthwiseConv2DDerInput');\n\n    const dx = tf.buffer<Rank.R4>(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const [dxS0, dxS1, dxS2] = dx.strides;\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    const [dyS0, dyS1, dyS2] = dy.strides;\n    const fltValues = this.readSync(filter.dataId) as TypedArray;\n    const [fltS0, fltS1, fltS2] = filter.strides;\n    const {\n      batchSize,\n      filterHeight,\n      filterWidth,\n      inChannels,\n      inHeight,\n      inWidth,\n      outChannels,\n      outHeight,\n      outWidth,\n      strideHeight,\n      strideWidth\n    } = convInfo;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n    const chMul = outChannels / inChannels;\n\n    for (let b = 0; b < batchSize; ++b) {\n      for (let d1 = 0; d1 < inChannels; ++d1) {\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yR = xRMin; yR < yRMax; ++yR) {\n              const wR = yR * strideHeight - xRCorner;\n\n              for (let yC = xCMin; yC < yCMax; ++yC) {\n                const wC = yC * strideWidth - xCCorner;\n                const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n                const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                    fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n                for (let dm = 0; dm < chMul; ++dm) {\n                  const d2 = d1 * chMul + dm;\n                  const pixel = dyValues[dyOffset + d2];\n                  const weight = fltValues[fltOffset + dm];\n                  dotProd += pixel * weight;\n                }\n              }\n            }\n            dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  depthwiseConv2DDerFilter(\n      x: Tensor4D, dy: Tensor4D, convInfo: backend_util.Conv2DInfo): Tensor4D {\n    assertNotComplex([x, dy], 'depthwiseConv2DDerFilter');\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dW = tf.buffer<Rank.R4>(convInfo.filterShape, 'float32');\n\n    const leftPad = convInfo.padInfo.left;\n    const topPad = convInfo.padInfo.top;\n    const chMul = convInfo.outChannels / convInfo.inChannels;\n\n    const xBuf = this.bufferSync(x);\n    const dyBuf = this.bufferSync(dy);\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          const d1 = Math.trunc(d2 / chMul);\n          const dm = d2 % chMul;\n\n          let dotProd = 0;\n          for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let yR = yRMin; yR < yRMax; ++yR) {\n              const xR = wR + yR * strideHeight - topPad;\n              for (let yC = yCMin; yC < yCMax; ++yC) {\n                const xC = wC + yC * strideWidth - leftPad;\n                dotProd += xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n              }\n            }\n          }\n          dW.set(dotProd, wR, wC, d1, dm);\n        }\n      }\n    }\n    return dW.toTensor();\n  }\n\n  tile<T extends Tensor>(x: T, reps: number[]): T {\n    assertNotComplex(x, 'tile');\n    return tile(this.bufferSync(x), reps) as T;\n  }\n\n  gather<T extends Tensor>(x: T, indices: Tensor1D, axis: number): T {\n    assertNotComplex([x, indices], 'gather');\n\n    const newShape: number[] = x.shape.slice();\n    const indicesValues = this.readSync(indices.dataId) as TypedArray;\n    newShape[axis] = indicesValues.length;\n    const result = tf.buffer(newShape, x.dtype);\n    const xBuf = this.bufferSync(x);\n\n    for (let i = 0; i < result.size; ++i) {\n      const newLoc = result.indexToLoc(i);\n\n      const originalLoc: number[] = newLoc.slice();\n      originalLoc[axis] = indicesValues[newLoc[axis]];\n\n      const originalIndex = xBuf.locToIndex(originalLoc);\n      result.values[i] = xBuf.values[originalIndex];\n    }\n    return result.toTensor() as T;\n  }\n\n  batchToSpaceND<T extends Tensor>(\n      x: T, blockShape: number[], crops: number[][]): T {\n    assertNotComplex([x], 'batchToSpaceND');\n\n    const prod = blockShape.reduce((a, b) => a * b);\n\n    const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n    const permuted =\n        backend_util.getPermuted(reshaped.length, blockShape.length);\n    const reshapedPermuted =\n        backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n    const sliceBeginCoords =\n        backend_util.getSliceBeginCoords(crops, blockShape.length);\n    const sliceSize =\n        backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n    return tf.transpose(x.reshape(reshaped), permuted)\n               .reshape(reshapedPermuted)\n               .slice(sliceBeginCoords, sliceSize) as T;\n  }\n\n  maxPool(x: Tensor4D, convInfo: backend_util.Conv2DInfo): Tensor4D {\n    assertNotComplex(x, 'maxPool');\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    return pool(xValues, x.shape, x.dtype, x.strides, convInfo, 'max')\n               .toTensor() as Tensor4D;\n  }\n\n  maxPoolBackprop(\n      dy: Tensor4D, x: Tensor4D, y: Tensor4D,\n      convInfo: backend_util.Conv2DInfo): Tensor4D {\n    assertNotComplex([x, y], 'maxPoolBackprop');\n\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const maxPosBuf = buffer(\n        convInfo.outShape, x.dtype,\n        maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = tf.buffer<Rank.R4>(x.shape, 'float32');\n\n    const dyBuf = this.bufferSync(dy);\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      for (let d = 0; d < convInfo.inChannels; ++d) {\n        for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n          for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n            // Shader code begins.\n            const dyRCorner = dxR - padTop;\n            const dyCCorner = dxC - padLeft;\n            let dotProd = 0;\n            for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n              const dyR = (dyRCorner + wR) / strideHeight;\n              if (dyR < 0 || dyR >= convInfo.outHeight ||\n                  Math.floor(dyR) !== dyR) {\n                continue;\n              }\n              for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n                const dyC = (dyCCorner + wC) / strideWidth;\n                if (dyC < 0 || dyC >= convInfo.outWidth ||\n                    Math.floor(dyC) !== dyC) {\n                  continue;\n                }\n                const maxPos = effectiveFilterHeight * effectiveFilterWidth -\n                    1 - (maxPosBuf.get(b, dyR, dyC, d) as number);\n                const curPos = wR * effectiveFilterWidth + wC;\n\n                const mask = maxPos === curPos ? 1 : 0;\n                if (mask === 0) {\n                  continue;\n                }\n\n                const pixel = dyBuf.get(b, dyR, dyC, d);\n                dotProd += pixel * mask;\n              }\n            }\n            dx.set(dotProd, b, dxR, dxC, d);\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  avgPoolBackprop(dy: Tensor4D, x: Tensor4D, convInfo: backend_util.Conv2DInfo):\n      Tensor4D {\n    assertNotComplex([dy, x], 'avgPoolBackprop');\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = tf.buffer<Rank.R4>(x.shape, 'float32');\n\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n    const dyBuf = this.bufferSync(dy);\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      for (let d = 0; d < convInfo.inChannels; ++d) {\n        for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n          for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n            // Shader code begins.\n            const dyRCorner = dxR - padTop;\n            const dyCCorner = dxC - padLeft;\n            let dotProd = 0;\n            for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n              const dyR = (dyRCorner + wR) / strideHeight;\n              if (dyR < 0 || dyR >= convInfo.outHeight ||\n                  Math.floor(dyR) !== dyR) {\n                continue;\n              }\n              for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n                const dyC = (dyCCorner + wC) / strideWidth;\n                if (dyC < 0 || dyC >= convInfo.outWidth ||\n                    Math.floor(dyC) !== dyC) {\n                  continue;\n                }\n\n                const pixel = dyBuf.get(b, dyR, dyC, d);\n                dotProd += pixel;\n              }\n            }\n            dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  private pool3d(\n      x: Tensor5D, convInfo: backend_util.Conv3DInfo,\n      poolType: 'max'|'avg'): Tensor5D {\n    assertNotComplex(x, 'pool3d');\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    const initialValue =\n        (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                              Number.POSITIVE_INFINITY);\n\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const output = tf.buffer(convInfo.outShape, x.dtype);\n    const outputVals = output.values;\n\n    const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n        convInfo.outShape[3] * convInfo.outShape[4];\n    const outputDepthStrides =\n        convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n    const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n    const outputColStrides = convInfo.outShape[4];\n\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n      const outputBatchOffset = batch * outputBatchStrides;\n      const inputBatchOffset = batch * x.strides[0];\n      for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n        for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n          const xDepthCorner = yDepth * strideDepth - padFront;\n          let xDepthMin = xDepthCorner;\n          while (xDepthMin < 0) {\n            xDepthMin += dilationDepth;\n          }\n          const xDepthMax =\n              Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n          const outputDepthOffset =\n              outputBatchOffset + yDepth * outputDepthStrides;\n          for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n            const xRowCorner = yRow * strideHeight - padTop;\n            let xRowMin = xRowCorner;\n            while (xRowMin < 0) {\n              xRowMin += dilationHeight;\n            }\n            const xRowMax =\n                Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n            const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n            for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n              const xColCorner = yCol * strideWidth - padLeft;\n              let xColMin = xColCorner;\n              while (xColMin < 0) {\n                xColMin += dilationWidth;\n              }\n              const xColMax =\n                  Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n              // Shader code begins\n              const outputColOffset = outputRowOffset + yCol * outputColStrides;\n              let minMaxValue = initialValue;\n              let avgValue = 0;\n              let count = 0;\n              for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                   xDepth += dilationDepth) {\n                const xDepthOffset = inputBatchOffset + xDepth * x.strides[1];\n                for (let xRow = xRowMin; xRow < xRowMax;\n                     xRow += dilationHeight) {\n                  const xRowOffset = xDepthOffset + xRow * x.strides[2];\n                  for (let xCol = xColMin; xCol < xColMax;\n                       xCol += dilationWidth) {\n                    const xColOffset = xRowOffset + xCol * x.strides[3];\n                    const pixel = xValues[xColOffset + channel];\n                    if ((poolType === 'max' && pixel > minMaxValue)) {\n                      minMaxValue = pixel;\n                    } else if (poolType === 'avg') {\n                      avgValue += pixel;\n                      count++;\n                    }\n                    if (isNaN(minMaxValue)) {\n                      break;\n                    }\n                  }\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n                if (isNaN(minMaxValue)) {\n                  break;\n                }\n              }\n              const outputOffset = outputColOffset + channel;\n              outputVals[outputOffset] =\n                  poolType === 'avg' ? avgValue / count : minMaxValue;\n            }\n          }\n        }\n      }\n    }\n    return output.toTensor() as Tensor5D;\n  }\n\n  avgPool3d(x: Tensor5D, convInfo: backend_util.Conv3DInfo): Tensor5D {\n    assertNotComplex(x, 'avgPool3d');\n\n    return this.pool3d(x, convInfo, 'avg').toFloat();\n  }\n\n  avgPool3dBackprop(\n      dy: Tensor5D, x: Tensor5D, convInfo: backend_util.Conv3DInfo): Tensor5D {\n    assertNotComplex([dy, x], 'avgPool3dBackprop');\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = tf.buffer<Rank.R5>(x.shape, 'float32');\n\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n    const dyBuf = this.bufferSync(dy);\n\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n      for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n        for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n          for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n            for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n              // Shader code begins.\n              const dyDepthCorner = dxDepth - padFront;\n              const dyRowCorner = dxRow - padTop;\n              const dyColCorner = dxCol - padLeft;\n              let dotProd = 0;\n              for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                   wDepth += dilationDepth) {\n                const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n                if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                    Math.floor(dyDepth) !== dyDepth) {\n                  continue;\n                }\n                for (let wRow = 0; wRow < effectiveFilterHeight;\n                     wRow += dilationHeight) {\n                  const dyRow = (dyRowCorner + wRow) / strideHeight;\n                  if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                      Math.floor(dyRow) !== dyRow) {\n                    continue;\n                  }\n                  for (let wCol = 0; wCol < effectiveFilterWidth;\n                       wCol += dilationWidth) {\n                    const dyCol = (dyColCorner + wCol) / strideWidth;\n                    if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                        Math.floor(dyCol) !== dyCol) {\n                      continue;\n                    }\n\n                    const pixel =\n                        dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                    dotProd += pixel;\n                  }\n                }\n              }\n              dx.set(\n                  dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol,\n                  channel);\n            }\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  maxPool3d(x: Tensor5D, convInfo: backend_util.Conv3DInfo): Tensor5D {\n    assertNotComplex(x, 'maxPool3d');\n\n    return this.pool3d(x, convInfo, 'max').toFloat();\n  }\n\n  private maxPool3dPositions(x: Tensor5D, convInfo: backend_util.Conv3DInfo):\n      Tensor5D {\n    const maxPositions = tf.buffer(convInfo.outShape, 'int32');\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    const xBuf = this.bufferSync(x);\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n      for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n        for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n          const xDepthCorner = yDepth * strideDepth - padFront;\n          let xDepthMin = xDepthCorner;\n          while (xDepthMin < 0) {\n            xDepthMin += dilationDepth;\n          }\n          const xDepthMax =\n              Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n          for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n            const xRowCorner = yRow * strideHeight - padTop;\n            let xRowMin = xRowCorner;\n            while (xRowMin < 0) {\n              xRowMin += dilationHeight;\n            }\n            const xRowMax =\n                Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n            for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n              const xColCorner = yCol * strideWidth - padLeft;\n              let xColMin = xColCorner;\n              while (xColMin < 0) {\n                xColMin += dilationWidth;\n              }\n              const xColMax =\n                  Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n\n              // Shader code begins\n              let maxValue = Number.NEGATIVE_INFINITY;\n              let maxPosition = -1;\n\n              for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                   xDepth += dilationDepth) {\n                const wDepth = xDepth - xDepthCorner;\n                for (let xRow = xRowMin; xRow < xRowMax;\n                     xRow += dilationHeight) {\n                  const wRow = xRow - xRowCorner;\n                  for (let xCol = xColMin; xCol < xColMax;\n                       xCol += dilationWidth) {\n                    const wCol = xCol - xColCorner;\n                    const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                    if (pixel >= maxValue) {\n                      maxValue = pixel;\n                      maxPosition = wDepth * effectiveFilterHeight *\n                              effectiveFilterWidth +\n                          wRow * effectiveFilterHeight + wCol;\n                    }\n                  }\n                }\n              }\n\n              maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n            }\n          }\n        }\n      }\n    }\n    return maxPositions.toTensor() as Tensor5D;\n  }\n\n  maxPool3dBackprop(\n      dy: Tensor5D, x: Tensor5D, y: Tensor5D,\n      convInfo: backend_util.Conv3DInfo): Tensor5D {\n    assertNotComplex([x, y], 'maxPool3dBackprop');\n\n    const maxPositions = this.maxPool3dPositions(x, convInfo);\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = tf.buffer<Rank.R5>(x.shape, 'float32');\n\n    const maxPosBuf = this.bufferSync(maxPositions);\n    const dyBuf = this.bufferSync(dy);\n\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n      for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n        for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n          for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n            for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n              // Shader code begins\n              const dyDepthCorner = dxDepth - padFront;\n              const dyRowCorner = dxRow - padTop;\n              const dyColCorner = dxCol - padLeft;\n              let dotProd = 0;\n              for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                   wDepth += dilationDepth) {\n                const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n                if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                    Math.floor(dyDepth) !== dyDepth) {\n                  continue;\n                }\n                for (let wRow = 0; wRow < effectiveFilterHeight;\n                     wRow += dilationHeight) {\n                  const dyRow = (dyRowCorner + wRow) / strideHeight;\n                  if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                      Math.floor(dyRow) !== dyRow) {\n                    continue;\n                  }\n                  for (let wCol = 0; wCol < effectiveFilterWidth;\n                       wCol += dilationWidth) {\n                    const dyCol = (dyColCorner + wCol) / strideWidth;\n                    if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                        Math.floor(dyCol) !== dyCol) {\n                      continue;\n                    }\n\n                    const maxPos = effectiveFilterDepth *\n                            effectiveFilterHeight * effectiveFilterWidth -\n                        1 -\n                        maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                    const curPos =\n                        wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                        wRow * effectiveFilterWidth + wCol;\n\n                    const mask = maxPos === curPos ? 1 : 0;\n                    if (mask === 0) {\n                      continue;\n                    }\n\n                    const pixel =\n                        dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                    dotProd += pixel * mask;\n                  }\n                }\n              }\n              dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n            }\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  cast<T extends Tensor>(x: T, dtype: DataType): T {\n    return backend_util.castTensor(x, dtype, this);\n  }\n\n  avgPool(x: Tensor4D, convInfo: backend_util.Conv2DInfo): Tensor4D {\n    assertNotComplex(x, 'avgPool');\n    assertNotComplex(x, 'maxPool');\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    return pool(xValues, x.shape, x.dtype, x.strides, convInfo, 'avg')\n               .toTensor()\n               .toFloat() as Tensor4D;\n  }\n\n  resizeBilinear(\n      x: Tensor4D, newHeight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    assertNotComplex(x, 'resizeBilinear');\n\n    const [batch, oldHeight, oldWidth, numChannels] = x.shape;\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const result = new Float32Array(\n        util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n\n    const effectiveInputSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutputSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n    let outputIdx = 0;\n    const effectiveRowSizeRatio =\n        effectiveInputSize[0] / effectiveOutputSize[0];\n    const effectiveColSizeRatio =\n        effectiveInputSize[1] / effectiveOutputSize[1];\n    for (let b = 0; b < batch; b++) {\n      for (let r = 0; r < newHeight; r++) {\n        const sourceFracRow = effectiveRowSizeRatio * r;\n        const sourceRowFloor = Math.floor(sourceFracRow);\n        const rowFrac = sourceFracRow - sourceRowFloor;\n        const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n        const topRowOffset = b * x.strides[0] + sourceRowFloor * x.strides[1];\n        const botRowOffset = b * x.strides[0] + sourceRowCeil * x.strides[1];\n        for (let c = 0; c < newWidth; c++) {\n          const sourceFracCol = effectiveColSizeRatio * c;\n          const sourceColFloor = Math.floor(sourceFracCol);\n          const colFrac = sourceFracCol - sourceColFloor;\n          const sourceColCeil =\n              Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n          const topLeftOffest = topRowOffset + sourceColFloor * x.strides[2];\n          const botLeftOffset = botRowOffset + sourceColFloor * x.strides[2];\n          const topRightOffset = topRowOffset + sourceColCeil * x.strides[2];\n          const botRightOffest = botRowOffset + sourceColCeil * x.strides[2];\n          for (let d = 0; d < numChannels; d++) {\n            // Begin shader.\n\n            // Compute the fractional index of the source.\n            const topLeft = xValues[topLeftOffest + d];\n            const bottomLeft = xValues[botLeftOffset + d];\n            const topRight = xValues[topRightOffset + d];\n            const bottomRight = xValues[botRightOffest + d];\n\n            const top = topLeft + (topRight - topLeft) * colFrac;\n            const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n            const newValue = top + (bottom - top) * rowFrac;\n\n            result[outputIdx++] = newValue;\n          }\n        }\n      }\n    }\n    return tf.tensor(result, [batch, newHeight, newWidth, numChannels]);\n  }\n\n  resizeBilinearBackprop(dy: Tensor4D, x: Tensor4D, alignCorners: boolean) {\n    assertNotComplex([dy, x], 'resizeBilinearBackprop');\n\n    const [batch, xHeight, xWidth, depth] = x.shape;\n    const [, yHeight, yWidth] = dy.shape;\n\n    const output = new Float32Array(batch * xHeight * xWidth * depth);\n\n    // In the backwards pass, we want to find the pixels that were generated\n    // for each pixel in the input image the forward pass and add the\n    // corresponding coefficient from dy to the gradient (with some\n    // interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    let offset = 0;\n    for (let b = 0; b < batch; b++) {\n      const bOffset = b * x.strides[0];\n      for (let r = 0; r < yHeight; r++) {\n        const dxR = r * heightScale;\n        const topDxRIndex = Math.floor(dxR);\n        const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n\n        const topDxROffset = bOffset + topDxRIndex * x.strides[1];\n        const bottomDxROffset = bOffset + bottomDxRIndex * x.strides[1];\n\n        const dxRLerp = dxR - topDxRIndex;\n        const inverseDxRLerp = 1.0 - dxRLerp;\n        for (let c = 0; c < yWidth; c++) {\n          const dxC = c * widthScale;\n          const leftDxCIndex = Math.floor(dxC);\n          const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n          const dxCLerp = dxC - leftDxCIndex;\n          const inverseDxCLerp = 1.0 - dxCLerp;\n\n          const topLeftRCOffset = topDxROffset + leftDxCIndex * x.strides[2];\n          const topRightRCOffset = topDxROffset + rightDxCIndex * x.strides[2];\n          const bottomLeftRCOffset =\n              bottomDxROffset + leftDxCIndex * x.strides[2];\n          const bottomRightRCOffset =\n              bottomDxROffset + rightDxCIndex * x.strides[2];\n\n          const inverseDxRLerpTimesInverseDxCLerp =\n              inverseDxRLerp * inverseDxCLerp;\n          const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n          const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n          const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n          for (let d = 0; d < depth; d++) {\n            const dyVal = dyValues[offset++];\n            output[topLeftRCOffset + d] +=\n                dyVal * inverseDxRLerpTimesInverseDxCLerp;\n            output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n            output[bottomLeftRCOffset + d] +=\n                dyVal * dxRLerpTimesInverseDxCLerp;\n            output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n          }\n        }\n      }\n    }\n    return tf.tensor4d(output, [batch, xWidth, xHeight, depth], x.dtype);\n  }\n\n  resizeNearestNeighbor(\n      x: Tensor4D, newHeight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    assertNotComplex(x, 'resizeNearestNeighbor');\n\n    const [batch, oldHeight, oldWidth, numChannels] = x.shape;\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n\n    const effectiveInputSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutputSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    const effectiveRowSizeRatio =\n        effectiveInputSize[0] / effectiveOutputSize[0];\n    const effectiveColSizeRatio =\n        effectiveInputSize[1] / effectiveOutputSize[1];\n\n    let outputOffset = 0;\n    for (let b = 0; b < batch; b++) {\n      const batchOffset = b * x.strides[0];\n      for (let r = 0; r < newHeight; r++) {\n        const sourceFracRow = effectiveRowSizeRatio * r;\n        const sourceNearestRow = Math.min(\n            oldHeight - 1,\n            alignCorners ? Math.round(sourceFracRow) :\n                           Math.floor(sourceFracRow));\n        const rowOffset = batchOffset + sourceNearestRow * x.strides[1];\n        for (let c = 0; c < newWidth; c++) {\n          const sourceFracCol = effectiveColSizeRatio * c;\n          const sourceNearestCol = Math.min(\n              oldWidth - 1,\n              alignCorners ? Math.round(sourceFracCol) :\n                             Math.floor(sourceFracCol));\n          const colOffset = rowOffset + sourceNearestCol * x.strides[2];\n          for (let d = 0; d < numChannels; d++) {\n            // Begin shader.\n            // Compute the fractional index of the source.\n            const newVal = xValues[colOffset + d];\n            output[outputOffset++] = newVal;\n          }\n        }\n      }\n    }\n    return tf.tensor(\n        output, [batch, newHeight, newWidth, numChannels], x.dtype);\n  }\n\n  resizeNearestNeighborBackprop(\n      dy: Tensor4D, x: Tensor4D, alignCorners: boolean) {\n    assertNotComplex([dy, x], 'resizeNearestNeighborBackprop');\n\n    const [batch, xHeight, xWidth, depth] = x.shape;\n    const [, yHeight, yWidth] = dy.shape;\n\n    const output = new Float32Array(batch * xHeight * xWidth * depth);\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n\n    // In the backwards pass, we want to find the pixels that were generated\n    // for each pixel in the input image the forward pass\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    // Loop over the output space.\n    for (let b = 0; b < batch; b++) {\n      const batchOffset = b * x.strides[0];\n      for (let r = 0; r < xHeight; r++) {\n        const rowOffset = batchOffset + r * x.strides[1];\n\n        // Compute bounds for where in dy we will look\n        const startRLerp = Math.floor(r * invHeightScale);\n        const startDyR = Math.floor(startRLerp - (winHeight / 2));\n        for (let c = 0; c < xWidth; c++) {\n          const colOffset = rowOffset + c * x.strides[2];\n\n          // Compute bounds for where in dy we will look\n          const startCLerp = Math.floor(c * invWidthScale);\n          const startDyC = Math.floor(startCLerp - (winWidth / 2));\n\n          for (let d = 0; d < depth; d++) {\n            let accum = 0;\n            // loop over dy\n\n            for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n              const dyR = dyRIndex + startDyR;\n              // Guard against the window exceeding the bounds of dy\n              if (dyR < 0 || dyR >= yHeight) {\n                continue;\n              }\n\n              const dyROffset = batchOffset + dyR * dy.strides[1];\n              const sourceFracRow = dyR * heightScale;\n              const sourceNearestRow = Math.min(\n                  xHeight - 1,\n                  alignCorners ? Math.round(sourceFracRow) :\n                                 Math.floor(sourceFracRow));\n              if (r !== sourceNearestRow) {\n                continue;\n              }\n              for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n                const dyC = dyCIndex + startDyC;\n                // Guard against the window exceeding the bounds of dy\n                if (dyC < 0 || dyC >= yWidth) {\n                  continue;\n                }\n\n                const dyCOffset = dyROffset + dyC * dy.strides[2];\n                const sourceFracCol = dyC * widthScale;\n                const sourceNearestCol = Math.min(\n                    xWidth - 1,\n                    alignCorners ? Math.round(sourceFracCol) :\n                                   Math.floor(sourceFracCol));\n\n                if (c === sourceNearestCol) {\n                  accum += dyValues[dyCOffset + d];\n                }\n              }\n            }\n            output[colOffset + d] = accum;\n          }\n        }\n      }\n    }\n    return tf.tensor4d(output, x.shape, x.dtype);\n  }\n\n  batchNorm(\n      x: Tensor4D, mean: Tensor4D|Tensor1D, variance: Tensor4D|Tensor1D,\n      offset?: Tensor4D|Tensor1D, scale?: Tensor4D|Tensor1D,\n      varianceEpsilon?: number): Tensor4D {\n    assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    const mVals = this.readSync(mean.dataId) as TypedArray;\n    const varVals = this.readSync(variance.dataId) as TypedArray;\n    const sVals = scale ? this.readSync(scale.dataId) as TypedArray :\n                          new Float32Array([1]);\n    const offVals = offset ? this.readSync(offset.dataId) as TypedArray :\n                             new Float32Array([0]);\n    const outVals = new Float32Array(xVals.length);\n\n    const offValsLength = offVals.length;\n    const sValsLength = sVals.length;\n    const varValsLength = varVals.length;\n    const mValsLength = mVals.length;\n\n    let offi = 0;\n    let mi = 0;\n    let si = 0;\n    let vi = 0;\n    for (let i = 0; i < xVals.length; ++i) {\n      outVals[i] = offVals[offi++] +\n          (xVals[i] - mVals[mi++]) * sVals[si++] /\n              Math.sqrt(varVals[vi++] + varianceEpsilon);\n      if (offi >= offValsLength) {\n        offi = 0;\n      }\n      if (mi >= mValsLength) {\n        mi = 0;\n      }\n      if (si >= sValsLength) {\n        si = 0;\n      }\n      if (vi >= varValsLength) {\n        vi = 0;\n      }\n    }\n    return tf.tensor4d(outVals, x.shape);\n  }\n\n  localResponseNormalization4D(\n      x: Tensor4D, depthRadius: number, bias: number, alpha: number,\n      beta: number): Tensor4D {\n    assertNotComplex(x, 'localResponseNormalization4D');\n\n    const channels = x.shape[3];\n    const maxD = channels - 1;\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const size = x.size;\n    const result = new Float32Array(size);\n\n    function sumAcrossChannels(offset: number) {\n      const currentChannel = offset % channels;\n      let beginSumOffset =\n          offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n      const endSumOffset = offset - currentChannel +\n          Math.min(currentChannel + depthRadius, maxD);\n\n      let sum = 0.0;\n      for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n        const z = xValues[beginSumOffset];\n        sum += z * z;\n      }\n      return sum;\n    }\n\n    for (let offset = 0; offset < size; offset++) {\n      const sum = sumAcrossChannels(offset);\n      const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n      result[offset] = val;\n    }\n\n    return tf.tensor4d(result, x.shape);\n  }\n\n  LRNGrad(\n      dy: Tensor4D, inputImage: Tensor4D, outputImage: Tensor4D,\n      depthRadius: number, bias: number, alpha: number,\n      beta: number): Tensor4D {\n    assertNotComplex(dy, 'LRNGrad');\n    const channels = dy.shape[3];\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    const inputImageValues = this.readSync(inputImage.dataId) as TypedArray;\n    const outputImageValues = this.readSync(outputImage.dataId) as TypedArray;\n    const result = new Float32Array(dy.size);\n    const size = dy.size;\n\n    for (let offset = 0; offset < size; offset++) {\n      const currentChannel = offset % channels;\n      const depthBegin =\n          (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n      const depthEnd = (offset - currentChannel) +\n          Math.min(channels, currentChannel + depthRadius + 1);\n\n      let norm = 0;\n      for (let k = depthBegin; k < depthEnd; k++) {\n        norm += Math.pow(inputImageValues[k], 2);\n      }\n      norm = alpha * norm + bias;\n\n      for (let k = depthBegin; k < depthEnd; k++) {\n        let dyi = -2 * alpha * beta * inputImageValues[k] *\n            outputImageValues[offset] / norm;\n        if (offset === k) {\n          dyi += Math.pow(norm, -beta);\n        }\n        dyi *= dyValues[offset];\n        result[k] += dyi;\n      }\n    }\n    return tf.tensor4d(result, dy.shape);\n  }\n\n  multinomial(\n      logits: Tensor2D, normalized: boolean, numSamples: number,\n      seed: number): Tensor2D {\n    assertNotComplex(logits, 'multinomial');\n\n    const probabilities = normalized ? logits : tf.softmax(logits);\n    const batchSize = probabilities.shape[0];\n    const numEvents = probabilities.shape[1];\n    const res = tf.zeros<Rank.R2>([batchSize, numSamples], 'int32');\n    const resVals = this.readSync(res.dataId) as TypedArray;\n    const probVals = this.readSync(probabilities.dataId) as TypedArray;\n\n    for (let b = 0; b < batchSize; ++b) {\n      const offset = b * numEvents;\n      // The cdf won't include the last event. It will be implicit if no other\n      // event happened.\n      const cdf = new Float32Array(numEvents - 1);\n      cdf[0] = probVals[offset];\n      for (let event = 1; event < cdf.length; ++event) {\n        cdf[event] = cdf[event - 1] + probVals[offset + event];\n      }\n\n      const random = seedrandom.alea(seed.toString());\n      const outOffset = b * numSamples;\n      for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n        const r = random();\n\n        // Assume last event happened by default.\n        resVals[outOffset + sampleId] = cdf.length;\n\n        for (let event = 0; event < cdf.length; event++) {\n          if (r < cdf[event]) {\n            resVals[outOffset + sampleId] = event;\n            break;\n          }\n        }\n      }\n    }\n    return res;\n  }\n\n  oneHot(indices: Tensor1D, depth: number, onValue: number, offValue: number):\n      Tensor2D {\n    assertNotComplex(indices, 'oneHot');\n\n    const res = new Float32Array(indices.size * depth);\n    res.fill(offValue);\n    const indicesVal = this.readSync(indices.dataId) as TypedArray;\n\n    for (let event = 0; event < indices.size; ++event) {\n      if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n        res[event * depth + indicesVal[event]] = onValue;\n      }\n    }\n    return tf.tensor2d(res, [indices.size, depth], 'int32');\n  }\n\n  nonMaxSuppression(\n      boxes: Tensor2D, scores: Tensor1D, maxOutputSize: number,\n      iouThreshold: number, scoreThreshold: number): Tensor1D {\n    assertNotComplex(boxes, 'nonMaxSuppression');\n\n    const boxesVals = this.readSync(boxes.dataId) as TypedArray;\n    const scoresVals = this.readSync(scores.dataId) as TypedArray;\n    return nonMaxSuppressionV3Impl(\n        boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n  }\n\n  fft(x: Tensor2D): Tensor2D {\n    return this.fftBatch(x, false);\n  }\n\n  ifft(x: Tensor2D): Tensor2D {\n    return this.fftBatch(x, true);\n  }\n\n  /**\n   * Calculate FFT of inner most elements of batch tensor.\n   */\n  private fftBatch(x: Tensor2D, inverse: boolean): Tensor2D {\n    const batch = x.shape[0];\n    const innerDim = x.shape[1];\n    // Collects real and imaginary values separately.\n    const realResult = tf.buffer(x.shape, 'float32');\n    const imagResult = tf.buffer(x.shape, 'float32');\n\n    const real = tf.real(x).as2D(batch, innerDim);\n    const imag = tf.imag(x).as2D(batch, innerDim);\n\n    for (let b = 0; b < batch; b++) {\n      // TODO: Support slice ops for complex type.\n      const r = real.slice([b, 0], [1, innerDim]);\n      const i = imag.slice([b, 0], [1, innerDim]);\n      const input = tf.complex(r, i);\n      // Run FFT by batch element.\n      const res =\n          this.readSync(this.fftImpl(input, inverse).dataId) as Float32Array;\n      for (let d = 0; d < innerDim; d++) {\n        const c = backend_util.getComplexWithIndex(res, d);\n        realResult.values[b * innerDim + d] = c.real;\n        imagResult.values[b * innerDim + d] = c.imag;\n      }\n    }\n\n    const t = tf.complex(realResult.toTensor(), imagResult.toTensor());\n    return t.as2D(batch, innerDim);\n  }\n\n  private fftImpl(x: Tensor2D, inverse: boolean): Tensor2D {\n    const x1D = x.as1D();\n\n    const n = x1D.size;\n\n    if (this.isExponentOf2(n)) {\n      let result = this.fftRadix2(x1D, n, inverse).as2D(x.shape[0], x.shape[1]);\n      if (inverse) {\n        result = tf.complex(\n                     tf.real(result).div(tf.scalar(n)),\n                     tf.imag(result).div(tf.scalar(n))) as Tensor2D;\n      }\n      return result;\n    } else {\n      const data = this.readSync(x.dataId) as TypedArray;\n      const rawOutput =\n          this.fourierTransformByMatmul(data, n, inverse) as Float32Array;\n      const output = backend_util.splitRealAndImagArrays(rawOutput);\n      return tf.complex(output.real, output.imag).as2D(x.shape[0], x.shape[1]);\n    }\n  }\n\n  private isExponentOf2(size: number): boolean {\n    return (size & size - 1) === 0;\n  }\n\n  // FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\n  private fftRadix2(input: Tensor1D, size: number, inverse: boolean): Tensor1D {\n    if (size === 1) {\n      return input;\n    }\n    const data = this.readSync(input.dataId) as TypedArray as Float32Array;\n    const half = size / 2;\n    const evenComplex = backend_util.complexWithEvenIndex(data);\n    let evenTensor = tf.complex(evenComplex.real, evenComplex.imag).as1D();\n    const oddComplex = backend_util.complexWithOddIndex(data);\n    let oddTensor = tf.complex(oddComplex.real, oddComplex.imag).as1D();\n\n    // Recursive call for half part of original input.\n    evenTensor = this.fftRadix2(evenTensor, half, inverse);\n    oddTensor = this.fftRadix2(oddTensor, half, inverse);\n\n    const e = backend_util.exponents(size, inverse);\n    const exponent = tf.complex(e.real, e.imag).mul(oddTensor);\n\n    const addPart = evenTensor.add(exponent);\n    const subPart = evenTensor.sub(exponent);\n\n    const realTensor = tf.real(addPart).concat(tf.real(subPart));\n    const imagTensor = tf.imag(addPart).concat(tf.imag(subPart));\n\n    return tf.complex(realTensor, imagTensor).as1D();\n  }\n\n  // Calculate fourier transform by multplying sinusoid matrix.\n  private fourierTransformByMatmul(\n      data: TypedArray, size: number, inverse: boolean): TypedArray {\n    const ret = new Float32Array(size * 2);\n    // TODO: Use matmul instead once it supports complex64 type.\n    for (let r = 0; r < size; r++) {\n      let real = 0.0;\n      let imag = 0.0;\n      for (let c = 0; c < size; c++) {\n        const e = backend_util.exponent(r * c, size, inverse);\n        const term = backend_util.getComplexWithIndex(data as Float32Array, c);\n        real += term.real * e.real - term.imag * e.imag;\n        imag += term.real * e.imag + term.imag * e.real;\n      }\n      if (inverse) {\n        real /= size;\n        imag /= size;\n      }\n      backend_util.assignToTypedArray(ret, real, imag, r);\n    }\n    return ret;\n  }\n\n  depthToSpace(x: Tensor4D, blockSize: number, dataFormat: 'NHWC'|'NCHW'):\n      Tensor4D {\n    util.assert(\n        dataFormat === 'NHWC',\n        () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${\n            dataFormat}`);\n    util.assert(\n        blockSize > 1,\n        () =>\n            `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n\n    const batchSize = x.shape[0];\n    const inputHeight = x.shape[1];\n    const inputWidth = x.shape[2];\n    const inputDepth = x.shape[3];\n\n    const outputHeight = inputHeight * blockSize;\n    const outputWidth = inputWidth * blockSize;\n    const outputDepth = inputDepth / (blockSize * blockSize);\n\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const result =\n        new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n\n    let outputIdx = 0;\n    for (let b = 0; b < batchSize; ++b) {\n      for (let h = 0; h < outputHeight; ++h) {\n        const inH = Math.floor(h / blockSize);\n        const offsetH = (h % blockSize);\n        for (let w = 0; w < outputWidth; ++w) {\n          const inW = Math.floor(w / blockSize);\n          const offsetW = (w % blockSize);\n          const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n          for (let d = 0; d < outputDepth; ++d) {\n            const inD = d + offsetD;\n            const inputIdx =\n                inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n            result[outputIdx++] = xValues[inputIdx];\n          }\n        }\n      }\n    }\n    return tf.tensor4d(\n        result, [batchSize, outputHeight, outputWidth, outputDepth]);\n  }\n\n  private broadcastedBinaryOp(\n      a: Tensor, b: Tensor, dtype: DataType,\n      op: (a: number, b: number) => number): Tensor {\n    const newShape = backend_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    const result = tf.buffer(newShape, dtype);\n    const aVals = this.readSync(a.dataId) as TypedArray;\n    const bVals = this.readSync(b.dataId) as TypedArray;\n    const aBroadcastDims = backend_util.getBroadcastDims(a.shape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(b.shape, newShape);\n\n    const resVals = result.values;\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resVals.length; ++i) {\n        resVals[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      const aBuf = this.bufferSync(a);\n      const bBuf = this.bufferSync(b);\n      for (let i = 0; i < resVals.length; ++i) {\n        const loc = result.indexToLoc(i);\n\n        const aLoc = loc.slice(-a.rank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = aBuf.locToIndex(aLoc);\n\n        const bLoc = loc.slice(-b.rank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = bBuf.locToIndex(bLoc);\n\n        resVals[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n    return result.toTensor();\n  }\n\n  private broadcastedBinaryComplexOp(\n      a: Tensor, b: Tensor,\n      op:\n          (aReal: number, aImag: number, bReal: number,\n           bImag: number) => {real: number, imag: number}): Tensor {\n    const newShape = backend_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    const realResult = tf.buffer(newShape, 'float32');\n    const imagResult = tf.buffer(newShape, 'float32');\n\n    const aVals = this.readSync(a.dataId) as TypedArray;\n    const bVals = this.readSync(b.dataId) as TypedArray;\n    const aBroadcastDims = backend_util.getBroadcastDims(a.shape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(b.shape, newShape);\n\n    const realVals = realResult.values;\n    const imagVals = imagResult.values;\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < realVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n\n        const result =\n            op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2],\n               bVals[bIdx * 2 + 1]);\n\n        realVals[i] = result.real;\n        imagVals[i] = result.imag;\n      }\n    } else {\n      const aRealBuf =\n          this.bufferSync(this.data.get(a.dataId).complexTensors.real);\n      const bRealBuf =\n          this.bufferSync(this.data.get(b.dataId).complexTensors.real);\n      for (let i = 0; i < realVals.length; i++) {\n        const loc = realResult.indexToLoc(i);\n\n        const aLoc = loc.slice(-a.rank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = aRealBuf.locToIndex(aLoc);\n\n        const bLoc = loc.slice(-b.rank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = bRealBuf.locToIndex(bLoc);\n\n        const opResult =\n            op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2],\n               bVals[bIndex * 2 + 1]);\n\n        realVals[i] = opResult.real;\n        imagVals[i] = opResult.imag;\n      }\n    }\n    return this.complex(realResult.toTensor(), imagResult.toTensor());\n  }\n\n  split<T extends Tensor>(x: T, sizeSplits: number[], axis: number): T[] {\n    return split(x, sizeSplits, axis);\n  }\n\n  dispose() {}\n\n  floatPrecision(): 16|32 {\n    return 32;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return super.epsilon();\n  }\n\n  cropAndResize(\n      images: Tensor4D,\n      boxes: Tensor2D,\n      boxIndex: Tensor1D,\n      cropSize: [number, number],\n      method: string,\n      extrapolationValue: number,\n  ) {\n    const [batch, imageHeight, imageWidth, numChannels] = images.shape;\n    const numBoxes = boxes.shape[0];\n\n    const [cropHeight, cropWidth] = cropSize;\n    const output =\n        tf.buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n\n    const boxVals = this.readSync(boxes.dataId) as TypedArray;\n    const boxIndVals = this.readSync(boxIndex.dataId) as TypedArray;\n    const imageVals = this.readSync(images.dataId) as TypedArray;\n\n    const inStride = images.strides;   // to calculate flat indexes into image\n    const outStride = output.strides;  // to calculate flat indexes into output\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n    for (let b = 0; b < numBoxes; b++) {\n      const startInd = b * 4;\n      const y1 = boxVals[startInd];\n      const x1 = boxVals[startInd + 1];\n      const y2 = boxVals[startInd + 2];\n      const x2 = boxVals[startInd + 3];\n\n      const bInd: number = boxIndVals[b];\n      if (bInd >= batch) {\n        continue;\n      }\n\n      const heightScale = (cropHeight > 1) ?\n          (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) :\n          0;\n      const widthScale =\n          (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n      for (let y = 0; y < cropHeight; y++) {\n        const yInd: number = (cropHeight > 1) ?\n            y1 * (imageHeight - 1) + y * (heightScale) :\n            0.5 * (y1 + y2) * (imageHeight - 1);\n\n        if (yInd < 0 || yInd > imageHeight - 1) {\n          for (let x = 0; x < cropWidth; x++) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n          }\n          continue;\n        }\n\n        if (method === 'bilinear') {\n          const topInd = Math.floor(yInd);\n          const bottomInd = Math.ceil(yInd);\n          const yLerp = yInd - topInd;\n\n          for (let x = 0; x < cropWidth; x++) {\n            const xInd = (cropWidth > 1) ?\n                x1 * (imageWidth - 1) + x * widthScale :\n                0.5 * (x1 + x2) * (imageWidth - 1);\n\n            if (xInd < 0 || xInd > imageWidth - 1) {\n              for (let c = 0; c < numChannels; c++) {\n                const ind =\n                    c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                output.values[ind] = extrapolationValue;\n              }\n              continue;\n            }\n\n            const leftInd = Math.floor(xInd);\n            const rightInd = Math.ceil(xInd);\n            const xLerp = xInd - leftInd;\n\n            for (let c = 0; c < numChannels; c++) {\n              let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                  bInd * inStride[0];\n              const topLeft = imageVals[ind];\n\n              ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                  bInd * inStride[0];\n              const topRight = imageVals[ind];\n\n              ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                  bInd * inStride[0];\n              const bottomLeft = imageVals[ind];\n\n              ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                  bInd * inStride[0];\n              const bottomRight = imageVals[ind];\n\n              const top = topLeft + (topRight - topLeft) * xLerp;\n              const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n\n              ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = top + ((bottom - top) * yLerp);\n            }\n          }\n        } else {  // method == \"nearest\"\n          for (let x = 0; x < cropWidth; ++x) {\n            const xInd = (cropWidth > 1) ?\n                x1 * (imageWidth - 1) + x * widthScale :\n                0.5 * (x1 + x2) * (imageWidth - 1);\n\n            if (xInd < 0 || xInd > imageWidth - 1) {\n              for (let c = 0; c < numChannels; c++) {\n                const ind =\n                    c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                output.values[ind] = extrapolationValue;\n              }\n              continue;\n            }\n\n            const closestX = Math.round(xInd);\n            const closestY = Math.round(yInd);\n            for (let c = 0; c < numChannels; c++) {\n              const inInd = c + closestX * inStride[2] +\n                  closestY * inStride[1] + bInd * inStride[0];\n              const outInd =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[outInd] = imageVals[inInd];\n            }\n          }\n        }\n      }\n    }\n    return output.toTensor() as Tensor4D;\n  }\n\n  sparseToDense<R extends Rank>(\n      sparseIndices: Tensor, sparseValues: Tensor, outputShape: ShapeMap[R],\n      defaultValue: Scalar): Tensor<R> {\n    const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n        backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n    const sumDupeIndices = false;\n    return this.scatter(\n        sparseIndices, sparseValues, outputShape, outputSize, sliceSize,\n        numUpdates, sliceRank, strides, defaultValue, sumDupeIndices);\n  }\n\n  gatherND(x: Tensor, indices: Tensor): Tensor {\n    const indicesShape = indices.shape;\n    const sliceRank = indicesShape[indicesShape.length - 1];\n\n    const [resultShape, numSlices, sliceSize, strides] =\n        backend_util.prepareAndValidate(x, indices);\n    if (numSlices === 0) {\n      return tf.tensor([], resultShape, x.dtype);\n    }\n\n    const buffer = new TensorBuffer([numSlices, sliceSize], x.dtype);\n    const indicesData = this.readSync(indices.dataId) as TypedArray;\n    const xData = this.readSync(x.dataId) as TypedArray;\n\n    for (let i = 0; i < numSlices; i++) {\n      const index = [];\n      let flattenIndex = 0;\n      for (let j = 0; j < sliceRank; j++) {\n        const dim = indicesData[i * sliceRank + j];\n        flattenIndex += dim * strides[j];\n        index.push(dim);\n      }\n      if (flattenIndex < 0 || flattenIndex >= x.size / sliceSize) {\n        throw new Error(\n            `Invalid indices: ${index} does not index into ${x.shape}`);\n      }\n\n      for (let k = 0; k < sliceSize; k++) {\n        buffer.values[i * sliceSize + k] = xData[flattenIndex * sliceSize + k];\n      }\n    }\n    return buffer.toTensor().reshape(resultShape);\n  }\n\n  scatterND<R extends Rank>(\n      indices: Tensor, updates: Tensor, shape: ShapeMap[R]): Tensor<R> {\n    const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n        backend_util.calculateShapes(updates, indices, shape);\n    const defaultValue = tf.scalar(0);\n    const sumDupeIndices = true;\n    return this.scatter(\n        indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank,\n        strides, defaultValue, sumDupeIndices);\n  }\n\n  fill<R extends Rank>(\n      shape: ShapeMap[R], value: number|string, dtype?: DataType): Tensor<R> {\n    dtype = dtype || util.inferDtype(value);\n    const values =\n        util.getArrayFromDType(dtype, util.sizeFromShape(shape)) as TypedArray;\n    values.fill(value as number);\n    return engine().makeTensor(values, shape, dtype, this) as Tensor<R>;\n  }\n\n  onesLike<R extends Rank>(x: Tensor<R>): Tensor<R> {\n    if (x.dtype === 'string') {\n      throw new Error('onesLike is not supported for string tensors');\n    } else {\n      return this.fill(x.shape, 1, x.dtype);\n    }\n  }\n\n  zerosLike<R extends Rank>(x: Tensor<R>): Tensor<R> {\n    const values = util.getArrayFromDType(\n                       x.dtype, util.sizeFromShape(x.shape)) as TypedArray;\n    return this.makeOutput(values, x.shape, x.dtype);\n  }\n\n  linspace(start: number, stop: number, num: number): Tensor1D {\n    return backend_util.linspaceImpl(start, stop, num);\n  }\n\n  private scatter<R extends Rank>(\n      indices: Tensor, updates: Tensor, shape: ShapeMap[R], outputSize: number,\n      sliceSize: number, numUpdates: number, sliceRank: number,\n      strides: number[], defaultValue: Scalar,\n      sumDupeIndices: boolean): Tensor<R> {\n    const flattenShape = [outputSize / sliceSize, sliceSize];\n\n    const indicesData = this.readSync(indices.dataId) as TypedArray;\n    const updatesData = this.readSync(updates.dataId) as TypedArray;\n\n    if (outputSize === 0) {\n      return tf.tensor([], shape, updates.dtype);\n    }\n\n    const buffer = new TensorBuffer(flattenShape, updates.dtype as 'float32');\n    buffer.values.fill((this.readSync(defaultValue.dataId) as TypedArray)[0]);\n\n    for (let i = 0; i < numUpdates; i++) {\n      const index = [];\n      let flattenIndex = 0;\n      for (let j = 0; j < sliceRank; j++) {\n        const dim = indicesData[i * sliceRank + j];\n        index.push(dim);\n        flattenIndex += dim * strides[j];\n      }\n\n      if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n        throw new Error(\n            `Invalid indices: ${index} does not index into ${shape}`);\n      }\n\n      for (let k = 0; k < sliceSize; k++) {\n        if (sumDupeIndices) {\n          buffer.values[flattenIndex * sliceSize + k] +=\n              updatesData[i * sliceSize + k];\n        } else {\n          buffer.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n              updatesData[0] :\n              updatesData[i * sliceSize + k];\n        }\n      }\n    }\n    return buffer.toTensor().reshape(shape);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value > max) {\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/*\n * base.ts contains all the exports from tfjs-backend-cpu\n * without auto-kernel registration\n */\nimport {registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from './backend_cpu';\nimport * as shared from './shared';\n\nexport {MathBackendCPU} from './backend_cpu';\nexport {version as version_cpu} from './version';\nexport {shared};\n\n// Side effects for default initialization of MathBackendCPU\nregisterBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, CosInputs, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as CosInputs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'cos');\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xSize = util.sizeFromShape(x.shape);\n    const newValues = new Float32Array(xSize);\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = Math.cos(values[i]);\n    }\n    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter} = inputs as Dilation2DInputs;\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xRank = x.shape.length;\n\n    const filterVals = cpuBackend.data.get(filter.dataId).values as TypedArray;\n    const filterRank = filter.shape.length;\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    const outSize = util.sizeFromShape(outShape);\n    const outRank = outShape.length;\n    const outputVals = util.getArrayFromDType(x.dtype, outSize);\n\n    // Upsampling the input by fill in `dilation size - 1` values between each\n    // input value.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const xIndex = util.locToIndex(\n                        [b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                    const filterIndex = util.locToIndex(\n                        [h, w, d], filterRank,\n                        util.computeStrides(filter.shape));\n                    const val = xVals[xIndex] + filterVals[filterIndex];\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n            const outputIndex = util.locToIndex(\n                [b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n\n    return {dataId, shape: outShape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropFilter, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dBackpropFilterConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropFilter}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed filter gradients has the same dimensions as the filter:\n    // [filterHeight, filterWidth, depth]\n    const gradients = util.makeZerosNestedTypedArray(\n                          filter.shape, filter.dtype) as number[][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hMax = 0;\n            let wMax = 0;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hMax = h;\n                      wMax = w;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);\n\n    return {dataId, shape: filter.shape, dtype: filter.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropInput, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dBackpropInputConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropInput}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed gradients has the same dimensions as the input:\n    // [batch, inputHeight, inputCols, inChannel]\n    const gradients =\n        util.makeZerosNestedTypedArray(x.shape, x.dtype) as number[][][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hInMax = (hBeg < 0) ? 0 : hBeg;\n            let wInMax = (wBeg < 0) ? 0 : wBeg;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hInMax = hIn;\n                      wInMax = wIn;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), x.shape, x.dtype);\n\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BinaryInputs, KernelConfig} from '@tensorflow/tfjs-core';\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {util} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function createBinaryKernelConfig(\n    name: string,\n    op: (\n        aShape: number[], bShape: number[], aVals: TypedArray,\n        bVals: TypedArray,\n        dtype: DataType) => [TypedArray, number[]]): KernelConfig {\n  return {\n    kernelName: name,\n    backendName: 'cpu',\n    kernelFunc: ({inputs, backend}) => {\n      const {a, b} = inputs as BinaryInputs;\n      const cpuBackend = backend as MathBackendCPU;\n      assertNotComplex([a, b], name);\n\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const [resultData, resultShape] =\n          op(a.shape, b.shape, aVals, bVals, a.dtype);\n\n      const dataId = cpuBackend.write(resultData, resultShape, a.dtype);\n      return {dataId, shape: resultShape, dtype: a.dtype};\n    }\n  };\n}\n\nexport function createBinaryKernelImpl(op: (a: number, b: number) => number) {\n  return (aShape: number[], bShape: number[], aVals: TypedArray,\n          bVals: TypedArray, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {createBinaryKernelImpl} from '../utils/kernel_utils';\n\nexport const divImpl = createBinaryKernelImpl((a: number, b: number) => a / b);\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Div} from '@tensorflow/tfjs-core';\nimport {createBinaryKernelConfig} from '../utils/kernel_utils';\nimport {divImpl} from './Div_impl';\n\nexport const divConfig = createBinaryKernelConfig(Div, divImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n\n            const coordX = Math.round(imageWidth - x);\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n\n            let outputValue = imageVals[outIdx];\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth) {\n              // set the output to the image value at the coordinate position.\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'cpu',\n  kernelFunc: identity as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Max, MaxAttrs, MaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig} from '@tensorflow/tfjs-core';\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl} from './Transpose_impl';\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxInputs;\n    const {reductionIndices, keepDims} = attrs as {} as MaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    let xShape = x.shape;\n    const xRank = xShape.length;\n\n    const origAxes = util.parseAxisParam(reductionIndices, xShape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    let xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n    if (permutedAxes != null) {\n      const newShape: number[] = new Array(xRank);\n      for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = xShape[permutedAxes[i]];\n      }\n\n      xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n\n      xShape = newShape;\n    }\n\n    assertNotComplex(x, 'max');\n    backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n    const [maxOutShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(xShape, axes);\n\n    const reduceSize = util.sizeFromShape(reduceShape);\n\n    const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n    const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n\n    let outShape = maxOutShape;\n    if (keepDims) {\n      // reshape\n      const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n      outShape = newShape;\n    }\n\n    return {dataId, shape: outShape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(\n        values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n\n    const pooledDataId =\n        cpuBackend.write(pooled as Float32Array, convInfo.outShape, x.dtype);\n    const indexesDataId =\n        cpuBackend.write(indexes as Int32Array, convInfo.outShape, x.dtype);\n    return [\n      {dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype},\n      {dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32'}\n    ];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {maxPoolPositions, pool} from '../utils/pool_utils';\nexport function maxPoolWithArgmaxImpl(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    includeBatchInIndex: boolean, convInfo: backend_util.Conv2DInfo) {\n  const strides = util.computeStrides(xShape);\n  const maxPools = pool(xValues, xShape, dtype, strides, convInfo, 'max');\n  const maxPositions = maxPoolPositions(\n      xValues, xShape, dtype, convInfo, true, includeBatchInIndex);\n\n  return [maxPools.values, maxPositions.values];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {kernel_impls} from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {boxes, scores} = inputs as NonMaxSuppressionV4Inputs;\n    const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n        attrs as unknown as NonMaxSuppressionV4Attrs;\n\n    const cpuBackend = backend as MathBackendCPU;\n\n    assertNotComplex(boxes, 'NonMaxSuppressionPadded');\n\n    const boxesVals = cpuBackend.data.get(boxes.dataId).values as TypedArray;\n    const scoresVals = cpuBackend.data.get(scores.dataId).values as TypedArray;\n\n    const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n        boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n        padToMaxOutputSize);\n\n    return [selectedIndices, validOutputs];\n  }\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {kernel_impls} from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {boxes, scores} = inputs as NonMaxSuppressionV5Inputs;\n    const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} =\n        attrs as unknown as NonMaxSuppressionV5Attrs;\n\n    const cpuBackend = backend as MathBackendCPU;\n\n    assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n\n    const boxesVals = cpuBackend.data.get(boxes.dataId).values as TypedArray;\n    const scoresVals = cpuBackend.data.get(scores.dataId).values as TypedArray;\n\n    const maxOutputSizeVal = maxOutputSize;\n    const iouThresholdVal = iouThreshold;\n    const scoreThresholdVal = scoreThreshold;\n    const softNmsSigmaVal = softNmsSigma;\n\n    const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n        boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n        scoreThresholdVal, softNmsSigmaVal);\n\n    return [selectedIndices, selectedScores];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function padV2(\n    args: {inputs: PadV2Inputs, backend: MathBackendCPU, attrs: PadV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, constantValue} = attrs;\n\n  assertNotComplex(x, 'pad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xSize = util.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (let i = 0; i < xSize; i++) {\n    const coords = util.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords.map((c, i) => c + start[i]);\n    const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n\n    resVals[outIndex] = xVals[i];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function reshape(\n    args:\n        {inputs: ReshapeInputs, backend: MathBackendCPU, attrs: ReshapeAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'cpu',\n  kernelFunc: reshape as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {backend_util, RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n            const y = coords[1];\n\n            // coordX/coordY are the result of rotating and translating x/y.\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n\n            let outputValue = fillValue;\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            }\n\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue as number;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n\n  assertNotComplex(x, 'transpose');\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n\n  const dataId = backend.write(result, newShape, x.dtype);\n  return {dataId, shape: newShape, dtype: x.dtype};\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'cpu',\n  kernelFunc: transpose as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {cosConfig} from './kernels/Cos';\nimport {dilation2dConfig} from './kernels/Dilation2D';\nimport {dilation2dBackpropFilterConfig} from './kernels/Dilation2DBackpropFilter';\nimport {dilation2dBackpropInputConfig} from './kernels/Dilation2DBackpropInput';\nimport {divConfig} from './kernels/Div';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {identityConfig} from './kernels/Identity';\nimport {maxConfig} from './kernels/Max';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {padV2Config} from './kernels/PadV2';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {transposeConfig} from './kernels/Transpose';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  cosConfig, dilation2dConfig, dilation2dBackpropInputConfig,\n  dilation2dBackpropFilterConfig, divConfig, flipLeftRightConfig,\n  identityConfig, maxPoolWithArgmaxConfig, maxConfig, nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config, padV2Config, reshapeConfig, rotateWithOffsetConfig,\n  spaceToBatchNDConfig, squareConfig, squaredDifferenceConfig, transposeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ReshapeAttrs, ReshapeInputs, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, TransposeAttrs, TransposeInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {padV2Config} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function spaceToBatchND(args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendCPU,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  assertNotComplex([x], 'spaceToBatchND');\n\n  const prod = util.sizeFromShape(blockShape);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...(paddings as Array<[number, number]>));\n\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedX = padV2Config.kernelFunc({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  }) as TensorInfo;\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapeInputs: ReshapeInputs = {x: paddedX};\n  const reshapeAttrs: ReshapeAttrs = {shape: reshapedPaddedShape};\n  const paddedXReshaped =\n      reshape({inputs: reshapeInputs, backend, attrs: reshapeAttrs});\n\n  const transposeInputs: TransposeInputs = {x: paddedXReshaped};\n  const transposeAttrs:\n      TransposeAttrs = {perm: permutedReshapedPaddedPermutation};\n  const paddedXT =\n      transpose({inputs: transposeInputs, backend, attrs: transposeAttrs});\n\n  const resultReshapeInputs: ReshapeInputs = {x: paddedXT};\n  const resultReshapeAttrs: ReshapeAttrs = {shape: flattenShape};\n  const result = reshape(\n      {inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs});\n\n  backend.disposeIntermediateTensorInfo(paddedX);\n  backend.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend.disposeIntermediateTensorInfo(paddedXT);\n\n  return result;\n}\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'cpu',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Square, SquareInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'square');\n\n    const values = cpuBackend.data.get(x.dataId).values as Float32Array;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = value * value;\n    }\n    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {SquaredDifference} from '@tensorflow/tfjs-core';\nimport {createBinaryKernelImpl} from '../utils/kernel_utils';\nimport {createBinaryKernelConfig} from '../utils/kernel_utils';\n\nconst squaredDifferenceImpl = createBinaryKernelImpl((aVal, bVal) => {\n  const diff = aVal - bVal;\n  return diff * diff;\n});\n\nexport const squaredDifferenceConfig =\n    createBinaryKernelConfig(SquaredDifference, squaredDifferenceImpl);\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '2.4.0';\nexport {version};\n"],"names":["assertNotComplex","tensor","opName","Array","isArray","forEach","t","util","assert","dtype","pool","xValues","xShape","strides","convInfo","poolType","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","left","initialValue","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","output","buffer","outShape","outputVals","values","outputBatchStrides","outputRowStrides","outputColStrides","b","batchSize","outputBatchOffset","inputBatchOffset","d","inChannels","yR","outHeight","xRCorner","xRMin","Math","max","xRMax","min","inHeight","outputRowOffset","yC","outWidth","xCCorner","xCMin","xCMax","inWidth","minMaxValue","avgValue","count","xR","xROffset","xC","pixel","isNaN","maxPoolPositions","flattenPositions","includeBatchInIndex","maxPositions","xBuf","maxValue","maxPosition","wR","wC","get","set","nonMaxSuppressionV3Impl","kernel_impls","split","tile","topkImpl","whereImpl","mapActivation","backend","x","activation","preluActivationWeights","linear","relu","elu","relu6","prelu","Error","_super","_this","data","DataStorage","engine","tslib_1.__extends","MathBackendCPU","shape","this","firstUse","env","backend_util","warn","dataId","refCount","has","numDataIds","readSync","_a","complexTensors","realValues","real","imagValues","imag","mergeRealAndImagArrays","decodedData","map","decodeString","tf.buffer","write","makeTensorFromDataId","dispose","delete","tensorInfo","tensorData","disposeData","f","start","now","kernelMs","unreliable","reasons","result","makeOutput","keep","clone","input","begin","size","slice_util","isSliceContinous","flatOffset","computeFlatOffset","length_1","sizeFromShape","vals","tf.tensor","subarray","bufferSync","i","xLoc","indexToLoc","idx","j","toTensor","end","computeOutShape","some","axis","loc","newLoc","length","xVals","num","rank","outIndex","fill","slice","res","reshape","outLoc","inLoc","ax","tensors","reals","tf.real","imags","tf.imag","tf.complex","concat","tensors2D","innerSize","as2D","offset_1","colOffset_1","tVals","tIdx","row","resIdx","col","finalOutShape","multiply","tf.scalar","a","broadcastedBinaryComplexOp","cast","aReal","aImag","bReal","bImag","broadcastedBinaryOp","upcastType","aValue","bValue","resultVals","currVals","logits","dim","axes","parseAxisParam","maxLogit","expandedShape","expandShapeToKeepDim","subtract","exp","sumExp","sum","tf.div","pow","transposeA","transposeB","sharedDim","leftDim","rightDim","batchDim","aValues","bValues","aBatch","aOuterStep","aInnerStep","_b","bInnerStep","bOuterStep","bBatch","resVals","blockSize","b_1","i0","j0","k0","iBlock","jBlock","kBlock","k","bias","batchMatMul","add","floor","assertAxesAreInnerMostDims","reduceShape","resultDtype","tf.zeros","reduceSize","aVals","offset","prod","segmentIds","numSegments","numIters","expandDims","segmentId","tf.equal","asType","mul","push","tf.stack","minIndex","value","max_1","maxIndex","exclusive","reverse","finalDim","indexAdjuster","prevIdx","aVal","bVal","newValues","Uint8Array","condition","index","condVals","sorted","rem","all","anyVal","diff","Float32Array","ceil","abs","Infinity","isFinite","base","expm1","log","log1p","sqrt","inVals","xValue","resultValues","v","dy","y","dyValues","scaleAlpha","SELU_SCALEALPHA","scale","SELU_SCALE","hypot","Int32Array","threshold","tooLarge","tooSmall","expX","sin","tan","asin","acos","atan","atan2","sinh","cosh","tanh","asinh","acosh","atanh","p","ERF_P","a1","ERF_A1","a2","ERF_A2","a3","ERF_A3","a4","ERF_A4","a5","ERF_A5","sign","alpha","NaN","filter","conv2d","filterHeight","filterWidth","isChannelsLast","dataFormat","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","wVals","yVals","xOffset1","yOffset1","yOffset2","wOffset1","xOffset2","yOffset3","xOffset3","wOffset3","d1","xVal","d2","outChannels","filterDepth","dilationDepth","padFront","front","yF","outDepth","xFCorner","strideDepth","wF","xF","inDepth","wOffset2","yOffset4","xOffset4","wOffset4","dx","inShape","dxValues","fltValues","fltS0","fltS1","fltS2","topPad","leftPad","yRMax","yCMax","dotProd","dyOffset","fltOffset","dxS0","dxS1","dxS2","dxS3","dyS0","dyS1","dyS2","dyS3","_c","fltS3","frontPad","xFMin","yFMax","dW","filterShape","dyBuf","yRMin","yCMin","dw","dwValues","dwS0","dwS1","dwS2","dwS3","xS0","xS1","xS2","xS3","yFMin","depthwiseConv2D","chMul","q","dm","trunc","reps","indices","newShape","indicesValues","originalLoc","originalIndex","locToIndex","blockShape","crops","reduce","reshaped","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","sliceSize","getSliceSize","tf.transpose","maxPosBuf","dxR","dxC","dyRCorner","dyCCorner","dyR","dyC","mask","avgMultiplier","effectiveFilterDepth","outputDepthStrides","batch","channel","yDepth","xDepthCorner","xDepthMin","xDepthMax","outputDepthOffset","yRow","xRowCorner","xRowMin","xRowMax","yCol","xColCorner","xColMin","xColMax","outputColOffset","xDepth","xDepthOffset","xRow","xRowOffset","xCol","pool3d","toFloat","dxDepth","dxRow","dxCol","dyDepthCorner","dyRowCorner","dyColCorner","wDepth","dyDepth","wRow","dyRow","wCol","dyCol","maxPool3dPositions","castTensor","newHeight","newWidth","alignCorners","oldHeight","oldWidth","numChannels","effectiveInputSize","effectiveOutputSize","outputIdx","effectiveRowSizeRatio","effectiveColSizeRatio","r","sourceFracRow","sourceRowFloor","rowFrac","sourceRowCeil","topRowOffset","botRowOffset","c","sourceFracCol","sourceColFloor","colFrac","sourceColCeil","topLeftOffest","botLeftOffset","topRightOffset","botRightOffest","topLeft","bottomLeft","top_1","newValue","xHeight","xWidth","depth","yHeight","yWidth","effectiveXSize","effectiveYSize","heightScale","widthScale","bOffset","topDxRIndex","bottomDxRIndex","topDxROffset","bottomDxROffset","dxRLerp","inverseDxRLerp","leftDxCIndex","rightDxCIndex","dxCLerp","inverseDxCLerp","topLeftRCOffset","topRightRCOffset","bottomLeftRCOffset","bottomRightRCOffset","inverseDxRLerpTimesInverseDxCLerp","inverseDxRLerpTimesDxCLerp","dxRLerpTimesInverseDxCLerp","dxRLerpTimesDxCLerp","dyVal","tf.tensor4d","outputOffset","batchOffset","rowOffset","round","colOffset","newVal","invHeightScale","invWidthScale","winHeight","winWidth","startRLerp","startDyR","startCLerp","startDyC","accum","dyRIndex","dyROffset","dyCIndex","dyCOffset","mean","variance","varianceEpsilon","mVals","varVals","sVals","offVals","outVals","offValsLength","sValsLength","varValsLength","mValsLength","offi","mi","si","vi","depthRadius","beta","channels","maxD","sumAcrossChannels","currentChannel","beginSumOffset","endSumOffset","z","val","inputImage","outputImage","inputImageValues","outputImageValues","depthBegin","depthEnd","norm","dyi","normalized","numSamples","seed","probabilities","tf.softmax","numEvents","probVals","cdf","event_1","random","seedrandom.alea","toString","outOffset","sampleId","event_2","onValue","offValue","indicesVal","event_3","tf.tensor2d","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","fftBatch","inverse","innerDim","realResult","imagResult","fftImpl","getComplexWithIndex","x1D","as1D","n","isExponentOf2","fftRadix2","div","rawOutput","fourierTransformByMatmul","splitRealAndImagArrays","half","evenComplex","complexWithEvenIndex","evenTensor","oddComplex","complexWithOddIndex","oddTensor","e","exponents","exponent","addPart","subPart","sub","realTensor","imagTensor","ret","term","assignToTypedArray","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","h","inH","offsetH","w","inW","offsetD","inputIdx","op","assertAndGetBroadcastShape","bVals","aBroadcastDims","getBroadcastDims","bBroadcastDims","aBuf","bBuf","aLoc","aIndex","bLoc","bIndex","realVals","imagVals","aIdx","bIdx","aRealBuf","bRealBuf","opResult","complex","sizeSplits","epsilon","images","boxIndex","cropSize","method","extrapolationValue","imageHeight","imageWidth","numBoxes","cropHeight","cropWidth","boxVals","boxIndVals","imageVals","inStride","outStride","startInd","y1","x1","y2","x2","bInd","yInd","ind","topInd","bottomInd","yLerp","xInd","leftInd","rightInd","xLerp","topRight","top_2","bottom","closestX","closestY","inInd","outInd","sparseIndices","sparseValues","outputShape","defaultValue","sliceRank","numUpdates","outputSize","scatter","indicesShape","resultShape","numSlices","TensorBuffer","indicesData","xData","flattenIndex","updates","inferDtype","getArrayFromDType","makeTensor","stop","linspaceImpl","sumDupeIndices","flattenShape","updatesData","KernelBackend","maxImpl","getTypedArrayFromDType","transposeImpl","perm","xRank","xSize","xStrides","computeStrides","newStrides","i_1","cosConfig","kernelName","Cos","backendName","kernelFunc","inputs","cpuBackend","cos","dilation2dConfig","Dilation2D","attrs","pad","dilations","filterVals","filterRank","_d","outSize","outRank","hOut","hBeg","wOut","wBeg","curVal","MIN_SAFE_INTEGER","hIn","wIn","xIndex","filterIndex","toTypedArray","dilation2dBackpropFilterConfig","Dilation2DBackpropFilter","$x","toNestedArray","$filter","$dy","gradients","makeZerosNestedTypedArray","hMax","wMax","dilation2dBackpropInputConfig","Dilation2DBackpropInput","hInMax","wInMax","createBinaryKernelConfig","name","resultData","createBinaryKernelImpl","aShape","bShape","resultRank","resultStrides","resultSize","aRank","bRank","aStrides","bStrides","divImpl","divConfig","Div","flipLeftRightConfig","FlipLeftRight","image","batchIdx","coordX","outIdx","outputValue","identityConfig","Identity","args","incRef","maxConfig","Max","reductionIndices","keepDims","origAxes","permutedAxes","getAxesPermutation","getInnerMostAxes","maxOutShape","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","filterSize","computePool2DInfo","maxPools","pooled","indexes","pooledDataId","indexesDataId","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","padV2Config","PadV2","paddings","constantValue","outCoords","reshapeConfig","Reshape","rotateWithOffsetConfig","RotateWithOffset","radians","fillValue","center","centerX","centerY","sinFactor","cosFactor","coords","coordY","transpose","transposeConfig","Transpose","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","paddedXReshaped","paddedXT","disposeIntermediateTensorInfo","squareConfig","Square","squaredDifferenceImpl","squaredDifferenceConfig","SquaredDifference","kernelConfigs_1","_i","kernelConfig","registerKernel"],"mappings":"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"}