{"version":3,"file":"tf-backend-cpu.js","sources":["../src/cpu_util.ts","../src/utils/pool_utils.ts","../src/backend_cpu.ts","../src/kernels/Max_impl.ts","../src/kernels/Transpose_impl.ts","../src/shared.ts","../src/version.ts","../src/base.ts","../src/kernels/Cos.ts","../src/kernels/Dilation2D.ts","../src/kernels/Dilation2DBackpropFilter.ts","../src/kernels/Dilation2DBackpropInput.ts","../src/utils/kernel_utils.ts","../src/kernels/Div_impl.ts","../src/kernels/Div.ts","../src/kernels/FlipLeftRight.ts","../src/kernels/Identity.ts","../src/kernels/Max.ts","../src/kernels/MaxPoolWithArgmax_impl.ts","../src/kernels/MaxPoolWithArgmax.ts","../src/kernels/NonMaxSuppressionV4.ts","../src/kernels/NonMaxSuppressionV5.ts","../src/kernels/PadV2.ts","../src/kernels/Reshape.ts","../src/kernels/RotateWithOffset.ts","../src/kernels/Transpose.ts","../src/kernels/SpaceToBatchND.ts","../src/kernels/Square.ts","../src/kernels/SquaredDifference.ts","../src/register_all_kernels.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${\n              opName} does not support complex64 tensors in the CPU backend.`);\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function pool(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv2DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides =\n      convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n  const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n  const outputColStrides = convInfo.outShape[3];\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const outputBatchOffset = b * outputBatchStrides;\n    const inputBatchOffset = b * strides[0];\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          const xCMin = Math.max(0, xCCorner);\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let minMaxValue = initialValue;\n          let avgValue = 0;\n          let count = 0;\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const xROffset = inputBatchOffset + xR * strides[1];\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const xCOffset = xROffset + xC * strides[2];\n              const pixel = xValues[xCOffset + d];\n              if ((poolType === 'max' && pixel > minMaxValue)) {\n                minMaxValue = pixel;\n              } else if (poolType === 'avg') {\n                avgValue += pixel;\n                count++;\n              }\n            }\n            if (isNaN(minMaxValue)) {\n              break;\n            }\n          }\n          const outputOffset = outputRowOffset + yC * outputColStrides + d;\n          outputVals[outputOffset] =\n              poolType === 'avg' ? avgValue / count : minMaxValue;\n        }\n      }\n    }\n  }\n  return output;\n}\n\nexport function maxPoolPositions(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    convInfo: backend_util.Conv2DInfo, flattenPositions = false,\n    includeBatchInIndex = false): TensorBuffer<Rank, 'int32'> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const xBuf = buffer(xShape, dtype, xValues);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        let xRMin = xRCorner;\n        while (xRMin < 0) {\n          xRMin += dilationHeight;\n        }\n        // const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          let xCMin = xCCorner;\n          while (xCMin < 0) {\n            xCMin += dilationWidth;\n          }\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let maxValue = Number.NEGATIVE_INFINITY;\n          let maxPosition = -1;\n\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const wR = xR - xRCorner;\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const wC = xC - xCCorner;\n              const pixel = xBuf.get(b, xR, xC, d);\n              if (pixel > maxValue) {\n                maxValue = pixel as number;\n                if (flattenPositions) {\n                  maxPosition = includeBatchInIndex ?\n                      ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) *\n                              convInfo.inChannels +\n                          d :\n                      (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                } else {\n                  maxPosition = wR * effectiveFilterWidth + wC;\n                }\n              }\n            }\n          }\n          maxPositions.set(maxPosition, b, yR, yC, d);\n        }\n      }\n    }\n  }\n  return maxPositions;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {backend_util, BackendTimingInfo, buffer, DataStorage, DataType, DataValues, engine, env, kernel_impls, KernelBackend, max, NumericDataType, Rank, Scalar, ShapeMap, slice_util, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, Tensor5D, TensorBuffer, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\nconst split = kernel_impls.split;\nconst tile = kernel_impls.tile;\nconst topkImpl = kernel_impls.topkImpl;\nconst whereImpl = kernel_impls.whereImpl;\nimport * as seedrandom from 'seedrandom';\nimport {assertNotComplex} from './cpu_util';\nimport {maxPoolPositions, pool} from './utils/pool_utils';\n\ninterface DataId {}\n\nfunction mapActivation(\n    backend: MathBackendCPU, x: Tensor, activation: backend_util.Activation,\n    preluActivationWeights?: Tensor): Tensor {\n  if (activation === 'linear') {\n    return backend.linear(x);\n  } else if (activation === 'relu') {\n    return backend.relu(x);\n  } else if (activation === 'elu') {\n    return backend.elu(x);\n  } else if (activation === 'relu6') {\n    return backend.relu6(x);\n  } else if (activation === 'prelu') {\n    return backend.prelu(x, preluActivationWeights);\n  }\n  throw new Error(\n      `Activation ${activation} has not been implemented for the CPU backend.`);\n}\n\nexport interface TensorData<D extends DataType> {\n  values?: backend_util.BackendValues;\n  dtype: D;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensors field.\n  // TODO(smilkov): Replace Tensor with TensorInfo when you modularize ops\n  // that work with complex tensors.\n  complexTensors?: {real: Tensor, imag: Tensor};\n  // refCount keeps track of how many tensors reference it. Used for memory\n  // management.\n  refCount: number;\n}\n\nexport class MathBackendCPU extends KernelBackend {\n  public blockSize = 48;\n\n  data: DataStorage<TensorData<DataType>>;\n  private firstUse = true;\n\n  constructor() {\n    super();\n    this.data = new DataStorage(this, engine());\n  }\n\n  write(values: backend_util.BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (this.firstUse) {\n      this.firstUse = false;\n      if (env().get('IS_NODE')) {\n        backend_util.warn(\n            '\\n============================\\n' +\n            'Hi there 👋. Looks like you are running TensorFlow.js in ' +\n            'Node.js. To speed things up dramatically, install our node ' +\n            'backend, which binds to TensorFlow C++, by running ' +\n            'npm i @tensorflow/tfjs-node, ' +\n            'or npm i @tensorflow/tfjs-node-gpu if you have CUDA. ' +\n            'Then call require(\\'@tensorflow/tfjs-node\\'); (-gpu ' +\n            'suffix for CUDA) at the start of your program. ' +\n            'Visit https://github.com/tensorflow/tfjs-node for more details.' +\n            '\\n============================');\n      }\n    }\n    const dataId = {};\n\n    this.data.set(dataId, {values, dtype, refCount: 1});\n\n    return dataId;\n  }\n\n  /** Increase refCount of a `TensorData`. */\n  incRef(dataId: DataId): void {\n    const tensorData = this.data.get(dataId);\n    tensorData.refCount++;\n  }\n\n  /** Decrease refCount of a `TensorData`. */\n  decRef(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      tensorData.refCount--;\n    }\n  }\n\n  move(\n      dataId: DataId, values: backend_util.BackendValues, shape: number[],\n      dtype: DataType): void {\n    this.data.set(dataId, {values, dtype, refCount: 1});\n  }\n\n  numDataIds(): number {\n    return this.data.numDataIds();\n  }\n\n  async read(dataId: DataId): Promise<backend_util.BackendValues> {\n    return this.readSync(dataId);\n  }\n  readSync(dataId: DataId): backend_util.BackendValues {\n    const {dtype, complexTensors} = this.data.get(dataId);\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensors.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensors.imag.dataId) as Float32Array;\n      return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    }\n    return this.data.get(dataId).values;\n  }\n\n  private bufferSync<R extends Rank>(t: Tensor<R>): TensorBuffer<R> {\n    const data = this.readSync(t.dataId);\n    let decodedData = data as DataValues;\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = (data as Uint8Array[]).map(d => util.decodeString(d));\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return tf.buffer(t.shape, t.dtype, decodedData) as TensorBuffer<R>;\n  }\n\n  private makeOutput<T extends Tensor>(\n      values: backend_util.BackendValues, shape: number[], dtype: DataType): T {\n    const dataId = this.write(values, shape, dtype);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this) as T;\n  }\n\n  disposeData(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const {complexTensors} = this.data.get(dataId);\n      if (complexTensors != null) {\n        complexTensors.real.dispose();\n        complexTensors.imag.dispose();\n      }\n      this.data.delete(dataId);\n    }\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    const dataId = tensorInfo.dataId;\n\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n\n      tensorData.refCount--;\n\n      if (tensorData.refCount < 1) {\n        this.disposeData(dataId);\n      }\n    }\n  }\n\n  async time(f: () => void): Promise<BackendTimingInfo> {\n    const start = util.now();\n    f();\n    const kernelMs = util.now() - start;\n    return {kernelMs};\n  }\n\n  memory() {\n    return {\n      // Unreliable due to automatic gc. The numbers above are cumulative.\n      unreliable: true,\n      reasons:\n          ['The reported memory is an upper bound. Due to automatic garbage ' +\n           'collection, the true allocated memory may be less.']\n    };\n  }\n\n  complex<T extends Tensor>(real: T, imag: T): T {\n    const result = this.makeOutput(null, real.shape, 'complex64');\n\n    const resultData = this.data.get(result.dataId);\n    // The backend owns the reference to the underlying real and imaginary\n    // clones. These will explicitly get disposed when the complex tensor is\n    // disposed.\n    resultData.complexTensors = {\n      real: engine().keep(real.clone()),\n      imag: engine().keep(imag.clone())\n    };\n\n    return result as T;\n  }\n  real<T extends Tensor>(input: T): T {\n    const resultData = this.data.get(input.dataId);\n    return resultData.complexTensors.real.clone() as T;\n  }\n  imag<T extends Tensor>(input: T): T {\n    const resultData = this.data.get(input.dataId);\n    return resultData.complexTensors.imag.clone() as T;\n  }\n\n  slice<T extends Tensor>(x: T, begin: number[], size: number[]): T {\n    assertNotComplex(x, 'slice');\n\n    const isContinous = slice_util.isSliceContinous(x.shape, begin, size);\n    if (isContinous) {\n      const flatOffset = slice_util.computeFlatOffset(begin, x.strides);\n      const length = util.sizeFromShape(size);\n      const vals = this.readSync(x.dataId) as TypedArray;\n      return tf.tensor(\n                 vals.subarray(flatOffset, flatOffset + length), size,\n                 x.dtype) as T;\n    }\n\n    const buffer = tf.buffer(size, x.dtype);\n    const xBuf = this.bufferSync(x);\n    for (let i = 0; i < buffer.size; ++i) {\n      const loc = buffer.indexToLoc(i);\n      const xLoc = loc.map((idx, j) => idx + begin[j]);\n      buffer.values[i] = xBuf.get(...xLoc);\n    }\n    return buffer.toTensor() as T;\n  }\n\n  stridedSlice<T extends Tensor>(\n      x: T, begin: number[], end: number[], strides: number[]): T {\n    assertNotComplex(x, 'stridedSlice');\n\n    const outShape = slice_util.computeOutShape(begin, end, strides);\n\n    if (outShape.some(axis => axis === 0)) {\n      return tf.tensor([], outShape) as T;\n    }\n\n    const buffer = tf.buffer(outShape, x.dtype);\n    const xBuf = this.bufferSync(x);\n    for (let i = 0; i < buffer.size; i++) {\n      const loc = buffer.indexToLoc(i);\n\n      const newLoc: number[] = new Array(loc.length);\n      for (let j = 0; j < newLoc.length; j++) {\n        newLoc[j] = loc[j] * strides[j] + begin[j];\n      }\n      buffer.set(xBuf.get(...newLoc), ...loc);\n    }\n\n    return buffer.toTensor() as T;\n  }\n\n  diag(x: Tensor): Tensor {\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    const buffer = tf.buffer([x.size, x.size], x.dtype);\n    const vals = buffer.values;\n    for (let i = 0; i < xVals.length; i++) {\n      vals[i * x.size + i] = xVals[i];\n    }\n    return buffer.toTensor();\n  }\n\n  unstack(x: Tensor, axis: number): Tensor[] {\n    const num = x.shape[axis];\n    const outShape: number[] = new Array(x.rank - 1);\n    let outIndex = 0;\n    for (let i = 0; i < x.rank; i++) {\n      if (i !== axis) {\n        outShape[outIndex++] = x.shape[i];\n      }\n    }\n\n    const begin = new Array(x.rank).fill(0);\n    const size = x.shape.slice();\n    size[axis] = 1;\n    const res = new Array(num);\n    for (let i = 0; i < res.length; i++) {\n      begin[axis] = i;\n      res[i] = this.slice(x, begin, size).reshape(outShape);\n    }\n    return res;\n  }\n\n  reverse<T extends Tensor>(x: T, axis: number[]): T {\n    assertNotComplex(x, 'reverse');\n\n    const buffer = tf.buffer(x.shape, x.dtype);\n    const xBuf = this.bufferSync(x);\n\n    for (let i = 0; i < buffer.size; i++) {\n      const outLoc = buffer.indexToLoc(i);\n      const inLoc = outLoc.slice();\n      axis.forEach(ax => inLoc[ax] = x.shape[ax] - 1 - inLoc[ax]);\n      buffer.set(xBuf.get(...inLoc), ...outLoc);\n    }\n\n    return buffer.toTensor() as T;\n  }\n\n  concat(tensors: Tensor[], axis: number): Tensor {\n    if (tensors[0].dtype === 'complex64') {\n      const reals = tensors.map((t) => tf.real(t));\n      const imags = tensors.map((t) => tf.imag(t));\n      return tf.complex(this.concat(reals, axis), this.concat(imags, axis));\n    }\n    const tensors2D = tensors.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      return t.as2D(-1, innerSize);\n    });\n    const outShape =\n      backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis\n        */);\n    const values =\n        tf.buffer(outShape as [number, number], tensors[0].dtype as 'float32')\n            .values;\n    if (tensors2D[0].shape[0] === 1) {\n      // Use built-in TypedArray.set() method for speed.\n      let offset = 0;\n      tensors2D.forEach(t => {\n        values.set(this.readSync(t.dataId) as TypedArray, offset);\n        offset += t.size;\n      });\n    } else {\n      let colOffset = 0;\n      tensors2D.forEach(t => {\n        const tVals = this.readSync(t.dataId) as TypedArray;\n        let tIdx = 0;\n        for (let row = 0; row < t.shape[0]; ++row) {\n          const resIdx = row * outShape[1] + colOffset;\n          for (let col = 0; col < t.shape[1]; ++col) {\n            values[resIdx + col] = tVals[tIdx++];\n          }\n        }\n        colOffset += t.shape[1];\n      });\n    }\n    const finalOutShape =\n        backend_util.computeOutShape(tensors.map(t => t.shape), axis);\n    return tf.tensor(values, finalOutShape, tensors[0].dtype);\n  }\n\n  neg<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'neg');\n\n    return this.multiply(tf.scalar(-1), x) as T;\n  }\n\n  add(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      return this.broadcastedBinaryComplexOp(\n          a.cast('complex64'), b.cast('complex64'),\n          (aReal, aImag, bReal, bImag) => {\n            return {real: aReal + bReal, imag: aImag + bImag};\n          });\n    }\n\n    return this.broadcastedBinaryOp(\n        a, b, upcastType(a.dtype, b.dtype),\n        (aValue, bValue) => aValue + bValue);\n  }\n\n  addN<T extends Tensor>(tensors: T[]): T {\n    assertNotComplex(tensors, 'addN');\n\n    const vals = tensors.map(t => this.readSync(t.dataId) as TypedArray);\n    const result = tf.buffer(tensors[0].shape, tensors[0].dtype as 'float32');\n    const resultVals = result.values;\n    for (let i = 0; i < tensors.length; i++) {\n      const currVals = vals[i];\n      for (let j = 0; j < resultVals.length; j++) {\n        resultVals[j] += currVals[j];\n      }\n    }\n    return result.toTensor() as T;\n  }\n\n  softmax<T extends Tensor>(logits: T, dim: number): T {\n    const axes = util.parseAxisParam([dim], logits.shape);\n    // TODO(annxingyuan): Call maxImpl rather than op as part of softmax kernel\n    // modularization.\n    const maxLogit = max(logits, axes);\n    const expandedShape =\n        backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n    const a = this.subtract(logits, maxLogit.reshape(expandedShape));\n    const b = this.exp(a);\n    const sumExp = this.sum(b, axes).reshape(expandedShape);\n\n    // TODO(annxingyuan): Call divImpl rather than op as part of softmax\n    // kernel modularization.\n    return tf.div(b, sumExp);\n  }\n\n  subtract(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      return this.broadcastedBinaryComplexOp(\n          a.cast('complex64'), b.cast('complex64'),\n          (aReal, aImag, bReal, bImag) => {\n            return {real: aReal - bReal, imag: aImag - bImag};\n          });\n    }\n\n    return this.broadcastedBinaryOp(\n        a, b, upcastType(a.dtype, b.dtype),\n        (aValue, bValue) => aValue - bValue);\n  }\n\n  pow<T extends Tensor>(a: T, b: Tensor): T {\n    assertNotComplex([a, b], 'pow');\n\n    return this.broadcastedBinaryOp(\n               a, b, a.dtype, (aValue, bValue) => Math.pow(aValue, bValue)) as\n        T;\n  }\n\n  batchMatMul(\n      a: Tensor3D, b: Tensor3D, transposeA: boolean,\n      transposeB: boolean): Tensor3D {\n    assertNotComplex([a, b], 'matMul');\n\n    const sharedDim = transposeA ? a.shape[1] : a.shape[2];\n    const leftDim = transposeA ? a.shape[2] : a.shape[1];\n    const rightDim = transposeB ? b.shape[1] : b.shape[2];\n    const batchDim = a.shape[0];\n\n    const aValues = this.readSync(a.dataId) as TypedArray;\n    const bValues = this.readSync(b.dataId) as TypedArray;\n    const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n        [a.strides[0], 1, a.strides[1]] :\n        [a.strides[0], a.strides[1], 1];\n    const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n        [1, b.strides[1], b.strides[0]] :\n        [b.strides[1], 1, b.strides[0]];\n\n    const size = leftDim * rightDim;\n    const result = tf.buffer([batchDim, leftDim, rightDim], a.dtype);\n    const resVals = result.values as TypedArray;\n    const blockSize = this.blockSize;\n\n    for (let b = 0; b < batchDim; b++) {\n      for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n        for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n          for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n            // for when blockSize doesn't evenly divide the input\n            const iBlock = Math.min(i0 + blockSize, leftDim);\n            const jBlock = Math.min(j0 + blockSize, rightDim);\n            const kBlock = Math.min(k0 + blockSize, sharedDim);\n\n            for (let i = i0; i < iBlock; i++) {\n              for (let j = j0; j < jBlock; j++) {\n                let sum = 0.0;\n\n                for (let k = k0; k < kBlock; k++) {\n                  sum += aValues[b * aBatch + i * aOuterStep + k * aInnerStep] *\n                      bValues[k * bInnerStep + j * bOuterStep + b * bBatch];\n                }\n                resVals[b * size + (i * rightDim + j)] += sum;\n              }\n            }\n          }\n        }\n      }\n    }\n    return result.toTensor() as Tensor3D;\n  }\n\n  fusedBatchMatMul(\n      {a, b, transposeA, transposeB, bias, activation, preluActivationWeights}:\n          backend_util.FusedBatchMatMulConfig): Tensor3D {\n    let result = this.batchMatMul(a, b, transposeA, transposeB);\n    if (bias) {\n      result = this.add(result, bias) as Tensor3D;\n    }\n    if (activation) {\n      result =\n          mapActivation(this, result, activation, preluActivationWeights) as\n          Tensor3D;\n    }\n\n    return result;\n  }\n\n  multiply(a: Tensor, b: Tensor): Tensor {\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      return this.broadcastedBinaryComplexOp(\n          a.cast('complex64'), b.cast('complex64'),\n          (aReal, aImag, bReal, bImag) => {\n            return {\n              real: aReal * bReal - aImag * bImag,\n              imag: aReal * bImag + aImag * bReal\n            };\n          });\n    }\n\n    return this.broadcastedBinaryOp(\n        a, b, upcastType(a.dtype, b.dtype),\n        (aValue, bValue) => aValue * bValue);\n  }\n\n  floorDiv(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'floorDiv');\n\n    const op = (a: number, b: number) => Math.floor(a / b);\n    const outputDtype = 'int32';\n    return this.broadcastedBinaryOp(a, b, outputDtype, op);\n  }\n\n  sum(x: Tensor, axes: number[]): Tensor {\n    assertNotComplex(x, 'sum');\n\n    backend_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const resultDtype = upcastType(x.dtype, 'int32');\n    const result = tf.zeros(outShape, resultDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let sum = 0;\n      for (let j = 0; j < reduceSize; ++j) {\n        sum += aVals[offset + j];\n      }\n      vals[i] = sum;\n    }\n    return result;\n  }\n\n  prod(x: Tensor, axes: number[]): Tensor {\n    assertNotComplex(x, 'sum');\n\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const resultDtype = upcastType(x.dtype, 'int32');\n    const result = tf.zeros(outShape, resultDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let prod = 1;\n      for (let j = 0; j < reduceSize; ++j) {\n        prod *= aVals[offset + j];\n      }\n      vals[i] = prod;\n    }\n    return result;\n  }\n\n  unsortedSegmentSum<T extends Tensor>(\n      x: T, segmentIds: Tensor1D, numSegments: number): Tensor {\n    assertNotComplex(x, 'unsortedSegmentSum');\n\n    const res = [];\n\n    // Reshape the segment id's so that they can be broadcast with\n    // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n    const numIters = x.rank - segmentIds.rank;\n    for (let i = 0; i < numIters; ++i) {\n      segmentIds = segmentIds.expandDims(i + 1);\n    }\n\n    for (let i = 0; i < numSegments; ++i) {\n      const segmentId = tf.scalar(i, 'int32');\n      const mask = tf.equal(segmentId, segmentIds).asType('float32');\n      const sum = mask.mul(x).sum(0);\n      res.push(sum);\n    }\n\n    return tf.stack(res);\n  }\n\n  argMin(x: Tensor, axis: number): Tensor {\n    assertNotComplex(x, 'argMin');\n\n    const axes = [axis];\n    backend_util.assertAxesAreInnerMostDims('argMin', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = tf.zeros(outShape, 'int32');\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let min = aVals[offset];\n      let minIndex = 0;\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        if (value < min) {\n          min = value;\n          minIndex = j;\n        }\n      }\n      vals[i] = minIndex;\n    }\n    return result;\n  }\n\n  argMax(x: Tensor, axis: number): Tensor {\n    assertNotComplex(x, 'argMax');\n\n    const axes = [axis];\n    backend_util.assertAxesAreInnerMostDims('argMax', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = tf.zeros(outShape, 'int32');\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let max = aVals[offset];\n      let maxIndex = 0;\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        if (value > max) {\n          max = value;\n          maxIndex = j;\n        }\n      }\n      vals[i] = maxIndex;\n    }\n    return result;\n  }\n\n  cumsum(x: Tensor, axis: number, exclusive: boolean, reverse: boolean):\n      Tensor {\n    assertNotComplex(x, 'cumsum');\n\n    if (axis !== x.rank - 1) {\n      throw new Error(\n          `backend.cumsum in CPU expects an inner-most axis=${x.rank - 1} ` +\n          `but got axis=${axis}`);\n    }\n    const resultDtype = upcastType(x.dtype, 'int32');\n    const result = tf.zeros(x.shape, resultDtype);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    const finalDim = x.shape[x.rank - 1];\n    const indexAdjuster = reverse ?\n        (i: number, j: number) => i + finalDim - j - 1 :\n        (i: number, j: number) => i + j;\n    for (let i = 0; i < aVals.length; i += finalDim) {\n      for (let j = 0; j < finalDim; j++) {\n        const idx = indexAdjuster(i, j);\n        if (j === 0) {\n          vals[idx] = exclusive ? 0 : aVals[idx];\n        } else {\n          const prevIdx = indexAdjuster(i, j - 1);\n          vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                                  aVals[idx] + vals[prevIdx];\n        }\n      }\n    }\n    return result;\n  }\n\n  equal(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'equal');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal === bVal) ? 1 : 0;\n    });\n  }\n\n  notEqual(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'notEqual');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal !== bVal) ? 1 : 0;\n    });\n  }\n\n  less(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'less');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal < bVal) ? 1 : 0;\n    });\n  }\n\n  lessEqual(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'lessEqual');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal <= bVal) ? 1 : 0;\n    });\n  }\n\n  greater(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'greater');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal > bVal) ? 1 : 0;\n    });\n  }\n\n  greaterEqual(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'greaterEqual');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return (aVal >= bVal) ? 1 : 0;\n    });\n  }\n\n  logicalNot<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'logicalNot');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Uint8Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = values[i] ? 0 : 1;\n    }\n    return this.makeOutput(newValues, x.shape, 'bool');\n  }\n\n  logicalAnd(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'logicalAnd');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return aVal && bVal;\n    });\n  }\n\n  logicalOr(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'logicalOr');\n\n    return this.broadcastedBinaryOp(a, b, 'bool', (aVal, bVal) => {\n      return aVal || bVal;\n    });\n  }\n\n  select(condition: Tensor, a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([condition, a, b], 'select');\n\n    const values = this.readSync(condition.dataId) as TypedArray;\n    const aValues = this.readSync(a.dataId) as TypedArray;\n    const bValues = this.readSync(b.dataId) as TypedArray;\n    const result = tf.zeros(a.shape, upcastType(a.dtype, b.dtype));\n    const newValues = this.readSync(result.dataId) as TypedArray;\n    let index = 0;\n    const offset = condition.rank === 0 || condition.rank > 1 || a.rank === 1 ?\n        1 :\n        util.sizeFromShape(a.shape.slice(1));\n\n    for (let i = 0; i < values.length; i++) {\n      for (let j = 0; j < offset; j++) {\n        if (values[i] === 1) {\n          newValues[index++] = aValues[i];\n        } else {\n          newValues[index++] = bValues[i];\n        }\n      }\n    }\n\n    return result;\n  }\n\n  where(condition: Tensor): Tensor2D {\n    assertNotComplex([condition], 'where');\n\n    const condVals = this.readSync(condition.dataId) as TypedArray;\n    return whereImpl(condition.shape, condVals);\n  }\n\n  topk<T extends Tensor>(x: T, k: number, sorted: boolean): [T, T] {\n    assertNotComplex(x, 'topk');\n\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    return topkImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n  }\n\n  min(x: Tensor, axes: number[]): Tensor {\n    assertNotComplex(x, 'min');\n\n    backend_util.assertAxesAreInnerMostDims('min', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = tf.zeros(outShape, x.dtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let min = aVals[offset];\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        if (value < min) {\n          min = value;\n        }\n      }\n      vals[i] = min;\n    }\n    return result;\n  }\n\n  minimum(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'minimum');\n\n    return this.broadcastedBinaryOp(\n        a, b, a.dtype, (aVal, bVal) => Math.min(aVal, bVal));\n  }\n\n  mod(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'mod');\n\n    return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => {\n      const rem = aVal % bVal;\n      if ((aVal < 0 && bVal < 0) || (aVal >= 0 && bVal >= 0)) {\n        return rem;\n      } else {\n        return (rem + bVal) % bVal;\n      }\n    });\n  }\n\n  maximum(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'maximum');\n\n    return this.broadcastedBinaryOp(\n        a, b, a.dtype, (aVal, bVal) => Math.max(aVal, bVal));\n  }\n\n  all(x: Tensor, axes: number[]): Tensor {\n    assertNotComplex(x, 'all');\n\n    backend_util.assertAxesAreInnerMostDims('all', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = tf.zeros(outShape, x.dtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let all = aVals[offset];\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        all = all && value;\n      }\n      vals[i] = all;\n    }\n    return result;\n  }\n\n  any(x: Tensor, axes: number[]): Tensor {\n    assertNotComplex(x, 'any');\n\n    backend_util.assertAxesAreInnerMostDims('any', axes, x.rank);\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const result = tf.zeros(outShape, x.dtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = this.readSync(result.dataId) as TypedArray;\n\n    const aVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < vals.length; ++i) {\n      const offset = i * reduceSize;\n      let anyVal = aVals[offset];\n      for (let j = 0; j < reduceSize; ++j) {\n        const value = aVals[offset + j];\n        anyVal = anyVal || value;\n      }\n      vals[i] = anyVal;\n    }\n    return result;\n  }\n\n  squaredDifference(a: Tensor, b: Tensor): Tensor {\n    assertNotComplex([a, b], 'squaredDifference');\n\n    return this.broadcastedBinaryOp(a, b, a.dtype, (aVal, bVal) => {\n      const diff = aVal - bVal;\n      return diff * diff;\n    });\n  }\n\n  ceil<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'ceil');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = Math.ceil(values[i]);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  floor<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'floor');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = Math.floor(values[i]);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  sign<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'x');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      if (values[i] < 0) {\n        newValues[i] = -1;\n      } else if (values[i] > 0) {\n        newValues[i] = 1;\n      } else {\n        newValues[i] = 0;\n      }\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  isNaN<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'x');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Uint8Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      if (Number.isNaN(values[i])) {\n        newValues[i] = 1;\n      }\n    }\n    return this.makeOutput(newValues, x.shape, 'bool');\n  }\n\n  isInf<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'x');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Uint8Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      if (Math.abs(values[i]) === Infinity) {\n        newValues[i] = 1;\n      }\n    }\n    return this.makeOutput(newValues, x.shape, 'bool');\n  }\n\n  isFinite<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'x');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Uint8Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      if (Number.isFinite(values[i])) {\n        newValues[i] = 1;\n      }\n    }\n    return this.makeOutput(newValues, x.shape, 'bool');\n  }\n\n  round<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'round');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      // The algorithm is based on banker's rounding.\n      const base = Math.floor(values[i]);\n      if (values[i] - base < 0.5) {\n        newValues[i] = Math.floor(values[i]);\n      } else if (values[i] - base > 0.5) {\n        newValues[i] = Math.ceil(values[i]);\n      } else {\n        if (base % 2.0 === 0.0) {\n          newValues[i] = base;\n        } else {\n          newValues[i] = base + 1.0;\n        }\n      }\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  exp<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'exp');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = Math.exp(values[i]);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  expm1<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'expm1');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = Math.expm1(values[i]);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  log<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'log');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = Math.log(value);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  log1p<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'log1p');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = Math.log1p(value);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  sqrt<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'sqrt');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = Math.sqrt(value);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  rsqrt<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'rsqrt');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = 1 / Math.sqrt(value);\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  reciprocal<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'reciprocal');\n\n    const values = this.readSync(x.dataId) as TypedArray;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = 1 / values[i];\n    }\n    return this.makeOutput(newValues, x.shape, 'float32');\n  }\n\n  linear<T extends Tensor>(x: T): T {\n    return x;\n  }\n\n  relu<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'relu');\n\n    const res = tf.zeros(x.shape, x.dtype);\n    const resVals = this.readSync(res.dataId) as TypedArray;\n    const inVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < inVals.length; ++i) {\n      resVals[i] = Math.max(0, inVals[i]);\n    }\n    return res as T;\n  }\n\n  relu6<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'relu');\n\n    const res = tf.zeros(x.shape, x.dtype);\n    const resVals = this.readSync(res.dataId) as TypedArray;\n    const inVals = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < inVals.length; ++i) {\n      resVals[i] = Math.min(Math.max(0, inVals[i]), 6);\n    }\n    return res as T;\n  }\n\n  prelu<T extends Tensor>(x: T, a: T): T {\n    assertNotComplex([x, a], 'prelu');\n\n    return this.broadcastedBinaryOp(\n               x, a, x.dtype,\n               (xValue, aValue) => xValue < 0 ? aValue * xValue : xValue) as T;\n  }\n\n  elu<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'elu');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      const v = values[i];\n      if (v >= 0) {\n        resultValues[i] = v;\n      } else {\n        resultValues[i] = (Math.exp(v) - 1);\n      }\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  eluDer<T extends Tensor>(dy: T, y: T): T {\n    assertNotComplex([dy, y], 'eluDer');\n\n    const resultValues = new Float32Array(y.size);\n    const values = this.readSync(y.dataId) as TypedArray;\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      const v = values[i];\n      if (v >= 1) {\n        resultValues[i] = dyValues[i];\n      } else {\n        resultValues[i] = dyValues[i] * (v + 1);\n      }\n    }\n    return this.makeOutput(resultValues, y.shape, 'float32');\n  }\n\n  selu<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'selu');\n\n    // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n    // see: https://arxiv.org/abs/1706.02515\n    const scaleAlpha = backend_util.SELU_SCALEALPHA;\n    const scale = backend_util.SELU_SCALE;\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      const v = values[i];\n      if (v >= 0) {\n        resultValues[i] = scale * v;\n      } else {\n        resultValues[i] = scaleAlpha * (Math.exp(v) - 1);\n      }\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  clip<T extends Tensor>(x: T, min: number, max: number): T {\n    assertNotComplex(x, 'clip');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      const v = values[i];\n      resultValues[i] = v > max ? max : (v < min ? min : v);\n    }\n    return this.makeOutput(resultValues, x.shape, x.dtype);\n  }\n\n  abs<T extends Tensor>(x: T): T {\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.abs(values[i]);\n    }\n\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  complexAbs<T extends Tensor>(x: T): T {\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n\n    for (let i = 0; i < x.size; ++i) {\n      const real = values[i * 2];\n      const imag = values[i * 2 + 1];\n      resultValues[i] = Math.hypot(real, imag);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  int<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'int');\n\n    const resultValues = new Int32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = values[i];\n    }\n    return this.makeOutput(resultValues, x.shape, 'int32');\n  }\n\n  sigmoid<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'sigmoid');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = 1 / (1 + Math.exp(-values[i]));\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  softplus<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'softplus');\n\n    // mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n\n    // epsilon is the difference between 1.0 and the next representable float.\n    // For a single precision 32 bit float this should be 2^-23, see:\n    // https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\n    const epsilon = 1.1920928955078125e-7;\n    const threshold = Math.log(epsilon) + 2.0;\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n\n    for (let i = 0; i < values.length; ++i) {\n      // Value above which exp(x) may overflow, but softplus(x) == x\n      // is within machine epsilon.\n      const tooLarge = values[i] > -threshold;\n\n      // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n      // is within machine epsilon.\n      const tooSmall = values[i] < threshold;\n\n      const expX = Math.exp(values[i]);\n      let result;\n\n      if (tooSmall) {\n        result = expX;\n      } else if (tooLarge) {\n        result = values[i];\n      } else {\n        result = Math.log(1.0 + expX);\n      }\n      resultValues[i] = result;\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  sin<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'sin');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.sin(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  tan<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'tan');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.tan(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  asin<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'asin');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.asin(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  acos<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'acos');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.acos(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  atan<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'atan');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.atan(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  atan2<T extends Tensor>(a: T, b: T): T {\n    assertNotComplex([a, b], 'atan2');\n\n    return this.broadcastedBinaryOp(\n               a, b, a.dtype, (aValue, bValue) => Math.atan2(aValue, bValue)) as\n        T;\n  }\n\n  sinh<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'sinh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.sinh(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  cosh<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'cosh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.cosh(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  tanh<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'tanh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = util.tanh(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  asinh<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'asinh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.asinh(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  acosh<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'acosh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.acosh(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  atanh<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'atanh');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      resultValues[i] = Math.atanh(values[i]);\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  erf<T extends Tensor>(x: T): T {\n    assertNotComplex(x, 'erf');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    const p = backend_util.ERF_P;\n    const a1 = backend_util.ERF_A1;\n    const a2 = backend_util.ERF_A2;\n    const a3 = backend_util.ERF_A3;\n    const a4 = backend_util.ERF_A4;\n    const a5 = backend_util.ERF_A5;\n    for (let i = 0; i < values.length; ++i) {\n      const sign = Math.sign(values[i]);\n      const v = Math.abs(values[i]);\n      const t = 1.0 / (1.0 + p * v);\n      resultValues[i] = sign *\n          (1.0 -\n           (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n               Math.exp(-v * v));\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  step<T extends Tensor>(x: T, alpha = 0): T {\n    assertNotComplex(x, 'step');\n\n    const resultValues = new Float32Array(x.size);\n    const values = this.readSync(x.dataId) as TypedArray;\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      if (isNaN(value)) {\n        resultValues[i] = NaN;\n      } else {\n        resultValues[i] = value > 0 ? 1 : alpha;\n      }\n    }\n    return this.makeOutput(resultValues, x.shape, 'float32');\n  }\n\n  fusedConv2d(\n      {input, filter, convInfo, bias, activation, preluActivationWeights}:\n          backend_util.FusedConv2DConfig): Tensor4D {\n    let result = this.conv2d(input, filter, convInfo);\n\n    if (bias) {\n      result = this.add(result, bias) as Tensor4D;\n    }\n    if (activation) {\n      result =\n          mapActivation(this, result, activation, preluActivationWeights) as\n          Tensor4D;\n    }\n    return result;\n  }\n\n  conv2d(x: Tensor4D, filter: Tensor4D, convInfo: backend_util.Conv2DInfo):\n      Tensor4D {\n    assertNotComplex([x, filter], 'conv2d');\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const padLeft = convInfo.padInfo.left;\n    const padTop = convInfo.padInfo.top;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const y = tf.buffer(convInfo.outShape, x.dtype as 'float32');\n\n    const xBatchStride = x.strides[0];\n    const xRowStride = isChannelsLast ? x.strides[1] : x.strides[2];\n    const xColStride = isChannelsLast ? x.strides[2] : 1;\n    const xChannelStride = isChannelsLast ? 1 : x.strides[1];\n    const yBatchStride = y.strides[0];\n    const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n    const yColStride = isChannelsLast ? y.strides[2] : 1;\n    const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    const wVals = this.readSync(filter.dataId) as TypedArray;\n    const yVals = y.values;\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      const xOffset1 = b * xBatchStride;\n      const yOffset1 = b * yBatchStride;\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const yOffset2 = yOffset1 + yR * yRowStride;\n        const xRCorner = yR * convInfo.strideHeight - padTop;\n        for (let wR = 0; wR < filterHeight; wR++) {\n          const xR = xRCorner + wR * dilationHeight;\n          if (xR < 0 || xR >= convInfo.inHeight) {\n            continue;\n          }\n          const wOffset1 = wR * filter.strides[0];\n          const xOffset2 = xOffset1 + xR * xRowStride;\n          for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n            const yOffset3 = yOffset2 + yC * yColStride;\n            const xCCorner = yC * convInfo.strideWidth - padLeft;\n            for (let wC = 0; wC < filterWidth; wC++) {\n              const xC = xCCorner + wC * dilationWidth;\n              if (xC < 0 || xC >= convInfo.inWidth) {\n                continue;\n              }\n              const wOffset2 = wOffset1 + wC * filter.strides[1];\n              const xOffset3 = xOffset2 + xC * xColStride;\n              let wOffset3 = wOffset2;\n              for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                const xVal = xVals[xOffset3 + d1 * xChannelStride];\n                for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                  yVals[yOffset3 + d2 * yChannelStride] +=\n                      xVal * wVals[wOffset3 + d2];\n                }\n                wOffset3 += convInfo.outChannels;\n              }\n            }\n          }\n        }\n      }\n    }\n    return y.toTensor() as Tensor4D;\n  }\n\n  conv3d(x: Tensor5D, filter: Tensor5D, convInfo: backend_util.Conv3DInfo):\n      Tensor5D {\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const padFront = convInfo.padInfo.front;\n    const padLeft = convInfo.padInfo.left;\n    const padTop = convInfo.padInfo.top;\n    const y = tf.buffer<Rank.R5>(convInfo.outShape, x.dtype as 'float32');\n\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    const wVals = this.readSync(filter.dataId) as TypedArray;\n    const yVals = y.values;\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      const xOffset1 = b * x.strides[0];\n      const yOffset1 = b * y.strides[0];\n      for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n        const yOffset2 = yOffset1 + yF * y.strides[1];\n        const xFCorner = yF * convInfo.strideDepth - padFront;\n        for (let wF = 0; wF < filterDepth; wF++) {\n          const xF = xFCorner + wF * dilationDepth;\n          if (xF < 0 || xF >= convInfo.inDepth) {\n            continue;\n          }\n          const wOffset1 = wF * filter.strides[0];\n          const xOffset2 = xOffset1 + xF * x.strides[1];\n\n          for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n            const yOffset3 = yOffset2 + yR * y.strides[2];\n            const xRCorner = yR * convInfo.strideHeight - padTop;\n            for (let wR = 0; wR < filterHeight; wR++) {\n              const xR = xRCorner + wR * dilationHeight;\n              if (xR < 0 || xR >= convInfo.inHeight) {\n                continue;\n              }\n              const wOffset2 = wOffset1 + wR * filter.strides[1];\n              const xOffset3 = xOffset2 + xR * x.strides[2];\n              for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n                const xCCorner = yC * convInfo.strideWidth - padLeft;\n                for (let wC = 0; wC < filterWidth; wC++) {\n                  const xC = xCCorner + wC * dilationWidth;\n                  if (xC < 0 || xC >= convInfo.inWidth) {\n                    continue;\n                  }\n                  const wOffset3 = wOffset2 + wC * filter.strides[2];\n                  const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                  let wOffset4 = wOffset3;\n                  for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                    const xVal = xVals[xOffset4 + d1];\n                    for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                      yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                    }\n                    wOffset4 += convInfo.outChannels;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    return y.toTensor();\n  }\n\n  conv2dDerInput(\n      dy: Tensor4D, filter: Tensor4D,\n      convInfo: backend_util.Conv2DInfo): Tensor4D {\n    assertNotComplex([dy, filter], 'conv2dDerInput');\n\n    const dx = tf.buffer<Rank.R4>(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    const fltValues = this.readSync(filter.dataId) as TypedArray;\n    const [fltS0, fltS1, fltS2] = filter.strides;\n    const {\n      batchSize,\n      filterHeight,\n      filterWidth,\n      inChannels,\n      inHeight,\n      inWidth,\n      outChannels,\n      outHeight,\n      outWidth,\n      strideHeight,\n      strideWidth,\n      dataFormat\n    } = convInfo;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const xBatchStride = dx.strides[0];\n    const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n    const xColStride = isChannelsLast ? dx.strides[2] : 1;\n    const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n    const yBatchStride = dy.strides[0];\n    const yRowStride = isChannelsLast ? dy.strides[1] : dy.strides[2];\n    const yColStride = isChannelsLast ? dy.strides[2] : 1;\n    const yChannelStride = isChannelsLast ? 1 : dy.strides[1];\n\n    for (let b = 0; b < batchSize; ++b) {\n      for (let d1 = 0; d1 < inChannels; ++d1) {\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yR = xRMin; yR < yRMax; ++yR) {\n              const wR = yR * strideHeight - xRCorner;\n\n              for (let yC = xCMin; yC < yCMax; ++yC) {\n                const wC = yC * strideWidth - xCCorner;\n                const dyOffset =\n                    yBatchStride * b + yRowStride * yR + yColStride * yC;\n                const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                    fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n                for (let d2 = 0; d2 < outChannels; ++d2) {\n                  const pixel = dyValues[dyOffset + yChannelStride * d2];\n                  const weight = fltValues[fltOffset + d2];\n                  dotProd += pixel * weight;\n                }\n              }\n            }\n            const dxOffset = xBatchStride * b + xRowStride * xR +\n                xColStride * xC + xChannelStride * d1;\n            dxValues[dxOffset] = dotProd;\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  conv3dDerInput(\n      dy: Tensor5D, filter: Tensor5D,\n      convInfo: backend_util.Conv3DInfo): Tensor5D {\n    const dx = tf.buffer<Rank.R5>(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    const [dyS0, dyS1, dyS2, dyS3] = dy.strides;\n    const fltValues = this.readSync(filter.dataId) as TypedArray;\n    const [fltS0, fltS1, fltS2, fltS3] = filter.strides;\n    const {\n      batchSize,\n      filterDepth,\n      filterHeight,\n      filterWidth,\n      inChannels,\n      inDepth,\n      inHeight,\n      inWidth,\n      outChannels,\n      outDepth,\n      outHeight,\n      outWidth,\n      strideDepth,\n      strideHeight,\n      strideWidth\n    } = convInfo;\n    const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n    for (let b = 0; b < batchSize; ++b) {\n      for (let d1 = 0; d1 < inChannels; ++d1) {\n        // Frames of depth\n        for (let xF = 0; xF < inDepth; ++xF) {\n          const xFCorner = xF - frontPad;\n          const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n          const yFMax =\n              Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n\n          // Rows as per standard 2d matrix notation\n          for (let xR = 0; xR < inHeight; ++xR) {\n            const xRCorner = xR - topPad;\n            const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n            const yRMax =\n                Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n            // Columns as per standard 2d matrix notation\n            for (let xC = 0; xC < inWidth; ++xC) {\n              const xCCorner = xC - leftPad;\n              const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n              const yCMax =\n                  Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n              let dotProd = 0;\n              for (let yF = xFMin; yF < yFMax; ++yF) {\n                const wF = yF * strideDepth - xFCorner;\n\n                for (let yR = xRMin; yR < yRMax; ++yR) {\n                  const wR = yR * strideHeight - xRCorner;\n\n                  for (let yC = xCMin; yC < yCMax; ++yC) {\n                    const wC = yC * strideWidth - xCCorner;\n                    const dyOffset =\n                        dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                    const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                        fltS1 * (filterHeight - 1 - wR) +\n                        fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                    for (let d2 = 0; d2 < outChannels; ++d2) {\n                      const pixel = dyValues[dyOffset + d2];\n                      const weight = fltValues[fltOffset + d2];\n                      dotProd += pixel * weight;\n                    }\n                  }\n                }\n              }\n              dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                  dotProd;\n            }\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  conv2dDerFilter(x: Tensor4D, dy: Tensor4D, convInfo: backend_util.Conv2DInfo):\n      Tensor4D {\n    assertNotComplex([x, dy], 'conv2dDerFilter');\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    const dW = tf.buffer<Rank.R4>(convInfo.filterShape, 'float32');\n\n    const leftPad = convInfo.padInfo.left;\n    const topPad = convInfo.padInfo.top;\n    const xBuf = this.bufferSync(x);\n    const dyBuf = this.bufferSync(dy);\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            // Need to convolve.\n            let dotProd = 0;\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              for (let yR = yRMin; yR < yRMax; ++yR) {\n                const xR = wR + yR * strideHeight - topPad;\n                for (let yC = yCMin; yC < yCMax; ++yC) {\n                  const xC = wC + yC * strideWidth - leftPad;\n                  if (isChannelsLast) {\n                    dotProd +=\n                        xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n                  } else {\n                    dotProd +=\n                        xBuf.get(b, d1, xR, xC) * dyBuf.get(b, d2, yR, yC);\n                  }\n                }\n              }\n            }\n            dW.set(dotProd, wR, wC, d1, d2);\n          }\n        }\n      }\n    }\n    return dW.toTensor();\n  }\n\n  conv3dDerFilter(x: Tensor5D, dy: Tensor5D, convInfo: backend_util.Conv3DInfo):\n      Tensor5D {\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const dw = tf.buffer<Rank.R5>(convInfo.filterShape, 'float32');\n    const dwValues = dw.values;\n    const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    const [dyS0, dyS1, dyS2, dyS3] = dy.strides;\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const [xS0, xS1, xS2, xS3] = x.strides;\n\n    const frontPad = convInfo.padInfo.front;\n    const leftPad = convInfo.padInfo.left;\n    const topPad = convInfo.padInfo.top;\n\n    for (let wF = 0; wF < filterDepth; ++wF) {\n      const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n      const yFMax = Math.min(\n          convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n      const wOffset1 = wF * dwS0;\n\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n        const yRMax = Math.min(\n            convInfo.outHeight,\n            (convInfo.inHeight + topPad - wR) / strideHeight);\n        const wOffset2 = wR * dwS1 + wOffset1;\n\n        for (let wC = 0; wC < filterWidth; ++wC) {\n          const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n          const yCMax = Math.min(\n              convInfo.outWidth,\n              (convInfo.inWidth + leftPad - wC) / strideWidth);\n          const wOffset3 = wC * dwS2 + wOffset2;\n\n          for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n            const wOffset4 = d1 * dwS3 + wOffset3;\n\n            for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n              let dotProd = 0;\n              for (let b = 0; b < convInfo.batchSize; ++b) {\n                const xOffset1 = b * xS0;\n                const yOffset1 = b * dyS0;\n\n                for (let yF = yFMin; yF < yFMax; ++yF) {\n                  const xF = wF + yF * strideDepth - frontPad;\n                  const xOffset2 = xF * xS1 + xOffset1;\n                  const yOffset2 = yF * dyS1 + yOffset1;\n\n                  for (let yR = yRMin; yR < yRMax; ++yR) {\n                    const xR = wR + yR * strideHeight - topPad;\n                    const xOffset3 = xR * xS2 + xOffset2;\n                    const yOffset3 = yR * dyS2 + yOffset2;\n\n                    for (let yC = yCMin; yC < yCMax; ++yC) {\n                      const xC = wC + yC * strideWidth - leftPad;\n                      const xOffset4 = xC * xS3 + xOffset3;\n                      const yOffset4 = yC * dyS3 + yOffset3;\n\n                      dotProd +=\n                          xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                    }\n                  }\n                }\n              }\n              dwValues[wOffset4 + d2] = dotProd;\n            }\n          }\n        }\n      }\n    }\n    return dw.toTensor();\n  }\n\n  fusedDepthwiseConv2D(\n      {input, filter, convInfo, bias, activation, preluActivationWeights}:\n          backend_util.FusedConv2DConfig): Tensor4D {\n    let result = this.depthwiseConv2D(input, filter, convInfo);\n\n    if (bias) {\n      result = this.add(result, bias) as Tensor4D;\n    }\n    if (activation) {\n      result =\n          mapActivation(this, result, activation, preluActivationWeights) as\n          Tensor4D;\n    }\n    return result;\n  }\n\n  depthwiseConv2D(\n      x: Tensor4D, filter: Tensor4D,\n      convInfo: backend_util.Conv2DInfo): Tensor4D {\n    assertNotComplex([x, filter], 'depthwiseConv2D');\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const padLeft = convInfo.padInfo.left;\n    const padTop = convInfo.padInfo.top;\n    const chMul = convInfo.outChannels / convInfo.inChannels;\n    const y = tf.buffer(convInfo.outShape, x.dtype as 'float32');\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    const wVals = this.readSync(filter.dataId) as TypedArray;\n    const yVals = y.values;\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      const xOffset1 = b * x.strides[0];\n      const yOffset1 = b * y.strides[0];\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const yOffset2 = yOffset1 + yR * y.strides[1];\n        const xRCorner = yR * convInfo.strideHeight - padLeft;\n        for (let wR = 0; wR < filterHeight; ++wR) {\n          const xR = xRCorner + wR * dilationHeight;\n          if (xR < 0 || xR >= convInfo.inHeight) {\n            continue;\n          }\n          const wOffset1 = wR * filter.strides[0];\n          const xOffset2 = xOffset1 + xR * x.strides[1];\n          for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n            const yOffset3 = yOffset2 + yC * y.strides[2];\n            const xCCorner = yC * convInfo.strideWidth - padTop;\n            for (let wC = 0; wC < filterWidth; ++wC) {\n              const xC = xCCorner + wC * dilationWidth;\n              if (xC < 0 || xC >= convInfo.inWidth) {\n                continue;\n              }\n              const wOffset2 = wOffset1 + wC * filter.strides[1];\n              const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n              let yOffset4 = yOffset3;\n              let wOffset3 = wOffset2;\n              for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                const xVal = xVals[xOffset3 + d1];\n                for (let q = 0; q < chMul; ++q) {\n                  yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n                }\n                yOffset4 += chMul;\n                wOffset3 += chMul;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return y.toTensor() as Tensor4D;\n  }\n\n  depthwiseConv2DDerInput(\n      dy: Tensor4D, filter: Tensor4D,\n      convInfo: backend_util.Conv2DInfo): Tensor4D {\n    assertNotComplex([dy, filter], 'depthwiseConv2DDerInput');\n\n    const dx = tf.buffer<Rank.R4>(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const [dxS0, dxS1, dxS2] = dx.strides;\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    const [dyS0, dyS1, dyS2] = dy.strides;\n    const fltValues = this.readSync(filter.dataId) as TypedArray;\n    const [fltS0, fltS1, fltS2] = filter.strides;\n    const {\n      batchSize,\n      filterHeight,\n      filterWidth,\n      inChannels,\n      inHeight,\n      inWidth,\n      outChannels,\n      outHeight,\n      outWidth,\n      strideHeight,\n      strideWidth\n    } = convInfo;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n    const chMul = outChannels / inChannels;\n\n    for (let b = 0; b < batchSize; ++b) {\n      for (let d1 = 0; d1 < inChannels; ++d1) {\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yR = xRMin; yR < yRMax; ++yR) {\n              const wR = yR * strideHeight - xRCorner;\n\n              for (let yC = xCMin; yC < yCMax; ++yC) {\n                const wC = yC * strideWidth - xCCorner;\n                const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n                const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                    fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n                for (let dm = 0; dm < chMul; ++dm) {\n                  const d2 = d1 * chMul + dm;\n                  const pixel = dyValues[dyOffset + d2];\n                  const weight = fltValues[fltOffset + dm];\n                  dotProd += pixel * weight;\n                }\n              }\n            }\n            dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  depthwiseConv2DDerFilter(\n      x: Tensor4D, dy: Tensor4D, convInfo: backend_util.Conv2DInfo): Tensor4D {\n    assertNotComplex([x, dy], 'depthwiseConv2DDerFilter');\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dW = tf.buffer<Rank.R4>(convInfo.filterShape, 'float32');\n\n    const leftPad = convInfo.padInfo.left;\n    const topPad = convInfo.padInfo.top;\n    const chMul = convInfo.outChannels / convInfo.inChannels;\n\n    const xBuf = this.bufferSync(x);\n    const dyBuf = this.bufferSync(dy);\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          const d1 = Math.trunc(d2 / chMul);\n          const dm = d2 % chMul;\n\n          let dotProd = 0;\n          for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let yR = yRMin; yR < yRMax; ++yR) {\n              const xR = wR + yR * strideHeight - topPad;\n              for (let yC = yCMin; yC < yCMax; ++yC) {\n                const xC = wC + yC * strideWidth - leftPad;\n                dotProd += xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n              }\n            }\n          }\n          dW.set(dotProd, wR, wC, d1, dm);\n        }\n      }\n    }\n    return dW.toTensor();\n  }\n\n  tile<T extends Tensor>(x: T, reps: number[]): T {\n    assertNotComplex(x, 'tile');\n    return tile(this.bufferSync(x), reps) as T;\n  }\n\n  gather<T extends Tensor>(x: T, indices: Tensor1D, axis: number): T {\n    assertNotComplex([x, indices], 'gather');\n\n    const newShape: number[] = x.shape.slice();\n    const indicesValues = this.readSync(indices.dataId) as TypedArray;\n    newShape[axis] = indicesValues.length;\n    const result = tf.buffer(newShape, x.dtype);\n    const xBuf = this.bufferSync(x);\n\n    for (let i = 0; i < result.size; ++i) {\n      const newLoc = result.indexToLoc(i);\n\n      const originalLoc: number[] = newLoc.slice();\n      originalLoc[axis] = indicesValues[newLoc[axis]];\n\n      const originalIndex = xBuf.locToIndex(originalLoc);\n      result.values[i] = xBuf.values[originalIndex];\n    }\n    return result.toTensor() as T;\n  }\n\n  batchToSpaceND<T extends Tensor>(\n      x: T, blockShape: number[], crops: number[][]): T {\n    assertNotComplex([x], 'batchToSpaceND');\n\n    const prod = blockShape.reduce((a, b) => a * b);\n\n    const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n    const permuted =\n        backend_util.getPermuted(reshaped.length, blockShape.length);\n    const reshapedPermuted =\n        backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n    const sliceBeginCoords =\n        backend_util.getSliceBeginCoords(crops, blockShape.length);\n    const sliceSize =\n        backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n    return tf.transpose(x.reshape(reshaped), permuted)\n               .reshape(reshapedPermuted)\n               .slice(sliceBeginCoords, sliceSize) as T;\n  }\n\n  maxPool(x: Tensor4D, convInfo: backend_util.Conv2DInfo): Tensor4D {\n    assertNotComplex(x, 'maxPool');\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    return pool(xValues, x.shape, x.dtype, x.strides, convInfo, 'max')\n               .toTensor() as Tensor4D;\n  }\n\n  maxPoolBackprop(\n      dy: Tensor4D, x: Tensor4D, y: Tensor4D,\n      convInfo: backend_util.Conv2DInfo): Tensor4D {\n    assertNotComplex([x, y], 'maxPoolBackprop');\n\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const maxPosBuf = buffer(\n        convInfo.outShape, x.dtype,\n        maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = tf.buffer<Rank.R4>(x.shape, 'float32');\n\n    const dyBuf = this.bufferSync(dy);\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      for (let d = 0; d < convInfo.inChannels; ++d) {\n        for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n          for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n            // Shader code begins.\n            const dyRCorner = dxR - padTop;\n            const dyCCorner = dxC - padLeft;\n            let dotProd = 0;\n            for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n              const dyR = (dyRCorner + wR) / strideHeight;\n              if (dyR < 0 || dyR >= convInfo.outHeight ||\n                  Math.floor(dyR) !== dyR) {\n                continue;\n              }\n              for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n                const dyC = (dyCCorner + wC) / strideWidth;\n                if (dyC < 0 || dyC >= convInfo.outWidth ||\n                    Math.floor(dyC) !== dyC) {\n                  continue;\n                }\n                const maxPos = effectiveFilterHeight * effectiveFilterWidth -\n                    1 - (maxPosBuf.get(b, dyR, dyC, d) as number);\n                const curPos = wR * effectiveFilterWidth + wC;\n\n                const mask = maxPos === curPos ? 1 : 0;\n                if (mask === 0) {\n                  continue;\n                }\n\n                const pixel = dyBuf.get(b, dyR, dyC, d);\n                dotProd += pixel * mask;\n              }\n            }\n            dx.set(dotProd, b, dxR, dxC, d);\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  avgPoolBackprop(dy: Tensor4D, x: Tensor4D, convInfo: backend_util.Conv2DInfo):\n      Tensor4D {\n    assertNotComplex([dy, x], 'avgPoolBackprop');\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = tf.buffer<Rank.R4>(x.shape, 'float32');\n\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n    const dyBuf = this.bufferSync(dy);\n\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n      for (let d = 0; d < convInfo.inChannels; ++d) {\n        for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n          for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n            // Shader code begins.\n            const dyRCorner = dxR - padTop;\n            const dyCCorner = dxC - padLeft;\n            let dotProd = 0;\n            for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n              const dyR = (dyRCorner + wR) / strideHeight;\n              if (dyR < 0 || dyR >= convInfo.outHeight ||\n                  Math.floor(dyR) !== dyR) {\n                continue;\n              }\n              for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n                const dyC = (dyCCorner + wC) / strideWidth;\n                if (dyC < 0 || dyC >= convInfo.outWidth ||\n                    Math.floor(dyC) !== dyC) {\n                  continue;\n                }\n\n                const pixel = dyBuf.get(b, dyR, dyC, d);\n                dotProd += pixel;\n              }\n            }\n            dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  private pool3d(\n      x: Tensor5D, convInfo: backend_util.Conv3DInfo,\n      poolType: 'max'|'avg'): Tensor5D {\n    assertNotComplex(x, 'pool3d');\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    const initialValue =\n        (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                              Number.POSITIVE_INFINITY);\n\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const output = tf.buffer(convInfo.outShape, x.dtype);\n    const outputVals = output.values;\n\n    const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n        convInfo.outShape[3] * convInfo.outShape[4];\n    const outputDepthStrides =\n        convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n    const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n    const outputColStrides = convInfo.outShape[4];\n\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n      const outputBatchOffset = batch * outputBatchStrides;\n      const inputBatchOffset = batch * x.strides[0];\n      for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n        for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n          const xDepthCorner = yDepth * strideDepth - padFront;\n          let xDepthMin = xDepthCorner;\n          while (xDepthMin < 0) {\n            xDepthMin += dilationDepth;\n          }\n          const xDepthMax =\n              Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n          const outputDepthOffset =\n              outputBatchOffset + yDepth * outputDepthStrides;\n          for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n            const xRowCorner = yRow * strideHeight - padTop;\n            let xRowMin = xRowCorner;\n            while (xRowMin < 0) {\n              xRowMin += dilationHeight;\n            }\n            const xRowMax =\n                Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n            const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n            for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n              const xColCorner = yCol * strideWidth - padLeft;\n              let xColMin = xColCorner;\n              while (xColMin < 0) {\n                xColMin += dilationWidth;\n              }\n              const xColMax =\n                  Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n              // Shader code begins\n              const outputColOffset = outputRowOffset + yCol * outputColStrides;\n              let minMaxValue = initialValue;\n              let avgValue = 0;\n              let count = 0;\n              for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                   xDepth += dilationDepth) {\n                const xDepthOffset = inputBatchOffset + xDepth * x.strides[1];\n                for (let xRow = xRowMin; xRow < xRowMax;\n                     xRow += dilationHeight) {\n                  const xRowOffset = xDepthOffset + xRow * x.strides[2];\n                  for (let xCol = xColMin; xCol < xColMax;\n                       xCol += dilationWidth) {\n                    const xColOffset = xRowOffset + xCol * x.strides[3];\n                    const pixel = xValues[xColOffset + channel];\n                    if ((poolType === 'max' && pixel > minMaxValue)) {\n                      minMaxValue = pixel;\n                    } else if (poolType === 'avg') {\n                      avgValue += pixel;\n                      count++;\n                    }\n                    if (isNaN(minMaxValue)) {\n                      break;\n                    }\n                  }\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n                if (isNaN(minMaxValue)) {\n                  break;\n                }\n              }\n              const outputOffset = outputColOffset + channel;\n              outputVals[outputOffset] =\n                  poolType === 'avg' ? avgValue / count : minMaxValue;\n            }\n          }\n        }\n      }\n    }\n    return output.toTensor() as Tensor5D;\n  }\n\n  avgPool3d(x: Tensor5D, convInfo: backend_util.Conv3DInfo): Tensor5D {\n    assertNotComplex(x, 'avgPool3d');\n\n    return this.pool3d(x, convInfo, 'avg').toFloat();\n  }\n\n  avgPool3dBackprop(\n      dy: Tensor5D, x: Tensor5D, convInfo: backend_util.Conv3DInfo): Tensor5D {\n    assertNotComplex([dy, x], 'avgPool3dBackprop');\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = tf.buffer<Rank.R5>(x.shape, 'float32');\n\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n    const dyBuf = this.bufferSync(dy);\n\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n      for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n        for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n          for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n            for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n              // Shader code begins.\n              const dyDepthCorner = dxDepth - padFront;\n              const dyRowCorner = dxRow - padTop;\n              const dyColCorner = dxCol - padLeft;\n              let dotProd = 0;\n              for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                   wDepth += dilationDepth) {\n                const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n                if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                    Math.floor(dyDepth) !== dyDepth) {\n                  continue;\n                }\n                for (let wRow = 0; wRow < effectiveFilterHeight;\n                     wRow += dilationHeight) {\n                  const dyRow = (dyRowCorner + wRow) / strideHeight;\n                  if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                      Math.floor(dyRow) !== dyRow) {\n                    continue;\n                  }\n                  for (let wCol = 0; wCol < effectiveFilterWidth;\n                       wCol += dilationWidth) {\n                    const dyCol = (dyColCorner + wCol) / strideWidth;\n                    if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                        Math.floor(dyCol) !== dyCol) {\n                      continue;\n                    }\n\n                    const pixel =\n                        dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                    dotProd += pixel;\n                  }\n                }\n              }\n              dx.set(\n                  dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol,\n                  channel);\n            }\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  maxPool3d(x: Tensor5D, convInfo: backend_util.Conv3DInfo): Tensor5D {\n    assertNotComplex(x, 'maxPool3d');\n\n    return this.pool3d(x, convInfo, 'max').toFloat();\n  }\n\n  private maxPool3dPositions(x: Tensor5D, convInfo: backend_util.Conv3DInfo):\n      Tensor5D {\n    const maxPositions = tf.buffer(convInfo.outShape, 'int32');\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    const xBuf = this.bufferSync(x);\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n      for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n        for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n          const xDepthCorner = yDepth * strideDepth - padFront;\n          let xDepthMin = xDepthCorner;\n          while (xDepthMin < 0) {\n            xDepthMin += dilationDepth;\n          }\n          const xDepthMax =\n              Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n          for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n            const xRowCorner = yRow * strideHeight - padTop;\n            let xRowMin = xRowCorner;\n            while (xRowMin < 0) {\n              xRowMin += dilationHeight;\n            }\n            const xRowMax =\n                Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n            for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n              const xColCorner = yCol * strideWidth - padLeft;\n              let xColMin = xColCorner;\n              while (xColMin < 0) {\n                xColMin += dilationWidth;\n              }\n              const xColMax =\n                  Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n\n              // Shader code begins\n              let maxValue = Number.NEGATIVE_INFINITY;\n              let maxPosition = -1;\n\n              for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                   xDepth += dilationDepth) {\n                const wDepth = xDepth - xDepthCorner;\n                for (let xRow = xRowMin; xRow < xRowMax;\n                     xRow += dilationHeight) {\n                  const wRow = xRow - xRowCorner;\n                  for (let xCol = xColMin; xCol < xColMax;\n                       xCol += dilationWidth) {\n                    const wCol = xCol - xColCorner;\n                    const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                    if (pixel >= maxValue) {\n                      maxValue = pixel;\n                      maxPosition = wDepth * effectiveFilterHeight *\n                              effectiveFilterWidth +\n                          wRow * effectiveFilterHeight + wCol;\n                    }\n                  }\n                }\n              }\n\n              maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n            }\n          }\n        }\n      }\n    }\n    return maxPositions.toTensor() as Tensor5D;\n  }\n\n  maxPool3dBackprop(\n      dy: Tensor5D, x: Tensor5D, y: Tensor5D,\n      convInfo: backend_util.Conv3DInfo): Tensor5D {\n    assertNotComplex([x, y], 'maxPool3dBackprop');\n\n    const maxPositions = this.maxPool3dPositions(x, convInfo);\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = tf.buffer<Rank.R5>(x.shape, 'float32');\n\n    const maxPosBuf = this.bufferSync(maxPositions);\n    const dyBuf = this.bufferSync(dy);\n\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n      for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n        for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n          for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n            for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n              // Shader code begins\n              const dyDepthCorner = dxDepth - padFront;\n              const dyRowCorner = dxRow - padTop;\n              const dyColCorner = dxCol - padLeft;\n              let dotProd = 0;\n              for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                   wDepth += dilationDepth) {\n                const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n                if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                    Math.floor(dyDepth) !== dyDepth) {\n                  continue;\n                }\n                for (let wRow = 0; wRow < effectiveFilterHeight;\n                     wRow += dilationHeight) {\n                  const dyRow = (dyRowCorner + wRow) / strideHeight;\n                  if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                      Math.floor(dyRow) !== dyRow) {\n                    continue;\n                  }\n                  for (let wCol = 0; wCol < effectiveFilterWidth;\n                       wCol += dilationWidth) {\n                    const dyCol = (dyColCorner + wCol) / strideWidth;\n                    if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                        Math.floor(dyCol) !== dyCol) {\n                      continue;\n                    }\n\n                    const maxPos = effectiveFilterDepth *\n                            effectiveFilterHeight * effectiveFilterWidth -\n                        1 -\n                        maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                    const curPos =\n                        wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                        wRow * effectiveFilterWidth + wCol;\n\n                    const mask = maxPos === curPos ? 1 : 0;\n                    if (mask === 0) {\n                      continue;\n                    }\n\n                    const pixel =\n                        dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                    dotProd += pixel * mask;\n                  }\n                }\n              }\n              dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n            }\n          }\n        }\n      }\n    }\n    return dx.toTensor();\n  }\n\n  cast<T extends Tensor>(x: T, dtype: DataType): T {\n    return backend_util.castTensor(x, dtype, this);\n  }\n\n  avgPool(x: Tensor4D, convInfo: backend_util.Conv2DInfo): Tensor4D {\n    assertNotComplex(x, 'avgPool');\n    assertNotComplex(x, 'maxPool');\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    return pool(xValues, x.shape, x.dtype, x.strides, convInfo, 'avg')\n               .toTensor()\n               .toFloat() as Tensor4D;\n  }\n\n  resizeBilinear(\n      x: Tensor4D, newHeight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    assertNotComplex(x, 'resizeBilinear');\n\n    const [batch, oldHeight, oldWidth, numChannels] = x.shape;\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const result = new Float32Array(\n        util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n\n    const effectiveInputSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutputSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n    let outputIdx = 0;\n    const effectiveRowSizeRatio =\n        effectiveInputSize[0] / effectiveOutputSize[0];\n    const effectiveColSizeRatio =\n        effectiveInputSize[1] / effectiveOutputSize[1];\n    for (let b = 0; b < batch; b++) {\n      for (let r = 0; r < newHeight; r++) {\n        const sourceFracRow = effectiveRowSizeRatio * r;\n        const sourceRowFloor = Math.floor(sourceFracRow);\n        const rowFrac = sourceFracRow - sourceRowFloor;\n        const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n        const topRowOffset = b * x.strides[0] + sourceRowFloor * x.strides[1];\n        const botRowOffset = b * x.strides[0] + sourceRowCeil * x.strides[1];\n        for (let c = 0; c < newWidth; c++) {\n          const sourceFracCol = effectiveColSizeRatio * c;\n          const sourceColFloor = Math.floor(sourceFracCol);\n          const colFrac = sourceFracCol - sourceColFloor;\n          const sourceColCeil =\n              Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n          const topLeftOffest = topRowOffset + sourceColFloor * x.strides[2];\n          const botLeftOffset = botRowOffset + sourceColFloor * x.strides[2];\n          const topRightOffset = topRowOffset + sourceColCeil * x.strides[2];\n          const botRightOffest = botRowOffset + sourceColCeil * x.strides[2];\n          for (let d = 0; d < numChannels; d++) {\n            // Begin shader.\n\n            // Compute the fractional index of the source.\n            const topLeft = xValues[topLeftOffest + d];\n            const bottomLeft = xValues[botLeftOffset + d];\n            const topRight = xValues[topRightOffset + d];\n            const bottomRight = xValues[botRightOffest + d];\n\n            const top = topLeft + (topRight - topLeft) * colFrac;\n            const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n            const newValue = top + (bottom - top) * rowFrac;\n\n            result[outputIdx++] = newValue;\n          }\n        }\n      }\n    }\n    return tf.tensor(result, [batch, newHeight, newWidth, numChannels]);\n  }\n\n  resizeBilinearBackprop(dy: Tensor4D, x: Tensor4D, alignCorners: boolean) {\n    assertNotComplex([dy, x], 'resizeBilinearBackprop');\n\n    const [batch, xHeight, xWidth, depth] = x.shape;\n    const [, yHeight, yWidth] = dy.shape;\n\n    const output = new Float32Array(batch * xHeight * xWidth * depth);\n\n    // In the backwards pass, we want to find the pixels that were generated\n    // for each pixel in the input image the forward pass and add the\n    // corresponding coefficient from dy to the gradient (with some\n    // interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    let offset = 0;\n    for (let b = 0; b < batch; b++) {\n      const bOffset = b * x.strides[0];\n      for (let r = 0; r < yHeight; r++) {\n        const dxR = r * heightScale;\n        const topDxRIndex = Math.floor(dxR);\n        const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n\n        const topDxROffset = bOffset + topDxRIndex * x.strides[1];\n        const bottomDxROffset = bOffset + bottomDxRIndex * x.strides[1];\n\n        const dxRLerp = dxR - topDxRIndex;\n        const inverseDxRLerp = 1.0 - dxRLerp;\n        for (let c = 0; c < yWidth; c++) {\n          const dxC = c * widthScale;\n          const leftDxCIndex = Math.floor(dxC);\n          const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n          const dxCLerp = dxC - leftDxCIndex;\n          const inverseDxCLerp = 1.0 - dxCLerp;\n\n          const topLeftRCOffset = topDxROffset + leftDxCIndex * x.strides[2];\n          const topRightRCOffset = topDxROffset + rightDxCIndex * x.strides[2];\n          const bottomLeftRCOffset =\n              bottomDxROffset + leftDxCIndex * x.strides[2];\n          const bottomRightRCOffset =\n              bottomDxROffset + rightDxCIndex * x.strides[2];\n\n          const inverseDxRLerpTimesInverseDxCLerp =\n              inverseDxRLerp * inverseDxCLerp;\n          const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n          const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n          const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n          for (let d = 0; d < depth; d++) {\n            const dyVal = dyValues[offset++];\n            output[topLeftRCOffset + d] +=\n                dyVal * inverseDxRLerpTimesInverseDxCLerp;\n            output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n            output[bottomLeftRCOffset + d] +=\n                dyVal * dxRLerpTimesInverseDxCLerp;\n            output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n          }\n        }\n      }\n    }\n    return tf.tensor4d(output, [batch, xWidth, xHeight, depth], x.dtype);\n  }\n\n  resizeNearestNeighbor(\n      x: Tensor4D, newHeight: number, newWidth: number,\n      alignCorners: boolean): Tensor4D {\n    assertNotComplex(x, 'resizeNearestNeighbor');\n\n    const [batch, oldHeight, oldWidth, numChannels] = x.shape;\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n\n    const effectiveInputSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutputSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    const effectiveRowSizeRatio =\n        effectiveInputSize[0] / effectiveOutputSize[0];\n    const effectiveColSizeRatio =\n        effectiveInputSize[1] / effectiveOutputSize[1];\n\n    let outputOffset = 0;\n    for (let b = 0; b < batch; b++) {\n      const batchOffset = b * x.strides[0];\n      for (let r = 0; r < newHeight; r++) {\n        const sourceFracRow = effectiveRowSizeRatio * r;\n        const sourceNearestRow = Math.min(\n            oldHeight - 1,\n            alignCorners ? Math.round(sourceFracRow) :\n                           Math.floor(sourceFracRow));\n        const rowOffset = batchOffset + sourceNearestRow * x.strides[1];\n        for (let c = 0; c < newWidth; c++) {\n          const sourceFracCol = effectiveColSizeRatio * c;\n          const sourceNearestCol = Math.min(\n              oldWidth - 1,\n              alignCorners ? Math.round(sourceFracCol) :\n                             Math.floor(sourceFracCol));\n          const colOffset = rowOffset + sourceNearestCol * x.strides[2];\n          for (let d = 0; d < numChannels; d++) {\n            // Begin shader.\n            // Compute the fractional index of the source.\n            const newVal = xValues[colOffset + d];\n            output[outputOffset++] = newVal;\n          }\n        }\n      }\n    }\n    return tf.tensor(\n        output, [batch, newHeight, newWidth, numChannels], x.dtype);\n  }\n\n  resizeNearestNeighborBackprop(\n      dy: Tensor4D, x: Tensor4D, alignCorners: boolean) {\n    assertNotComplex([dy, x], 'resizeNearestNeighborBackprop');\n\n    const [batch, xHeight, xWidth, depth] = x.shape;\n    const [, yHeight, yWidth] = dy.shape;\n\n    const output = new Float32Array(batch * xHeight * xWidth * depth);\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n\n    // In the backwards pass, we want to find the pixels that were generated\n    // for each pixel in the input image the forward pass\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    // Loop over the output space.\n    for (let b = 0; b < batch; b++) {\n      const batchOffset = b * x.strides[0];\n      for (let r = 0; r < xHeight; r++) {\n        const rowOffset = batchOffset + r * x.strides[1];\n\n        // Compute bounds for where in dy we will look\n        const startRLerp = Math.floor(r * invHeightScale);\n        const startDyR = Math.floor(startRLerp - (winHeight / 2));\n        for (let c = 0; c < xWidth; c++) {\n          const colOffset = rowOffset + c * x.strides[2];\n\n          // Compute bounds for where in dy we will look\n          const startCLerp = Math.floor(c * invWidthScale);\n          const startDyC = Math.floor(startCLerp - (winWidth / 2));\n\n          for (let d = 0; d < depth; d++) {\n            let accum = 0;\n            // loop over dy\n\n            for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n              const dyR = dyRIndex + startDyR;\n              // Guard against the window exceeding the bounds of dy\n              if (dyR < 0 || dyR >= yHeight) {\n                continue;\n              }\n\n              const dyROffset = batchOffset + dyR * dy.strides[1];\n              const sourceFracRow = dyR * heightScale;\n              const sourceNearestRow = Math.min(\n                  xHeight - 1,\n                  alignCorners ? Math.round(sourceFracRow) :\n                                 Math.floor(sourceFracRow));\n              if (r !== sourceNearestRow) {\n                continue;\n              }\n              for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n                const dyC = dyCIndex + startDyC;\n                // Guard against the window exceeding the bounds of dy\n                if (dyC < 0 || dyC >= yWidth) {\n                  continue;\n                }\n\n                const dyCOffset = dyROffset + dyC * dy.strides[2];\n                const sourceFracCol = dyC * widthScale;\n                const sourceNearestCol = Math.min(\n                    xWidth - 1,\n                    alignCorners ? Math.round(sourceFracCol) :\n                                   Math.floor(sourceFracCol));\n\n                if (c === sourceNearestCol) {\n                  accum += dyValues[dyCOffset + d];\n                }\n              }\n            }\n            output[colOffset + d] = accum;\n          }\n        }\n      }\n    }\n    return tf.tensor4d(output, x.shape, x.dtype);\n  }\n\n  batchNorm(\n      x: Tensor4D, mean: Tensor4D|Tensor1D, variance: Tensor4D|Tensor1D,\n      offset?: Tensor4D|Tensor1D, scale?: Tensor4D|Tensor1D,\n      varianceEpsilon?: number): Tensor4D {\n    assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n\n    const xVals = this.readSync(x.dataId) as TypedArray;\n    const mVals = this.readSync(mean.dataId) as TypedArray;\n    const varVals = this.readSync(variance.dataId) as TypedArray;\n    const sVals = scale ? this.readSync(scale.dataId) as TypedArray :\n                          new Float32Array([1]);\n    const offVals = offset ? this.readSync(offset.dataId) as TypedArray :\n                             new Float32Array([0]);\n    const outVals = new Float32Array(xVals.length);\n\n    const offValsLength = offVals.length;\n    const sValsLength = sVals.length;\n    const varValsLength = varVals.length;\n    const mValsLength = mVals.length;\n\n    let offi = 0;\n    let mi = 0;\n    let si = 0;\n    let vi = 0;\n    for (let i = 0; i < xVals.length; ++i) {\n      outVals[i] = offVals[offi++] +\n          (xVals[i] - mVals[mi++]) * sVals[si++] /\n              Math.sqrt(varVals[vi++] + varianceEpsilon);\n      if (offi >= offValsLength) {\n        offi = 0;\n      }\n      if (mi >= mValsLength) {\n        mi = 0;\n      }\n      if (si >= sValsLength) {\n        si = 0;\n      }\n      if (vi >= varValsLength) {\n        vi = 0;\n      }\n    }\n    return tf.tensor4d(outVals, x.shape);\n  }\n\n  localResponseNormalization4D(\n      x: Tensor4D, depthRadius: number, bias: number, alpha: number,\n      beta: number): Tensor4D {\n    assertNotComplex(x, 'localResponseNormalization4D');\n\n    const channels = x.shape[3];\n    const maxD = channels - 1;\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const size = x.size;\n    const result = new Float32Array(size);\n\n    function sumAcrossChannels(offset: number) {\n      const currentChannel = offset % channels;\n      let beginSumOffset =\n          offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n      const endSumOffset = offset - currentChannel +\n          Math.min(currentChannel + depthRadius, maxD);\n\n      let sum = 0.0;\n      for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n        const z = xValues[beginSumOffset];\n        sum += z * z;\n      }\n      return sum;\n    }\n\n    for (let offset = 0; offset < size; offset++) {\n      const sum = sumAcrossChannels(offset);\n      const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n      result[offset] = val;\n    }\n\n    return tf.tensor4d(result, x.shape);\n  }\n\n  LRNGrad(\n      dy: Tensor4D, inputImage: Tensor4D, outputImage: Tensor4D,\n      depthRadius: number, bias: number, alpha: number,\n      beta: number): Tensor4D {\n    assertNotComplex(dy, 'LRNGrad');\n    const channels = dy.shape[3];\n    const dyValues = this.readSync(dy.dataId) as TypedArray;\n    const inputImageValues = this.readSync(inputImage.dataId) as TypedArray;\n    const outputImageValues = this.readSync(outputImage.dataId) as TypedArray;\n    const result = new Float32Array(dy.size);\n    const size = dy.size;\n\n    for (let offset = 0; offset < size; offset++) {\n      const currentChannel = offset % channels;\n      const depthBegin =\n          (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n      const depthEnd = (offset - currentChannel) +\n          Math.min(channels, currentChannel + depthRadius + 1);\n\n      let norm = 0;\n      for (let k = depthBegin; k < depthEnd; k++) {\n        norm += Math.pow(inputImageValues[k], 2);\n      }\n      norm = alpha * norm + bias;\n\n      for (let k = depthBegin; k < depthEnd; k++) {\n        let dyi = -2 * alpha * beta * inputImageValues[k] *\n            outputImageValues[offset] / norm;\n        if (offset === k) {\n          dyi += Math.pow(norm, -beta);\n        }\n        dyi *= dyValues[offset];\n        result[k] += dyi;\n      }\n    }\n    return tf.tensor4d(result, dy.shape);\n  }\n\n  multinomial(\n      logits: Tensor2D, normalized: boolean, numSamples: number,\n      seed: number): Tensor2D {\n    assertNotComplex(logits, 'multinomial');\n\n    const probabilities = normalized ? logits : tf.softmax(logits);\n    const batchSize = probabilities.shape[0];\n    const numEvents = probabilities.shape[1];\n    const res = tf.zeros<Rank.R2>([batchSize, numSamples], 'int32');\n    const resVals = this.readSync(res.dataId) as TypedArray;\n    const probVals = this.readSync(probabilities.dataId) as TypedArray;\n\n    for (let b = 0; b < batchSize; ++b) {\n      const offset = b * numEvents;\n      // The cdf won't include the last event. It will be implicit if no other\n      // event happened.\n      const cdf = new Float32Array(numEvents - 1);\n      cdf[0] = probVals[offset];\n      for (let event = 1; event < cdf.length; ++event) {\n        cdf[event] = cdf[event - 1] + probVals[offset + event];\n      }\n\n      const random = seedrandom.alea(seed.toString());\n      const outOffset = b * numSamples;\n      for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n        const r = random();\n\n        // Assume last event happened by default.\n        resVals[outOffset + sampleId] = cdf.length;\n\n        for (let event = 0; event < cdf.length; event++) {\n          if (r < cdf[event]) {\n            resVals[outOffset + sampleId] = event;\n            break;\n          }\n        }\n      }\n    }\n    return res;\n  }\n\n  oneHot(indices: Tensor1D, depth: number, onValue: number, offValue: number):\n      Tensor2D {\n    assertNotComplex(indices, 'oneHot');\n\n    const res = new Float32Array(indices.size * depth);\n    res.fill(offValue);\n    const indicesVal = this.readSync(indices.dataId) as TypedArray;\n\n    for (let event = 0; event < indices.size; ++event) {\n      if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n        res[event * depth + indicesVal[event]] = onValue;\n      }\n    }\n    return tf.tensor2d(res, [indices.size, depth], 'int32');\n  }\n\n  nonMaxSuppression(\n      boxes: Tensor2D, scores: Tensor1D, maxOutputSize: number,\n      iouThreshold: number, scoreThreshold: number): Tensor1D {\n    assertNotComplex(boxes, 'nonMaxSuppression');\n\n    const boxesVals = this.readSync(boxes.dataId) as TypedArray;\n    const scoresVals = this.readSync(scores.dataId) as TypedArray;\n    return nonMaxSuppressionV3Impl(\n        boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n  }\n\n  fft(x: Tensor2D): Tensor2D {\n    return this.fftBatch(x, false);\n  }\n\n  ifft(x: Tensor2D): Tensor2D {\n    return this.fftBatch(x, true);\n  }\n\n  /**\n   * Calculate FFT of inner most elements of batch tensor.\n   */\n  private fftBatch(x: Tensor2D, inverse: boolean): Tensor2D {\n    const batch = x.shape[0];\n    const innerDim = x.shape[1];\n    // Collects real and imaginary values separately.\n    const realResult = tf.buffer(x.shape, 'float32');\n    const imagResult = tf.buffer(x.shape, 'float32');\n\n    const real = tf.real(x).as2D(batch, innerDim);\n    const imag = tf.imag(x).as2D(batch, innerDim);\n\n    for (let b = 0; b < batch; b++) {\n      // TODO: Support slice ops for complex type.\n      const r = real.slice([b, 0], [1, innerDim]);\n      const i = imag.slice([b, 0], [1, innerDim]);\n      const input = tf.complex(r, i);\n      // Run FFT by batch element.\n      const res =\n          this.readSync(this.fftImpl(input, inverse).dataId) as Float32Array;\n      for (let d = 0; d < innerDim; d++) {\n        const c = backend_util.getComplexWithIndex(res, d);\n        realResult.values[b * innerDim + d] = c.real;\n        imagResult.values[b * innerDim + d] = c.imag;\n      }\n    }\n\n    const t = tf.complex(realResult.toTensor(), imagResult.toTensor());\n    return t.as2D(batch, innerDim);\n  }\n\n  private fftImpl(x: Tensor2D, inverse: boolean): Tensor2D {\n    const x1D = x.as1D();\n\n    const n = x1D.size;\n\n    if (this.isExponentOf2(n)) {\n      let result = this.fftRadix2(x1D, n, inverse).as2D(x.shape[0], x.shape[1]);\n      if (inverse) {\n        result = tf.complex(\n                     tf.real(result).div(tf.scalar(n)),\n                     tf.imag(result).div(tf.scalar(n))) as Tensor2D;\n      }\n      return result;\n    } else {\n      const data = this.readSync(x.dataId) as TypedArray;\n      const rawOutput =\n          this.fourierTransformByMatmul(data, n, inverse) as Float32Array;\n      const output = backend_util.splitRealAndImagArrays(rawOutput);\n      return tf.complex(output.real, output.imag).as2D(x.shape[0], x.shape[1]);\n    }\n  }\n\n  private isExponentOf2(size: number): boolean {\n    return (size & size - 1) === 0;\n  }\n\n  // FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\n  private fftRadix2(input: Tensor1D, size: number, inverse: boolean): Tensor1D {\n    if (size === 1) {\n      return input;\n    }\n    const data = this.readSync(input.dataId) as TypedArray as Float32Array;\n    const half = size / 2;\n    const evenComplex = backend_util.complexWithEvenIndex(data);\n    let evenTensor = tf.complex(evenComplex.real, evenComplex.imag).as1D();\n    const oddComplex = backend_util.complexWithOddIndex(data);\n    let oddTensor = tf.complex(oddComplex.real, oddComplex.imag).as1D();\n\n    // Recursive call for half part of original input.\n    evenTensor = this.fftRadix2(evenTensor, half, inverse);\n    oddTensor = this.fftRadix2(oddTensor, half, inverse);\n\n    const e = backend_util.exponents(size, inverse);\n    const exponent = tf.complex(e.real, e.imag).mul(oddTensor);\n\n    const addPart = evenTensor.add(exponent);\n    const subPart = evenTensor.sub(exponent);\n\n    const realTensor = tf.real(addPart).concat(tf.real(subPart));\n    const imagTensor = tf.imag(addPart).concat(tf.imag(subPart));\n\n    return tf.complex(realTensor, imagTensor).as1D();\n  }\n\n  // Calculate fourier transform by multplying sinusoid matrix.\n  private fourierTransformByMatmul(\n      data: TypedArray, size: number, inverse: boolean): TypedArray {\n    const ret = new Float32Array(size * 2);\n    // TODO: Use matmul instead once it supports complex64 type.\n    for (let r = 0; r < size; r++) {\n      let real = 0.0;\n      let imag = 0.0;\n      for (let c = 0; c < size; c++) {\n        const e = backend_util.exponent(r * c, size, inverse);\n        const term = backend_util.getComplexWithIndex(data as Float32Array, c);\n        real += term.real * e.real - term.imag * e.imag;\n        imag += term.real * e.imag + term.imag * e.real;\n      }\n      if (inverse) {\n        real /= size;\n        imag /= size;\n      }\n      backend_util.assignToTypedArray(ret, real, imag, r);\n    }\n    return ret;\n  }\n\n  depthToSpace(x: Tensor4D, blockSize: number, dataFormat: 'NHWC'|'NCHW'):\n      Tensor4D {\n    util.assert(\n        dataFormat === 'NHWC',\n        () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${\n            dataFormat}`);\n    util.assert(\n        blockSize > 1,\n        () =>\n            `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n\n    const batchSize = x.shape[0];\n    const inputHeight = x.shape[1];\n    const inputWidth = x.shape[2];\n    const inputDepth = x.shape[3];\n\n    const outputHeight = inputHeight * blockSize;\n    const outputWidth = inputWidth * blockSize;\n    const outputDepth = inputDepth / (blockSize * blockSize);\n\n    const xValues = this.readSync(x.dataId) as TypedArray;\n    const result =\n        new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n\n    let outputIdx = 0;\n    for (let b = 0; b < batchSize; ++b) {\n      for (let h = 0; h < outputHeight; ++h) {\n        const inH = Math.floor(h / blockSize);\n        const offsetH = (h % blockSize);\n        for (let w = 0; w < outputWidth; ++w) {\n          const inW = Math.floor(w / blockSize);\n          const offsetW = (w % blockSize);\n          const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n          for (let d = 0; d < outputDepth; ++d) {\n            const inD = d + offsetD;\n            const inputIdx =\n                inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n            result[outputIdx++] = xValues[inputIdx];\n          }\n        }\n      }\n    }\n    return tf.tensor4d(\n        result, [batchSize, outputHeight, outputWidth, outputDepth]);\n  }\n\n  private broadcastedBinaryOp(\n      a: Tensor, b: Tensor, dtype: DataType,\n      op: (a: number, b: number) => number): Tensor {\n    const newShape = backend_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    const result = tf.buffer(newShape, dtype);\n    const aVals = this.readSync(a.dataId) as TypedArray;\n    const bVals = this.readSync(b.dataId) as TypedArray;\n    const aBroadcastDims = backend_util.getBroadcastDims(a.shape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(b.shape, newShape);\n\n    const resVals = result.values;\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resVals.length; ++i) {\n        resVals[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      const aBuf = this.bufferSync(a);\n      const bBuf = this.bufferSync(b);\n      for (let i = 0; i < resVals.length; ++i) {\n        const loc = result.indexToLoc(i);\n\n        const aLoc = loc.slice(-a.rank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = aBuf.locToIndex(aLoc);\n\n        const bLoc = loc.slice(-b.rank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = bBuf.locToIndex(bLoc);\n\n        resVals[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n    return result.toTensor();\n  }\n\n  private broadcastedBinaryComplexOp(\n      a: Tensor, b: Tensor,\n      op:\n          (aReal: number, aImag: number, bReal: number,\n           bImag: number) => {real: number, imag: number}): Tensor {\n    const newShape = backend_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    const realResult = tf.buffer(newShape, 'float32');\n    const imagResult = tf.buffer(newShape, 'float32');\n\n    const aVals = this.readSync(a.dataId) as TypedArray;\n    const bVals = this.readSync(b.dataId) as TypedArray;\n    const aBroadcastDims = backend_util.getBroadcastDims(a.shape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(b.shape, newShape);\n\n    const realVals = realResult.values;\n    const imagVals = imagResult.values;\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < realVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n\n        const result =\n            op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2],\n               bVals[bIdx * 2 + 1]);\n\n        realVals[i] = result.real;\n        imagVals[i] = result.imag;\n      }\n    } else {\n      const aRealBuf =\n          this.bufferSync(this.data.get(a.dataId).complexTensors.real);\n      const bRealBuf =\n          this.bufferSync(this.data.get(b.dataId).complexTensors.real);\n      for (let i = 0; i < realVals.length; i++) {\n        const loc = realResult.indexToLoc(i);\n\n        const aLoc = loc.slice(-a.rank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = aRealBuf.locToIndex(aLoc);\n\n        const bLoc = loc.slice(-b.rank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = bRealBuf.locToIndex(bLoc);\n\n        const opResult =\n            op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2],\n               bVals[bIndex * 2 + 1]);\n\n        realVals[i] = opResult.real;\n        imagVals[i] = opResult.imag;\n      }\n    }\n    return this.complex(realResult.toTensor(), imagResult.toTensor());\n  }\n\n  split<T extends Tensor>(x: T, sizeSplits: number[], axis: number): T[] {\n    return split(x, sizeSplits, axis);\n  }\n\n  dispose() {}\n\n  floatPrecision(): 16|32 {\n    return 32;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return super.epsilon();\n  }\n\n  cropAndResize(\n      images: Tensor4D,\n      boxes: Tensor2D,\n      boxIndex: Tensor1D,\n      cropSize: [number, number],\n      method: string,\n      extrapolationValue: number,\n  ) {\n    const [batch, imageHeight, imageWidth, numChannels] = images.shape;\n    const numBoxes = boxes.shape[0];\n\n    const [cropHeight, cropWidth] = cropSize;\n    const output =\n        tf.buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n\n    const boxVals = this.readSync(boxes.dataId) as TypedArray;\n    const boxIndVals = this.readSync(boxIndex.dataId) as TypedArray;\n    const imageVals = this.readSync(images.dataId) as TypedArray;\n\n    const inStride = images.strides;   // to calculate flat indexes into image\n    const outStride = output.strides;  // to calculate flat indexes into output\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n    for (let b = 0; b < numBoxes; b++) {\n      const startInd = b * 4;\n      const y1 = boxVals[startInd];\n      const x1 = boxVals[startInd + 1];\n      const y2 = boxVals[startInd + 2];\n      const x2 = boxVals[startInd + 3];\n\n      const bInd: number = boxIndVals[b];\n      if (bInd >= batch) {\n        continue;\n      }\n\n      const heightScale = (cropHeight > 1) ?\n          (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) :\n          0;\n      const widthScale =\n          (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n      for (let y = 0; y < cropHeight; y++) {\n        const yInd: number = (cropHeight > 1) ?\n            y1 * (imageHeight - 1) + y * (heightScale) :\n            0.5 * (y1 + y2) * (imageHeight - 1);\n\n        if (yInd < 0 || yInd > imageHeight - 1) {\n          for (let x = 0; x < cropWidth; x++) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n          }\n          continue;\n        }\n\n        if (method === 'bilinear') {\n          const topInd = Math.floor(yInd);\n          const bottomInd = Math.ceil(yInd);\n          const yLerp = yInd - topInd;\n\n          for (let x = 0; x < cropWidth; x++) {\n            const xInd = (cropWidth > 1) ?\n                x1 * (imageWidth - 1) + x * widthScale :\n                0.5 * (x1 + x2) * (imageWidth - 1);\n\n            if (xInd < 0 || xInd > imageWidth - 1) {\n              for (let c = 0; c < numChannels; c++) {\n                const ind =\n                    c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                output.values[ind] = extrapolationValue;\n              }\n              continue;\n            }\n\n            const leftInd = Math.floor(xInd);\n            const rightInd = Math.ceil(xInd);\n            const xLerp = xInd - leftInd;\n\n            for (let c = 0; c < numChannels; c++) {\n              let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                  bInd * inStride[0];\n              const topLeft = imageVals[ind];\n\n              ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                  bInd * inStride[0];\n              const topRight = imageVals[ind];\n\n              ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                  bInd * inStride[0];\n              const bottomLeft = imageVals[ind];\n\n              ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                  bInd * inStride[0];\n              const bottomRight = imageVals[ind];\n\n              const top = topLeft + (topRight - topLeft) * xLerp;\n              const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n\n              ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = top + ((bottom - top) * yLerp);\n            }\n          }\n        } else {  // method == \"nearest\"\n          for (let x = 0; x < cropWidth; ++x) {\n            const xInd = (cropWidth > 1) ?\n                x1 * (imageWidth - 1) + x * widthScale :\n                0.5 * (x1 + x2) * (imageWidth - 1);\n\n            if (xInd < 0 || xInd > imageWidth - 1) {\n              for (let c = 0; c < numChannels; c++) {\n                const ind =\n                    c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                output.values[ind] = extrapolationValue;\n              }\n              continue;\n            }\n\n            const closestX = Math.round(xInd);\n            const closestY = Math.round(yInd);\n            for (let c = 0; c < numChannels; c++) {\n              const inInd = c + closestX * inStride[2] +\n                  closestY * inStride[1] + bInd * inStride[0];\n              const outInd =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[outInd] = imageVals[inInd];\n            }\n          }\n        }\n      }\n    }\n    return output.toTensor() as Tensor4D;\n  }\n\n  sparseToDense<R extends Rank>(\n      sparseIndices: Tensor, sparseValues: Tensor, outputShape: ShapeMap[R],\n      defaultValue: Scalar): Tensor<R> {\n    const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n        backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n    const sumDupeIndices = false;\n    return this.scatter(\n        sparseIndices, sparseValues, outputShape, outputSize, sliceSize,\n        numUpdates, sliceRank, strides, defaultValue, sumDupeIndices);\n  }\n\n  gatherND(x: Tensor, indices: Tensor): Tensor {\n    const indicesShape = indices.shape;\n    const sliceRank = indicesShape[indicesShape.length - 1];\n\n    const [resultShape, numSlices, sliceSize, strides] =\n        backend_util.prepareAndValidate(x, indices);\n    if (numSlices === 0) {\n      return tf.tensor([], resultShape, x.dtype);\n    }\n\n    const buffer = new TensorBuffer([numSlices, sliceSize], x.dtype);\n    const indicesData = this.readSync(indices.dataId) as TypedArray;\n    const xData = this.readSync(x.dataId) as TypedArray;\n\n    for (let i = 0; i < numSlices; i++) {\n      const index = [];\n      let flattenIndex = 0;\n      for (let j = 0; j < sliceRank; j++) {\n        const dim = indicesData[i * sliceRank + j];\n        flattenIndex += dim * strides[j];\n        index.push(dim);\n      }\n      if (flattenIndex < 0 || flattenIndex >= x.size / sliceSize) {\n        throw new Error(\n            `Invalid indices: ${index} does not index into ${x.shape}`);\n      }\n\n      for (let k = 0; k < sliceSize; k++) {\n        buffer.values[i * sliceSize + k] = xData[flattenIndex * sliceSize + k];\n      }\n    }\n    return buffer.toTensor().reshape(resultShape);\n  }\n\n  scatterND<R extends Rank>(\n      indices: Tensor, updates: Tensor, shape: ShapeMap[R]): Tensor<R> {\n    const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n        backend_util.calculateShapes(updates, indices, shape);\n    const defaultValue = tf.scalar(0);\n    const sumDupeIndices = true;\n    return this.scatter(\n        indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank,\n        strides, defaultValue, sumDupeIndices);\n  }\n\n  fill<R extends Rank>(\n      shape: ShapeMap[R], value: number|string, dtype?: DataType): Tensor<R> {\n    dtype = dtype || util.inferDtype(value);\n    const values =\n        util.getArrayFromDType(dtype, util.sizeFromShape(shape)) as TypedArray;\n    values.fill(value as number);\n    return engine().makeTensor(values, shape, dtype, this) as Tensor<R>;\n  }\n\n  onesLike<R extends Rank>(x: Tensor<R>): Tensor<R> {\n    if (x.dtype === 'string') {\n      throw new Error('onesLike is not supported for string tensors');\n    } else {\n      return this.fill(x.shape, 1, x.dtype);\n    }\n  }\n\n  zerosLike<R extends Rank>(x: Tensor<R>): Tensor<R> {\n    const values = util.getArrayFromDType(\n                       x.dtype, util.sizeFromShape(x.shape)) as TypedArray;\n    return this.makeOutput(values, x.shape, x.dtype);\n  }\n\n  linspace(start: number, stop: number, num: number): Tensor1D {\n    return backend_util.linspaceImpl(start, stop, num);\n  }\n\n  private scatter<R extends Rank>(\n      indices: Tensor, updates: Tensor, shape: ShapeMap[R], outputSize: number,\n      sliceSize: number, numUpdates: number, sliceRank: number,\n      strides: number[], defaultValue: Scalar,\n      sumDupeIndices: boolean): Tensor<R> {\n    const flattenShape = [outputSize / sliceSize, sliceSize];\n\n    const indicesData = this.readSync(indices.dataId) as TypedArray;\n    const updatesData = this.readSync(updates.dataId) as TypedArray;\n\n    if (outputSize === 0) {\n      return tf.tensor([], shape, updates.dtype);\n    }\n\n    const buffer = new TensorBuffer(flattenShape, updates.dtype as 'float32');\n    buffer.values.fill((this.readSync(defaultValue.dataId) as TypedArray)[0]);\n\n    for (let i = 0; i < numUpdates; i++) {\n      const index = [];\n      let flattenIndex = 0;\n      for (let j = 0; j < sliceRank; j++) {\n        const dim = indicesData[i * sliceRank + j];\n        index.push(dim);\n        flattenIndex += dim * strides[j];\n      }\n\n      if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n        throw new Error(\n            `Invalid indices: ${index} does not index into ${shape}`);\n      }\n\n      for (let k = 0; k < sliceSize; k++) {\n        if (sumDupeIndices) {\n          buffer.values[flattenIndex * sliceSize + k] +=\n              updatesData[i * sliceSize + k];\n        } else {\n          buffer.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n              updatesData[0] :\n              updatesData[i * sliceSize + k];\n        }\n      }\n    }\n    return buffer.toTensor().reshape(shape);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value > max) {\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Shared kernel impls for use in other backends.\nexport {maxImpl} from './kernels/Max_impl';\nexport {transposeImpl} from './kernels/Transpose_impl';\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '2.4.0';\nexport {version};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/*\n * base.ts contains all the exports from tfjs-backend-cpu\n * without auto-kernel registration\n */\nimport {registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from './backend_cpu';\nimport * as shared from './shared';\n\nexport {MathBackendCPU} from './backend_cpu';\nexport {version as version_cpu} from './version';\nexport {shared};\n\n// Side effects for default initialization of MathBackendCPU\nregisterBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, CosInputs, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as CosInputs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'cos');\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xSize = util.sizeFromShape(x.shape);\n    const newValues = new Float32Array(xSize);\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = Math.cos(values[i]);\n    }\n    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter} = inputs as Dilation2DInputs;\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xRank = x.shape.length;\n\n    const filterVals = cpuBackend.data.get(filter.dataId).values as TypedArray;\n    const filterRank = filter.shape.length;\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    const outSize = util.sizeFromShape(outShape);\n    const outRank = outShape.length;\n    const outputVals = util.getArrayFromDType(x.dtype, outSize);\n\n    // Upsampling the input by fill in `dilation size - 1` values between each\n    // input value.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const xIndex = util.locToIndex(\n                        [b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                    const filterIndex = util.locToIndex(\n                        [h, w, d], filterRank,\n                        util.computeStrides(filter.shape));\n                    const val = xVals[xIndex] + filterVals[filterIndex];\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n            const outputIndex = util.locToIndex(\n                [b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n\n    return {dataId, shape: outShape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropFilter, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dBackpropFilterConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropFilter}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed filter gradients has the same dimensions as the filter:\n    // [filterHeight, filterWidth, depth]\n    const gradients = util.makeZerosNestedTypedArray(\n                          filter.shape, filter.dtype) as number[][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hMax = 0;\n            let wMax = 0;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hMax = h;\n                      wMax = w;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);\n\n    return {dataId, shape: filter.shape, dtype: filter.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropInput, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dBackpropInputConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropInput}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed gradients has the same dimensions as the input:\n    // [batch, inputHeight, inputCols, inChannel]\n    const gradients =\n        util.makeZerosNestedTypedArray(x.shape, x.dtype) as number[][][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hInMax = (hBeg < 0) ? 0 : hBeg;\n            let wInMax = (wBeg < 0) ? 0 : wBeg;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hInMax = hIn;\n                      wInMax = wIn;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), x.shape, x.dtype);\n\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BinaryInputs, KernelConfig} from '@tensorflow/tfjs-core';\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {util} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function createBinaryKernelConfig(\n    name: string,\n    op: (\n        aShape: number[], bShape: number[], aVals: TypedArray,\n        bVals: TypedArray,\n        dtype: DataType) => [TypedArray, number[]]): KernelConfig {\n  return {\n    kernelName: name,\n    backendName: 'cpu',\n    kernelFunc: ({inputs, backend}) => {\n      const {a, b} = inputs as BinaryInputs;\n      const cpuBackend = backend as MathBackendCPU;\n      assertNotComplex([a, b], name);\n\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const [resultData, resultShape] =\n          op(a.shape, b.shape, aVals, bVals, a.dtype);\n\n      const dataId = cpuBackend.write(resultData, resultShape, a.dtype);\n      return {dataId, shape: resultShape, dtype: a.dtype};\n    }\n  };\n}\n\nexport function createBinaryKernelImpl(op: (a: number, b: number) => number) {\n  return (aShape: number[], bShape: number[], aVals: TypedArray,\n          bVals: TypedArray, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {createBinaryKernelImpl} from '../utils/kernel_utils';\n\nexport const divImpl = createBinaryKernelImpl((a: number, b: number) => a / b);\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Div} from '@tensorflow/tfjs-core';\nimport {createBinaryKernelConfig} from '../utils/kernel_utils';\nimport {divImpl} from './Div_impl';\n\nexport const divConfig = createBinaryKernelConfig(Div, divImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n\n            const coordX = Math.round(imageWidth - x);\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n\n            let outputValue = imageVals[outIdx];\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth) {\n              // set the output to the image value at the coordinate position.\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'cpu',\n  kernelFunc: identity as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Max, MaxAttrs, MaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig} from '@tensorflow/tfjs-core';\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl} from './Transpose_impl';\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxInputs;\n    const {reductionIndices, keepDims} = attrs as {} as MaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    let xShape = x.shape;\n    const xRank = xShape.length;\n\n    const origAxes = util.parseAxisParam(reductionIndices, xShape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    let xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n    if (permutedAxes != null) {\n      const newShape: number[] = new Array(xRank);\n      for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = xShape[permutedAxes[i]];\n      }\n\n      xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n\n      xShape = newShape;\n    }\n\n    assertNotComplex(x, 'max');\n    backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n    const [maxOutShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(xShape, axes);\n\n    const reduceSize = util.sizeFromShape(reduceShape);\n\n    const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n    const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n\n    let outShape = maxOutShape;\n    if (keepDims) {\n      // reshape\n      const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n      outShape = newShape;\n    }\n\n    return {dataId, shape: outShape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {maxPoolPositions, pool} from '../utils/pool_utils';\nexport function maxPoolWithArgmaxImpl(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    includeBatchInIndex: boolean, convInfo: backend_util.Conv2DInfo) {\n  const strides = util.computeStrides(xShape);\n  const maxPools = pool(xValues, xShape, dtype, strides, convInfo, 'max');\n  const maxPositions = maxPoolPositions(\n      xValues, xShape, dtype, convInfo, true, includeBatchInIndex);\n\n  return [maxPools.values, maxPositions.values];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(\n        values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n\n    const pooledDataId =\n        cpuBackend.write(pooled as Float32Array, convInfo.outShape, x.dtype);\n    const indexesDataId =\n        cpuBackend.write(indexes as Int32Array, convInfo.outShape, x.dtype);\n    return [\n      {dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype},\n      {dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32'}\n    ];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {kernel_impls} from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {boxes, scores} = inputs as NonMaxSuppressionV4Inputs;\n    const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n        attrs as unknown as NonMaxSuppressionV4Attrs;\n\n    const cpuBackend = backend as MathBackendCPU;\n\n    assertNotComplex(boxes, 'NonMaxSuppressionPadded');\n\n    const boxesVals = cpuBackend.data.get(boxes.dataId).values as TypedArray;\n    const scoresVals = cpuBackend.data.get(scores.dataId).values as TypedArray;\n\n    const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n        boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n        padToMaxOutputSize);\n\n    return [selectedIndices, validOutputs];\n  }\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {kernel_impls} from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {boxes, scores} = inputs as NonMaxSuppressionV5Inputs;\n    const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} =\n        attrs as unknown as NonMaxSuppressionV5Attrs;\n\n    const cpuBackend = backend as MathBackendCPU;\n\n    assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n\n    const boxesVals = cpuBackend.data.get(boxes.dataId).values as TypedArray;\n    const scoresVals = cpuBackend.data.get(scores.dataId).values as TypedArray;\n\n    const maxOutputSizeVal = maxOutputSize;\n    const iouThresholdVal = iouThreshold;\n    const scoreThresholdVal = scoreThreshold;\n    const softNmsSigmaVal = softNmsSigma;\n\n    const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n        boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n        scoreThresholdVal, softNmsSigmaVal);\n\n    return [selectedIndices, selectedScores];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function padV2(\n    args: {inputs: PadV2Inputs, backend: MathBackendCPU, attrs: PadV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, constantValue} = attrs;\n\n  assertNotComplex(x, 'pad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xSize = util.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (let i = 0; i < xSize; i++) {\n    const coords = util.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords.map((c, i) => c + start[i]);\n    const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n\n    resVals[outIndex] = xVals[i];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function reshape(\n    args:\n        {inputs: ReshapeInputs, backend: MathBackendCPU, attrs: ReshapeAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'cpu',\n  kernelFunc: reshape as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {backend_util, RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n            const y = coords[1];\n\n            // coordX/coordY are the result of rotating and translating x/y.\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n\n            let outputValue = fillValue;\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            }\n\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue as number;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n\n  assertNotComplex(x, 'transpose');\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n\n  const dataId = backend.write(result, newShape, x.dtype);\n  return {dataId, shape: newShape, dtype: x.dtype};\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'cpu',\n  kernelFunc: transpose as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ReshapeAttrs, ReshapeInputs, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, TransposeAttrs, TransposeInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {padV2Config} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function spaceToBatchND(args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendCPU,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  assertNotComplex([x], 'spaceToBatchND');\n\n  const prod = util.sizeFromShape(blockShape);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...(paddings as Array<[number, number]>));\n\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedX = padV2Config.kernelFunc({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  }) as TensorInfo;\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapeInputs: ReshapeInputs = {x: paddedX};\n  const reshapeAttrs: ReshapeAttrs = {shape: reshapedPaddedShape};\n  const paddedXReshaped =\n      reshape({inputs: reshapeInputs, backend, attrs: reshapeAttrs});\n\n  const transposeInputs: TransposeInputs = {x: paddedXReshaped};\n  const transposeAttrs:\n      TransposeAttrs = {perm: permutedReshapedPaddedPermutation};\n  const paddedXT =\n      transpose({inputs: transposeInputs, backend, attrs: transposeAttrs});\n\n  const resultReshapeInputs: ReshapeInputs = {x: paddedXT};\n  const resultReshapeAttrs: ReshapeAttrs = {shape: flattenShape};\n  const result = reshape(\n      {inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs});\n\n  backend.disposeIntermediateTensorInfo(paddedX);\n  backend.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend.disposeIntermediateTensorInfo(paddedXT);\n\n  return result;\n}\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'cpu',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Square, SquareInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'square');\n\n    const values = cpuBackend.data.get(x.dataId).values as Float32Array;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = value * value;\n    }\n    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {SquaredDifference} from '@tensorflow/tfjs-core';\nimport {createBinaryKernelImpl} from '../utils/kernel_utils';\nimport {createBinaryKernelConfig} from '../utils/kernel_utils';\n\nconst squaredDifferenceImpl = createBinaryKernelImpl((aVal, bVal) => {\n  const diff = aVal - bVal;\n  return diff * diff;\n});\n\nexport const squaredDifferenceConfig =\n    createBinaryKernelConfig(SquaredDifference, squaredDifferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {cosConfig} from './kernels/Cos';\nimport {dilation2dConfig} from './kernels/Dilation2D';\nimport {dilation2dBackpropFilterConfig} from './kernels/Dilation2DBackpropFilter';\nimport {dilation2dBackpropInputConfig} from './kernels/Dilation2DBackpropInput';\nimport {divConfig} from './kernels/Div';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {identityConfig} from './kernels/Identity';\nimport {maxConfig} from './kernels/Max';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {padV2Config} from './kernels/PadV2';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {transposeConfig} from './kernels/Transpose';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  cosConfig, dilation2dConfig, dilation2dBackpropInputConfig,\n  dilation2dBackpropFilterConfig, divConfig, flipLeftRightConfig,\n  identityConfig, maxPoolWithArgmaxConfig, maxConfig, nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config, padV2Config, reshapeConfig, rotateWithOffsetConfig,\n  spaceToBatchNDConfig, squareConfig, squaredDifferenceConfig, transposeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n"],"names":["util","buffer","kernel_impls","tslib_1.__extends","DataStorage","engine","env","backend_util","tf.buffer","slice_util","tf.tensor","tf.real","tf.imag","tf.complex","tf.scalar","upcastType","max","tf.div","tf.zeros","tf.equal","tf.stack","tf.transpose","tf.tensor4d","tf.softmax","seedrandom.alea","tf.tensor2d","TensorBuffer","KernelBackend","registerBackend","Cos","Dilation2D","Dilation2DBackpropFilter","Dilation2DBackpropInput","Div","FlipLeftRight","Identity","Max","MaxPoolWithArgmax","NonMaxSuppressionV4","NonMaxSuppressionV5","PadV2","Reshape","RotateWithOffset","Transpose","SpaceToBatchND","Square","SquaredDifference","registerKernel"],"mappings":"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"}