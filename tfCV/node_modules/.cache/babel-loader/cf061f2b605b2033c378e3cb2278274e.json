{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\nimport { tensor } from '../ops/tensor';\nimport { getTypedArrayFromDType } from '../util';\nexport function topkImpl(x, xShape, xDtype, k, sorted) {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n    const valAndInd = [];\n\n    for (let i = 0; i < vals.length; i++) {\n      valAndInd.push({\n        value: vals[i],\n        index: i\n      });\n    }\n\n    valAndInd.sort((a, b) => b.value - a.value);\n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  } // Reshape back to the original input shape, except that the last\n  // dimension is k.\n\n\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n  return [tensor(allTopKVals, outputShape, xDtype), tensor(allTopKIndices, outputShape, 'int32')];\n}","map":{"version":3,"sources":["../../src/backends/topk_impl.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAiBA;AAEA,SAAQ,MAAR,QAAqB,eAArB;AAGA,SAAQ,sBAAR,QAAqC,SAArC;AAEA,OAAM,SAAU,QAAV,CACF,CADE,EACa,MADb,EAC+B,MAD/B,EACwD,CADxD,EAEF,MAFE,EAEa;AACjB;AACA,QAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,MAAP,GAAgB,CAAjB,CAAtB;AACA,QAAM,CAAC,KAAD,EAAQ,IAAR,IAAgB,CAAC,CAAC,CAAC,MAAF,GAAW,OAAZ,EAAqB,OAArB,CAAtB;AACA,QAAM,WAAW,GAAG,sBAAsB,CAAC,MAAD,EAAS,KAAK,GAAG,CAAjB,CAA1C;AACA,QAAM,cAAc,GAAG,sBAAsB,CAAC,OAAD,EAAU,KAAK,GAAG,CAAlB,CAA7C;;AAEA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAApB,EAA2B,CAAC,EAA5B,EAAgC;AAC9B,UAAM,MAAM,GAAG,CAAC,GAAG,IAAnB;AACA,UAAM,IAAI,GAAG,CAAC,CAAC,QAAF,CAAW,MAAX,EAAmB,MAAM,GAAG,IAA5B,CAAb;AACA,UAAM,SAAS,GAA0C,EAAzD;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,CAAC,EAAlC,EAAsC;AACpC,MAAA,SAAS,CAAC,IAAV,CAAe;AAAC,QAAA,KAAK,EAAE,IAAI,CAAC,CAAD,CAAZ;AAAiB,QAAA,KAAK,EAAE;AAAxB,OAAf;AACD;;AACD,IAAA,SAAS,CAAC,IAAV,CAAe,CAAC,CAAD,EAAI,CAAJ,KAAU,CAAC,CAAC,KAAF,GAAU,CAAC,CAAC,KAArC;AAEA,UAAM,SAAS,GAAG,CAAC,GAAG,CAAtB;AACA,UAAM,QAAQ,GAAG,WAAW,CAAC,QAAZ,CAAqB,SAArB,EAAgC,SAAS,GAAG,CAA5C,CAAjB;AACA,UAAM,WAAW,GAAG,cAAc,CAAC,QAAf,CAAwB,SAAxB,EAAmC,SAAS,GAAG,CAA/C,CAApB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AAC1B,MAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,SAAS,CAAC,CAAD,CAAT,CAAa,KAA3B;AACA,MAAA,WAAW,CAAC,CAAD,CAAX,GAAiB,SAAS,CAAC,CAAD,CAAT,CAAa,KAA9B;AACD;AACF,GAvBgB,CAwBjB;AACA;;;AACA,QAAM,WAAW,GAAG,MAAM,CAAC,KAAP,EAApB;AACA,EAAA,WAAW,CAAC,WAAW,CAAC,MAAZ,GAAqB,CAAtB,CAAX,GAAsC,CAAtC;AACA,SAAO,CACL,MAAM,CAAC,WAAD,EAAc,WAAd,EAA2B,MAA3B,CADD,EAEL,MAAM,CAAC,cAAD,EAAiB,WAAjB,EAA8B,OAA9B,CAFD,CAAP;AAID","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/** An implementation of the TopK kernel shared between webgl and cpu. */\nimport { tensor } from '../ops/tensor';\nimport { getTypedArrayFromDType } from '../util';\nexport function topkImpl(x, xShape, xDtype, k, sorted) {\n    // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n    const lastDim = xShape[xShape.length - 1];\n    const [batch, size] = [x.length / lastDim, lastDim];\n    const allTopKVals = getTypedArrayFromDType(xDtype, batch * k);\n    const allTopKIndices = getTypedArrayFromDType('int32', batch * k);\n    for (let b = 0; b < batch; b++) {\n        const offset = b * size;\n        const vals = x.subarray(offset, offset + size);\n        const valAndInd = [];\n        for (let i = 0; i < vals.length; i++) {\n            valAndInd.push({ value: vals[i], index: i });\n        }\n        valAndInd.sort((a, b) => b.value - a.value);\n        const outOffset = b * k;\n        const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n        const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n        for (let i = 0; i < k; i++) {\n            topKVals[i] = valAndInd[i].value;\n            topKIndices[i] = valAndInd[i].index;\n        }\n    }\n    // Reshape back to the original input shape, except that the last\n    // dimension is k.\n    const outputShape = xShape.slice();\n    outputShape[outputShape.length - 1] = k;\n    return [\n        tensor(allTopKVals, outputShape, xDtype),\n        tensor(allTopKIndices, outputShape, 'int32')\n    ];\n}\n//# sourceMappingURL=topk_impl.js.map"]},"metadata":{},"sourceType":"module"}