{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { deprecationWarn } from '../globals';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertShapesMatch } from '../util';\nimport { equal } from './equal';\nimport { greater } from './greater';\nimport { greaterEqual } from './greater_equal';\nimport { less } from './less';\nimport { lessEqual } from './less_equal';\nimport { notEqual } from './not_equal';\nimport { op } from './operation';\n/**\n * @deprecated\n * Strict version of `tf.notEqual` that forces `a` and `b` to be of the same\n * shape.\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same shape and dtype as\n *     `a`.\n */\n\nfunction notEqualStrict_(a, b) {\n  deprecationWarn('strict variants of ops have been deprecated ' + 'and will be removed in future');\n  const $a = convertToTensor(a, 'a', 'notEqualStrict');\n  const $b = convertToTensor(b, 'b', 'notEqualStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in notEqualStrict: ');\n  return notEqual($a, $b);\n}\n/**\n * @deprecated\n * Strict version of `tf.less` that forces `a` and `b` to be of the same\n * shape.\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same shape and dtype as\n *     `a`.\n */\n\n\nfunction lessStrict_(a, b) {\n  deprecationWarn('strict variants of ops have been deprecated ' + 'and will be removed in future');\n  const $a = convertToTensor(a, 'a', 'lessStrict');\n  const $b = convertToTensor(b, 'b', 'lessStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in lessStrict: ');\n  return less($a, $b);\n}\n\nfunction equalStrict_(a, b) {\n  deprecationWarn('strict variants of ops have been deprecated ' + 'and will be removed in future');\n  const $a = convertToTensor(a, 'a', 'equalStrict');\n  const $b = convertToTensor(b, 'b', 'equalStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in equalStrict: ');\n  return equal($a, $b);\n}\n\nfunction lessEqualStrict_(a, b) {\n  deprecationWarn('strict variants of ops have been deprecated ' + 'and will be removed in future');\n  const $a = convertToTensor(a, 'a', 'lessEqualStrict');\n  const $b = convertToTensor(b, 'b', 'lessEqualStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in lessEqualStrict: ');\n  return lessEqual($a, $b);\n}\n\nfunction greaterStrict_(a, b) {\n  deprecationWarn('strict variants of ops have been deprecated ' + 'and will be removed in future');\n  const $a = convertToTensor(a, 'a', 'greaterStrict');\n  const $b = convertToTensor(b, 'b', 'greaterStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in greaterStrict: ');\n  return greater($a, $b);\n}\n\nfunction greaterEqualStrict_(a, b) {\n  deprecationWarn('strict variants of ops have been deprecated ' + 'and will be removed in future');\n  const $a = convertToTensor(a, 'a', 'greaterEqualStrict');\n  const $b = convertToTensor(b, 'b', 'greaterEqualStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in greaterEqualStrict: ');\n  return greaterEqual($a, $b);\n}\n\nexport const equalStrict = op({\n  equalStrict_\n});\nexport const greaterEqualStrict = op({\n  greaterEqualStrict_\n});\nexport const greaterStrict = op({\n  greaterStrict_\n});\nexport const lessEqualStrict = op({\n  lessEqualStrict_\n});\nexport const lessStrict = op({\n  lessStrict_\n});\nexport const notEqualStrict = op({\n  notEqualStrict_\n});","map":{"version":3,"sources":["../../src/ops/compare.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { deprecationWarn } from '../globals';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertShapesMatch } from '../util';\nimport { equal } from './equal';\nimport { greater } from './greater';\nimport { greaterEqual } from './greater_equal';\nimport { less } from './less';\nimport { lessEqual } from './less_equal';\nimport { notEqual } from './not_equal';\nimport { op } from './operation';\n/**\n * @deprecated\n * Strict version of `tf.notEqual` that forces `a` and `b` to be of the same\n * shape.\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same shape and dtype as\n *     `a`.\n */\nfunction notEqualStrict_(a, b) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    const $a = convertToTensor(a, 'a', 'notEqualStrict');\n    const $b = convertToTensor(b, 'b', 'notEqualStrict');\n    assertShapesMatch($a.shape, $b.shape, 'Error in notEqualStrict: ');\n    return notEqual($a, $b);\n}\n/**\n * @deprecated\n * Strict version of `tf.less` that forces `a` and `b` to be of the same\n * shape.\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same shape and dtype as\n *     `a`.\n */\nfunction lessStrict_(a, b) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    const $a = convertToTensor(a, 'a', 'lessStrict');\n    const $b = convertToTensor(b, 'b', 'lessStrict');\n    assertShapesMatch($a.shape, $b.shape, 'Error in lessStrict: ');\n    return less($a, $b);\n}\nfunction equalStrict_(a, b) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    const $a = convertToTensor(a, 'a', 'equalStrict');\n    const $b = convertToTensor(b, 'b', 'equalStrict');\n    assertShapesMatch($a.shape, $b.shape, 'Error in equalStrict: ');\n    return equal($a, $b);\n}\nfunction lessEqualStrict_(a, b) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    const $a = convertToTensor(a, 'a', 'lessEqualStrict');\n    const $b = convertToTensor(b, 'b', 'lessEqualStrict');\n    assertShapesMatch($a.shape, $b.shape, 'Error in lessEqualStrict: ');\n    return lessEqual($a, $b);\n}\nfunction greaterStrict_(a, b) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    const $a = convertToTensor(a, 'a', 'greaterStrict');\n    const $b = convertToTensor(b, 'b', 'greaterStrict');\n    assertShapesMatch($a.shape, $b.shape, 'Error in greaterStrict: ');\n    return greater($a, $b);\n}\nfunction greaterEqualStrict_(a, b) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    const $a = convertToTensor(a, 'a', 'greaterEqualStrict');\n    const $b = convertToTensor(b, 'b', 'greaterEqualStrict');\n    assertShapesMatch($a.shape, $b.shape, 'Error in greaterEqualStrict: ');\n    return greaterEqual($a, $b);\n}\nexport const equalStrict = op({ equalStrict_ });\nexport const greaterEqualStrict = op({ greaterEqualStrict_ });\nexport const greaterStrict = op({ greaterStrict_ });\nexport const lessEqualStrict = op({ lessEqualStrict_ });\nexport const lessStrict = op({ lessStrict_ });\nexport const notEqualStrict = op({ notEqualStrict_ });\n//# sourceMappingURL=compare.js.map"]},"metadata":{},"sourceType":"module"}