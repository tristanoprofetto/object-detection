{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n/** Convenient class for storing tensor-related data. */\n\nexport class DataStorage {\n  constructor(backend, dataMover) {\n    this.backend = backend;\n    this.dataMover = dataMover;\n    this.data = new WeakMap();\n    this.dataIdsCount = 0;\n  }\n\n  get(dataId) {\n    if (!this.data.has(dataId)) {\n      this.dataMover.moveData(this.backend, dataId);\n    }\n\n    return this.data.get(dataId);\n  }\n\n  set(dataId, value) {\n    this.dataIdsCount++;\n    this.data.set(dataId, value);\n  }\n\n  has(dataId) {\n    return this.data.has(dataId);\n  }\n\n  delete(dataId) {\n    this.dataIdsCount--;\n    return this.data.delete(dataId);\n  }\n\n  numDataIds() {\n    return this.dataIdsCount;\n  }\n\n}\n/**\n * The interface that defines the kernels that should be implemented when\n * adding a new backend. New backends don't need to implement every one of the\n * methods, this can be done gradually (throw an error for unimplemented\n * methods).\n */\n\nexport class KernelBackend {\n  time(f) {\n    return notYetImplemented('time');\n  }\n\n  read(dataId) {\n    return notYetImplemented('read');\n  }\n\n  readSync(dataId) {\n    return notYetImplemented('readSync');\n  }\n\n  numDataIds() {\n    return notYetImplemented('numDataIds');\n  }\n\n  disposeData(dataId) {\n    return notYetImplemented('disposeData');\n  }\n\n  write(values, shape, dtype) {\n    return notYetImplemented('write');\n  }\n\n  move(dataId, values, shape, dtype) {\n    return notYetImplemented('move');\n  }\n\n  memory() {\n    return notYetImplemented('memory');\n  }\n  /** Returns the highest precision for floats in bits (e.g. 16 or 32) */\n\n\n  floatPrecision() {\n    return notYetImplemented('floatPrecision');\n  }\n  /** Returns the smallest representable number.  */\n\n\n  epsilon() {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  batchMatMul(a, b, transposeA, transposeB) {\n    return notYetImplemented('batchMatMul');\n  }\n\n  fusedBatchMatMul({\n    a,\n    b,\n    transposeA,\n    transposeB,\n    bias,\n    activation,\n    preluActivationWeights\n  }) {\n    return notYetImplemented('fusedBatchMatMul');\n  }\n\n  slice(x, begin, size) {\n    return notYetImplemented('slice');\n  }\n\n  stridedSlice(x, begin, end, strides) {\n    return notYetImplemented('stridedSlice');\n  }\n\n  unstack(x, axis) {\n    return notYetImplemented('unstack');\n  }\n\n  reverse(a, axis) {\n    return notYetImplemented('reverse');\n  }\n\n  concat(tensors, axis) {\n    return notYetImplemented('concat');\n  }\n\n  neg(a) {\n    return notYetImplemented('neg');\n  }\n\n  add(a, b) {\n    return notYetImplemented('add');\n  }\n\n  addN(tensors) {\n    return notYetImplemented('addN');\n  }\n\n  subtract(a, b) {\n    return notYetImplemented('subtract');\n  }\n\n  multiply(a, b) {\n    return notYetImplemented('multiply');\n  }\n\n  realDivide(a, b) {\n    return notYetImplemented('realDivide');\n  }\n\n  floorDiv(a, b) {\n    return notYetImplemented('floorDiv');\n  }\n\n  sum(x, axes) {\n    return notYetImplemented('sum');\n  }\n\n  prod(x, axes) {\n    return notYetImplemented('prod');\n  }\n\n  unsortedSegmentSum(x, segmentIds, numSegments) {\n    return notYetImplemented('unsortedSegmentSum');\n  }\n\n  argMin(x, axis) {\n    return notYetImplemented('argMin');\n  }\n\n  argMax(x, axis) {\n    return notYetImplemented('argMax');\n  }\n\n  equal(a, b) {\n    return notYetImplemented('equal');\n  }\n\n  notEqual(a, b) {\n    return notYetImplemented('notEqual');\n  }\n\n  less(a, b) {\n    return notYetImplemented('less');\n  }\n\n  lessEqual(a, b) {\n    return notYetImplemented('lessEqual');\n  }\n\n  greater(a, b) {\n    return notYetImplemented('greater');\n  }\n\n  greaterEqual(a, b) {\n    return notYetImplemented('greaterEqual');\n  }\n\n  logicalNot(a) {\n    return notYetImplemented('logicalNot');\n  }\n\n  logicalAnd(a, b) {\n    return notYetImplemented('logicalAnd');\n  }\n\n  logicalOr(a, b) {\n    return notYetImplemented('logicalOr');\n  }\n\n  where(condition) {\n    return notYetImplemented('where');\n  }\n\n  select(condition, a, b) {\n    return notYetImplemented('select');\n  }\n\n  topk(x, k, sorted) {\n    return notYetImplemented('topk');\n  }\n\n  min(x, axes) {\n    return notYetImplemented('min');\n  }\n\n  minimum(a, b) {\n    return notYetImplemented('minimum');\n  }\n\n  mod(a, b) {\n    return notYetImplemented('mod');\n  }\n\n  max(x, axes) {\n    return notYetImplemented('max');\n  }\n\n  maximum(a, b) {\n    return notYetImplemented('maximum');\n  }\n\n  all(x, axes) {\n    return notYetImplemented('all');\n  }\n\n  any(x, axes) {\n    return notYetImplemented('any');\n  }\n\n  squaredDifference(a, b) {\n    return notYetImplemented('squaredDifference');\n  }\n\n  ceil(x) {\n    return notYetImplemented('ceil');\n  }\n\n  floor(x) {\n    return notYetImplemented('floor');\n  }\n\n  round(x) {\n    return notYetImplemented('round');\n  }\n\n  sign(x) {\n    return notYetImplemented('sign');\n  }\n\n  isNaN(x) {\n    return notYetImplemented('isNaN');\n  }\n\n  isInf(x) {\n    return notYetImplemented('isInf');\n  }\n\n  isFinite(x) {\n    return notYetImplemented('isFinite');\n  }\n\n  pow(a, b) {\n    return notYetImplemented('pow');\n  }\n\n  exp(x) {\n    return notYetImplemented('exp');\n  }\n\n  expm1(x) {\n    return notYetImplemented('expm1');\n  }\n\n  softmax(x, dim) {\n    return notYetImplemented('softmax');\n  }\n\n  log(x) {\n    return notYetImplemented('log');\n  }\n\n  log1p(x) {\n    return notYetImplemented('log1p');\n  }\n\n  sqrt(x) {\n    return notYetImplemented('sqrt');\n  }\n\n  rsqrt(x) {\n    return notYetImplemented('rsqrt');\n  }\n\n  square(x) {\n    return notYetImplemented('square');\n  }\n\n  reciprocal(x) {\n    return notYetImplemented('reciprocal');\n  }\n\n  relu(x) {\n    return notYetImplemented('relu');\n  }\n\n  relu6(x) {\n    return notYetImplemented('relu6');\n  }\n\n  prelu(x, a) {\n    return notYetImplemented('prelu');\n  }\n\n  elu(x) {\n    return notYetImplemented('elu');\n  }\n\n  eluDer(dy, y) {\n    return notYetImplemented('eluDer');\n  }\n\n  selu(x) {\n    return notYetImplemented('selu');\n  }\n\n  int(x) {\n    return notYetImplemented('int');\n  }\n\n  clip(x, min, max) {\n    return notYetImplemented('clip');\n  }\n\n  abs(x) {\n    return notYetImplemented('abs');\n  }\n\n  complexAbs(x) {\n    return notYetImplemented('complexAbs');\n  }\n\n  sigmoid(x) {\n    return notYetImplemented('sigmoid');\n  }\n\n  softplus(x) {\n    return notYetImplemented('softplus');\n  }\n\n  sin(x) {\n    return notYetImplemented('sin');\n  }\n\n  cos(x) {\n    return notYetImplemented('cos');\n  }\n\n  tan(x) {\n    return notYetImplemented('tan');\n  }\n\n  asin(x) {\n    return notYetImplemented('asin');\n  }\n\n  acos(x) {\n    return notYetImplemented('acos');\n  }\n\n  atan(x) {\n    return notYetImplemented('atan');\n  }\n\n  atan2(a, b) {\n    return notYetImplemented('atan2');\n  }\n\n  sinh(x) {\n    return notYetImplemented('sinh');\n  }\n\n  cosh(x) {\n    return notYetImplemented('cosh');\n  }\n\n  tanh(x) {\n    return notYetImplemented('tanh');\n  }\n\n  asinh(x) {\n    return notYetImplemented('asinh');\n  }\n\n  acosh(x) {\n    return notYetImplemented('acosh');\n  }\n\n  atanh(x) {\n    return notYetImplemented('atanh');\n  }\n\n  erf(x) {\n    return notYetImplemented('erf');\n  }\n\n  step(x, alpha) {\n    return notYetImplemented('step');\n  }\n\n  fusedConv2d({\n    input,\n    filter,\n    convInfo,\n    bias,\n    activation,\n    preluActivationWeights\n  }) {\n    return notYetImplemented('fusedConv2d');\n  }\n\n  conv2d(x, filter, convInfo) {\n    return notYetImplemented('conv2d');\n  }\n\n  conv2dDerInput(dy, filter, convInfo) {\n    return notYetImplemented('conv2dDerInput');\n  }\n\n  conv2dDerFilter(x, dY, convInfo) {\n    return notYetImplemented('conv2dDerFilter');\n  }\n\n  fusedDepthwiseConv2D({\n    input,\n    filter,\n    convInfo,\n    bias,\n    activation,\n    preluActivationWeights\n  }) {\n    return notYetImplemented('fusedDepthwiseConv2D');\n  }\n\n  depthwiseConv2D(input, filter, convInfo) {\n    return notYetImplemented('depthwiseConv2D');\n  }\n\n  depthwiseConv2DDerInput(dy, filter, convInfo) {\n    return notYetImplemented('depthwiseConv2DDerInput');\n  }\n\n  depthwiseConv2DDerFilter(x, dY, convInfo) {\n    return notYetImplemented('depthwiseConv2DDerFilter');\n  }\n\n  conv3d(x, filter, convInfo) {\n    return notYetImplemented('conv3d');\n  }\n\n  conv3dDerInput(dy, filter, convInfo) {\n    return notYetImplemented('conv3dDerInput');\n  }\n\n  conv3dDerFilter(x, dY, convInfo) {\n    return notYetImplemented('conv3dDerFilter');\n  }\n\n  maxPool(x, convInfo) {\n    return notYetImplemented('maxPool');\n  }\n\n  maxPoolBackprop(dy, x, y, convInfo) {\n    return notYetImplemented('maxPoolBackprop');\n  }\n\n  avgPool(x, convInfo) {\n    return notYetImplemented('avgPool');\n  }\n\n  avgPoolBackprop(dy, x, convInfo) {\n    return notYetImplemented('avgPoolBackprop');\n  }\n\n  avgPool3d(x, convInfo) {\n    return notYetImplemented('avgPool3d');\n  }\n\n  avgPool3dBackprop(dy, x, convInfo) {\n    return notYetImplemented('avgPool3dBackprop');\n  }\n\n  maxPool3d(x, convInfo) {\n    return notYetImplemented('maxPool3d');\n  }\n\n  maxPool3dBackprop(dy, x, y, convInfo) {\n    return notYetImplemented('maxPool3dBackprop');\n  }\n\n  reshape(x, shape) {\n    return notYetImplemented('reshape');\n  }\n\n  cast(x, dtype) {\n    return notYetImplemented('cast');\n  }\n\n  tile(x, reps) {\n    return notYetImplemented('tile');\n  }\n\n  pad(x, paddings, constantValue) {\n    return notYetImplemented('pad');\n  }\n\n  transpose(x, perm) {\n    return notYetImplemented('transpose');\n  }\n\n  gather(x, indices, axis) {\n    return notYetImplemented('gather');\n  }\n\n  gatherND(x, indices) {\n    return notYetImplemented('gatherND');\n  }\n\n  scatterND(indices, updates, shape) {\n    return notYetImplemented('scatterND');\n  }\n\n  batchToSpaceND(x, blockShape, crops) {\n    return notYetImplemented('batchToSpaceND');\n  }\n\n  spaceToBatchND(x, blockShape, paddings) {\n    return notYetImplemented('spaceToBatchND');\n  }\n\n  resizeBilinear(x, newHeight, newWidth, alignCorners) {\n    return notYetImplemented('resizeBilinear');\n  }\n\n  resizeBilinearBackprop(dy, x, alignCorners) {\n    return notYetImplemented('resizeBilinearBackprop');\n  }\n\n  resizeNearestNeighbor(x, newHEight, newWidth, alignCorners) {\n    return notYetImplemented('resizeNearestNeighbor');\n  }\n\n  resizeNearestNeighborBackprop(dy, x, alignCorners) {\n    return notYetImplemented('resizeNearestNeighborBackprop');\n  }\n\n  batchNorm(x, mean, variance, offset, scale, varianceEpsilon) {\n    return notYetImplemented('batchNorm');\n  }\n\n  localResponseNormalization4D(x, radius, bias, alpha, beta) {\n    return notYetImplemented('localResponseNormalization4D');\n  }\n\n  LRNGrad(dy, inputImage, outputImage, radius, bias, alpha, beta) {\n    return notYetImplemented('LRNGrad');\n  }\n\n  multinomial(logits, normalized, numSamples, seed) {\n    return notYetImplemented('multinomial');\n  }\n\n  oneHot(indices, depth, onValue, offValue) {\n    return notYetImplemented('oneHot');\n  }\n\n  cumsum(x, axis, exclusive, reverse) {\n    return notYetImplemented('cumsum');\n  }\n\n  nonMaxSuppression(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {\n    return notYetImplemented('nonMaxSuppression');\n  }\n\n  fft(x) {\n    return notYetImplemented('fft');\n  }\n\n  ifft(x) {\n    return notYetImplemented('ifft');\n  }\n\n  complex(real, imag) {\n    return notYetImplemented('complex');\n  }\n\n  real(input) {\n    return notYetImplemented('real');\n  }\n\n  imag(input) {\n    return notYetImplemented('imag');\n  }\n\n  cropAndResize(image, boxes, boxIndex, cropSize, method, extrapolationValue) {\n    return notYetImplemented('cropAndResize');\n  }\n\n  depthToSpace(x, blockSize, dataFormat) {\n    return notYetImplemented('depthToSpace');\n  } // Aligns with the \"SplitV\" kernel in TensorFlow.\n\n\n  split(value, sizeSplits, axis) {\n    return notYetImplemented('split');\n  }\n\n  sparseToDense(sparseIndices, sparseValues, outputShape, defaultValue) {\n    return notYetImplemented('sparseToDense');\n  }\n\n  diag(x) {\n    return notYetImplemented('diag');\n  }\n\n  fill(shape, value, dtype) {\n    return notYetImplemented('fill');\n  }\n\n  onesLike(x) {\n    return notYetImplemented('onesLike');\n  }\n\n  zerosLike(x) {\n    return notYetImplemented('zerosLike');\n  }\n\n  linspace(start, stop, num) {\n    return notYetImplemented('linspace');\n  }\n\n  dispose() {\n    return notYetImplemented('dispose');\n  }\n\n}\n\nfunction notYetImplemented(kernelName) {\n  throw new Error(`'${kernelName}' not yet implemented or not found in the registry. ` + `Did you forget to import the kernel?`);\n}","map":{"version":3,"sources":["../../src/backends/backend.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAsBA,OAAO,MAAM,eAAe,GAAG,IAAxB;AACP,OAAO,MAAM,eAAe,GAAG,IAAxB;AAqBP;;AACA,OAAM,MAAO,WAAP,CAAkB;AAItB,EAAA,WAAA,CAAoB,OAApB,EAAoD,SAApD,EAAwE;AAApD,SAAA,OAAA,GAAA,OAAA;AAAgC,SAAA,SAAA,GAAA,SAAA;AAH5C,SAAA,IAAA,GAAO,IAAI,OAAJ,EAAP;AACA,SAAA,YAAA,GAAe,CAAf;AAEoE;;AAE5E,EAAA,GAAG,CAAC,MAAD,EAAe;AAChB,QAAI,CAAC,KAAK,IAAL,CAAU,GAAV,CAAc,MAAd,CAAL,EAA4B;AAC1B,WAAK,SAAL,CAAe,QAAf,CAAwB,KAAK,OAA7B,EAAsC,MAAtC;AACD;;AACD,WAAO,KAAK,IAAL,CAAU,GAAV,CAAc,MAAd,CAAP;AACD;;AAED,EAAA,GAAG,CAAC,MAAD,EAAiB,KAAjB,EAAyB;AAC1B,SAAK,YAAL;AACA,SAAK,IAAL,CAAU,GAAV,CAAc,MAAd,EAAsB,KAAtB;AACD;;AAED,EAAA,GAAG,CAAC,MAAD,EAAe;AAChB,WAAO,KAAK,IAAL,CAAU,GAAV,CAAc,MAAd,CAAP;AACD;;AAED,EAAA,MAAM,CAAC,MAAD,EAAe;AACnB,SAAK,YAAL;AACA,WAAO,KAAK,IAAL,CAAU,MAAV,CAAiB,MAAjB,CAAP;AACD;;AAED,EAAA,UAAU,GAAA;AACR,WAAO,KAAK,YAAZ;AACD;;AA7BqB;AA6CxB;;;;;;;AAMA,OAAM,MAAO,aAAP,CAAoB;AACxB,EAAA,IAAI,CAAC,CAAD,EAAc;AAChB,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AACD,EAAA,IAAI,CAAC,MAAD,EAAe;AACjB,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AACD,EAAA,QAAQ,CAAC,MAAD,EAAe;AACrB,WAAO,iBAAiB,CAAC,UAAD,CAAxB;AACD;;AACD,EAAA,UAAU,GAAA;AACR,WAAO,iBAAiB,CAAC,YAAD,CAAxB;AACD;;AACD,EAAA,WAAW,CAAC,MAAD,EAAe;AACxB,WAAO,iBAAiB,CAAC,aAAD,CAAxB;AACD;;AACD,EAAA,KAAK,CAAC,MAAD,EAAwB,KAAxB,EAAyC,KAAzC,EAAwD;AAC3D,WAAO,iBAAiB,CAAC,OAAD,CAAxB;AACD;;AACD,EAAA,IAAI,CAAC,MAAD,EAAiB,MAAjB,EAAwC,KAAxC,EAAyD,KAAzD,EAAwE;AAE1E,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AACD,EAAA,MAAM,GAAA;AACJ,WAAO,iBAAiB,CAAC,QAAD,CAAxB;AACD;AACD;;;AACA,EAAA,cAAc,GAAA;AACZ,WAAO,iBAAiB,CAAC,gBAAD,CAAxB;AACD;AACD;;;AACA,EAAA,OAAO,GAAA;AACL,WAAO,KAAK,cAAL,OAA0B,EAA1B,GAA+B,eAA/B,GAAiD,eAAxD;AACD;;AAED,EAAA,WAAW,CACP,CADO,EACM,CADN,EACmB,UADnB,EAEP,UAFO,EAEY;AACrB,WAAO,iBAAiB,CAAC,aAAD,CAAxB;AACD;;AAED,EAAA,gBAAgB,CACZ;AAAC,IAAA,CAAD;AAAI,IAAA,CAAJ;AAAO,IAAA,UAAP;AAAmB,IAAA,UAAnB;AAA+B,IAAA,IAA/B;AAAqC,IAAA,UAArC;AAAiD,IAAA;AAAjD,GADY,EAEc;AAC5B,WAAO,iBAAiB,CAAC,kBAAD,CAAxB;AACD;;AAED,EAAA,KAAK,CAAmB,CAAnB,EAAyB,KAAzB,EAA0C,IAA1C,EAAwD;AAC3D,WAAO,iBAAiB,CAAC,OAAD,CAAxB;AACD;;AACD,EAAA,YAAY,CACR,CADQ,EACF,KADE,EACe,GADf,EAC8B,OAD9B,EAC+C;AACzD,WAAO,iBAAiB,CAAC,cAAD,CAAxB;AACD;;AACD,EAAA,OAAO,CAAC,CAAD,EAAY,IAAZ,EAAwB;AAC7B,WAAO,iBAAiB,CAAC,SAAD,CAAxB;AACD;;AACD,EAAA,OAAO,CAAmB,CAAnB,EAAyB,IAAzB,EAAuC;AAC5C,WAAO,iBAAiB,CAAC,SAAD,CAAxB;AACD;;AAED,EAAA,MAAM,CAAC,OAAD,EAAoB,IAApB,EAAgC;AACpC,WAAO,iBAAiB,CAAC,QAAD,CAAxB;AACD;;AAED,EAAA,GAAG,CAAmB,CAAnB,EAAuB;AACxB,WAAO,iBAAiB,CAAC,KAAD,CAAxB;AACD;;AAED,EAAA,GAAG,CAAC,CAAD,EAAY,CAAZ,EAAqB;AACtB,WAAO,iBAAiB,CAAC,KAAD,CAAxB;AACD;;AACD,EAAA,IAAI,CAAmB,OAAnB,EAA+B;AACjC,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AACD,EAAA,QAAQ,CAAC,CAAD,EAAY,CAAZ,EAAqB;AAC3B,WAAO,iBAAiB,CAAC,UAAD,CAAxB;AACD;;AACD,EAAA,QAAQ,CAAC,CAAD,EAAY,CAAZ,EAAqB;AAC3B,WAAO,iBAAiB,CAAC,UAAD,CAAxB;AACD;;AACD,EAAA,UAAU,CAAC,CAAD,EAAY,CAAZ,EAAqB;AAC7B,WAAO,iBAAiB,CAAC,YAAD,CAAxB;AACD;;AACD,EAAA,QAAQ,CAAC,CAAD,EAAY,CAAZ,EAAqB;AAC3B,WAAO,iBAAiB,CAAC,UAAD,CAAxB;AACD;;AAED,EAAA,GAAG,CAAC,CAAD,EAAY,IAAZ,EAA0B;AAC3B,WAAO,iBAAiB,CAAC,KAAD,CAAxB;AACD;;AACD,EAAA,IAAI,CAAC,CAAD,EAAY,IAAZ,EAA0B;AAC5B,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AAED,EAAA,kBAAkB,CACd,CADc,EACR,UADQ,EACc,WADd,EACiC;AACjD,WAAO,iBAAiB,CAAC,oBAAD,CAAxB;AACD;;AAED,EAAA,MAAM,CAAC,CAAD,EAAY,IAAZ,EAAwB;AAC5B,WAAO,iBAAiB,CAAC,QAAD,CAAxB;AACD;;AACD,EAAA,MAAM,CAAC,CAAD,EAAY,IAAZ,EAAwB;AAC5B,WAAO,iBAAiB,CAAC,QAAD,CAAxB;AACD;;AAED,EAAA,KAAK,CAAC,CAAD,EAAY,CAAZ,EAAqB;AACxB,WAAO,iBAAiB,CAAC,OAAD,CAAxB;AACD;;AACD,EAAA,QAAQ,CAAC,CAAD,EAAY,CAAZ,EAAqB;AAC3B,WAAO,iBAAiB,CAAC,UAAD,CAAxB;AACD;;AAED,EAAA,IAAI,CAAC,CAAD,EAAY,CAAZ,EAAqB;AACvB,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AACD,EAAA,SAAS,CAAC,CAAD,EAAY,CAAZ,EAAqB;AAC5B,WAAO,iBAAiB,CAAC,WAAD,CAAxB;AACD;;AAED,EAAA,OAAO,CAAC,CAAD,EAAY,CAAZ,EAAqB;AAC1B,WAAO,iBAAiB,CAAC,SAAD,CAAxB;AACD;;AACD,EAAA,YAAY,CAAC,CAAD,EAAY,CAAZ,EAAqB;AAC/B,WAAO,iBAAiB,CAAC,cAAD,CAAxB;AACD;;AAED,EAAA,UAAU,CAAmB,CAAnB,EAAuB;AAC/B,WAAO,iBAAiB,CAAC,YAAD,CAAxB;AACD;;AACD,EAAA,UAAU,CAAC,CAAD,EAAY,CAAZ,EAAqB;AAC7B,WAAO,iBAAiB,CAAC,YAAD,CAAxB;AACD;;AACD,EAAA,SAAS,CAAC,CAAD,EAAY,CAAZ,EAAqB;AAC5B,WAAO,iBAAiB,CAAC,WAAD,CAAxB;AACD;;AAED,EAAA,KAAK,CAAC,SAAD,EAAkB;AACrB,WAAO,iBAAiB,CAAC,OAAD,CAAxB;AACD;;AACD,EAAA,MAAM,CAAC,SAAD,EAAoB,CAApB,EAA+B,CAA/B,EAAwC;AAC5C,WAAO,iBAAiB,CAAC,QAAD,CAAxB;AACD;;AAED,EAAA,IAAI,CAAmB,CAAnB,EAAyB,CAAzB,EAAoC,MAApC,EAAmD;AACrD,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AAED,EAAA,GAAG,CAAC,CAAD,EAAY,IAAZ,EAA0B;AAC3B,WAAO,iBAAiB,CAAC,KAAD,CAAxB;AACD;;AACD,EAAA,OAAO,CAAC,CAAD,EAAY,CAAZ,EAAqB;AAC1B,WAAO,iBAAiB,CAAC,SAAD,CAAxB;AACD;;AAED,EAAA,GAAG,CAAC,CAAD,EAAY,CAAZ,EAAqB;AACtB,WAAO,iBAAiB,CAAC,KAAD,CAAxB;AACD;;AAED,EAAA,GAAG,CAAC,CAAD,EAAY,IAAZ,EAA0B;AAC3B,WAAO,iBAAiB,CAAC,KAAD,CAAxB;AACD;;AACD,EAAA,OAAO,CAAC,CAAD,EAAY,CAAZ,EAAqB;AAC1B,WAAO,iBAAiB,CAAC,SAAD,CAAxB;AACD;;AAED,EAAA,GAAG,CAAC,CAAD,EAAY,IAAZ,EAA0B;AAC3B,WAAO,iBAAiB,CAAC,KAAD,CAAxB;AACD;;AACD,EAAA,GAAG,CAAC,CAAD,EAAY,IAAZ,EAA0B;AAC3B,WAAO,iBAAiB,CAAC,KAAD,CAAxB;AACD;;AAED,EAAA,iBAAiB,CAAC,CAAD,EAAY,CAAZ,EAAqB;AACpC,WAAO,iBAAiB,CAAC,mBAAD,CAAxB;AACD;;AAED,EAAA,IAAI,CAAmB,CAAnB,EAAuB;AACzB,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AACD,EAAA,KAAK,CAAmB,CAAnB,EAAuB;AAC1B,WAAO,iBAAiB,CAAC,OAAD,CAAxB;AACD;;AACD,EAAA,KAAK,CAAmB,CAAnB,EAAuB;AAC1B,WAAO,iBAAiB,CAAC,OAAD,CAAxB;AACD;;AAED,EAAA,IAAI,CAAmB,CAAnB,EAAuB;AACzB,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AAED,EAAA,KAAK,CAAmB,CAAnB,EAAuB;AAC1B,WAAO,iBAAiB,CAAC,OAAD,CAAxB;AACD;;AACD,EAAA,KAAK,CAAmB,CAAnB,EAAuB;AAC1B,WAAO,iBAAiB,CAAC,OAAD,CAAxB;AACD;;AACD,EAAA,QAAQ,CAAmB,CAAnB,EAAuB;AAC7B,WAAO,iBAAiB,CAAC,UAAD,CAAxB;AACD;;AAED,EAAA,GAAG,CAAmB,CAAnB,EAAyB,CAAzB,EAAkC;AACnC,WAAO,iBAAiB,CAAC,KAAD,CAAxB;AACD;;AACD,EAAA,GAAG,CAAmB,CAAnB,EAAuB;AACxB,WAAO,iBAAiB,CAAC,KAAD,CAAxB;AACD;;AACD,EAAA,KAAK,CAAmB,CAAnB,EAAuB;AAC1B,WAAO,iBAAiB,CAAC,OAAD,CAAxB;AACD;;AACD,EAAA,OAAO,CAAmB,CAAnB,EAAyB,GAAzB,EAAoC;AACzC,WAAO,iBAAiB,CAAC,SAAD,CAAxB;AACD;;AACD,EAAA,GAAG,CAAmB,CAAnB,EAAuB;AACxB,WAAO,iBAAiB,CAAC,KAAD,CAAxB;AACD;;AACD,EAAA,KAAK,CAAmB,CAAnB,EAAuB;AAC1B,WAAO,iBAAiB,CAAC,OAAD,CAAxB;AACD;;AACD,EAAA,IAAI,CAAmB,CAAnB,EAAuB;AACzB,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AACD,EAAA,KAAK,CAAmB,CAAnB,EAAuB;AAC1B,WAAO,iBAAiB,CAAC,OAAD,CAAxB;AACD;;AACD,EAAA,MAAM,CAAmB,CAAnB,EAAuB;AAC3B,WAAO,iBAAiB,CAAC,QAAD,CAAxB;AACD;;AACD,EAAA,UAAU,CAAmB,CAAnB,EAAuB;AAC/B,WAAO,iBAAiB,CAAC,YAAD,CAAxB;AACD;;AACD,EAAA,IAAI,CAAmB,CAAnB,EAAuB;AACzB,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AACD,EAAA,KAAK,CAAmB,CAAnB,EAAuB;AAC1B,WAAO,iBAAiB,CAAC,OAAD,CAAxB;AACD;;AACD,EAAA,KAAK,CAAmB,CAAnB,EAAyB,CAAzB,EAA6B;AAChC,WAAO,iBAAiB,CAAC,OAAD,CAAxB;AACD;;AACD,EAAA,GAAG,CAAmB,CAAnB,EAAuB;AACxB,WAAO,iBAAiB,CAAC,KAAD,CAAxB;AACD;;AACD,EAAA,MAAM,CAAmB,EAAnB,EAA0B,CAA1B,EAA8B;AAClC,WAAO,iBAAiB,CAAC,QAAD,CAAxB;AACD;;AACD,EAAA,IAAI,CAAmB,CAAnB,EAAuB;AACzB,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AACD,EAAA,GAAG,CAAmB,CAAnB,EAAuB;AACxB,WAAO,iBAAiB,CAAC,KAAD,CAAxB;AACD;;AAED,EAAA,IAAI,CAAmB,CAAnB,EAAyB,GAAzB,EAAsC,GAAtC,EAAiD;AACnD,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AAED,EAAA,GAAG,CAAmB,CAAnB,EAAuB;AACxB,WAAO,iBAAiB,CAAC,KAAD,CAAxB;AACD;;AACD,EAAA,UAAU,CAAmB,CAAnB,EAAuB;AAC/B,WAAO,iBAAiB,CAAC,YAAD,CAAxB;AACD;;AAED,EAAA,OAAO,CAAmB,CAAnB,EAAuB;AAC5B,WAAO,iBAAiB,CAAC,SAAD,CAAxB;AACD;;AAED,EAAA,QAAQ,CAAmB,CAAnB,EAAuB;AAC7B,WAAO,iBAAiB,CAAC,UAAD,CAAxB;AACD;;AAED,EAAA,GAAG,CAAmB,CAAnB,EAAuB;AACxB,WAAO,iBAAiB,CAAC,KAAD,CAAxB;AACD;;AACD,EAAA,GAAG,CAAmB,CAAnB,EAAuB;AACxB,WAAO,iBAAiB,CAAC,KAAD,CAAxB;AACD;;AACD,EAAA,GAAG,CAAmB,CAAnB,EAAuB;AACxB,WAAO,iBAAiB,CAAC,KAAD,CAAxB;AACD;;AAED,EAAA,IAAI,CAAmB,CAAnB,EAAuB;AACzB,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AACD,EAAA,IAAI,CAAmB,CAAnB,EAAuB;AACzB,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AACD,EAAA,IAAI,CAAmB,CAAnB,EAAuB;AACzB,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AACD,EAAA,KAAK,CAAmB,CAAnB,EAAyB,CAAzB,EAA6B;AAChC,WAAO,iBAAiB,CAAC,OAAD,CAAxB;AACD;;AAED,EAAA,IAAI,CAAmB,CAAnB,EAAuB;AACzB,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AACD,EAAA,IAAI,CAAmB,CAAnB,EAAuB;AACzB,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AACD,EAAA,IAAI,CAAmB,CAAnB,EAAuB;AACzB,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AAED,EAAA,KAAK,CAAmB,CAAnB,EAAuB;AAC1B,WAAO,iBAAiB,CAAC,OAAD,CAAxB;AACD;;AACD,EAAA,KAAK,CAAmB,CAAnB,EAAuB;AAC1B,WAAO,iBAAiB,CAAC,OAAD,CAAxB;AACD;;AACD,EAAA,KAAK,CAAmB,CAAnB,EAAuB;AAC1B,WAAO,iBAAiB,CAAC,OAAD,CAAxB;AACD;;AAED,EAAA,GAAG,CAAmB,CAAnB,EAAuB;AACxB,WAAO,iBAAiB,CAAC,KAAD,CAAxB;AACD;;AAED,EAAA,IAAI,CAAmB,CAAnB,EAAyB,KAAzB,EAAsC;AACxC,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AAED,EAAA,WAAW,CACP;AAAC,IAAA,KAAD;AAAQ,IAAA,MAAR;AAAgB,IAAA,QAAhB;AAA0B,IAAA,IAA1B;AAAgC,IAAA,UAAhC;AAA4C,IAAA;AAA5C,GADO,EAEc;AACvB,WAAO,iBAAiB,CAAC,aAAD,CAAxB;AACD;;AAED,EAAA,MAAM,CAAC,CAAD,EAAc,MAAd,EAAgC,QAAhC,EAAoD;AACxD,WAAO,iBAAiB,CAAC,QAAD,CAAxB;AACD;;AACD,EAAA,cAAc,CAAC,EAAD,EAAe,MAAf,EAAiC,QAAjC,EAAqD;AAEjE,WAAO,iBAAiB,CAAC,gBAAD,CAAxB;AACD;;AACD,EAAA,eAAe,CAAC,CAAD,EAAc,EAAd,EAA4B,QAA5B,EAAgD;AAC7D,WAAO,iBAAiB,CAAC,iBAAD,CAAxB;AACD;;AAED,EAAA,oBAAoB,CAChB;AAAC,IAAA,KAAD;AAAQ,IAAA,MAAR;AAAgB,IAAA,QAAhB;AAA0B,IAAA,IAA1B;AAAgC,IAAA,UAAhC;AAA4C,IAAA;AAA5C,GADgB,EAEK;AACvB,WAAO,iBAAiB,CAAC,sBAAD,CAAxB;AACD;;AAED,EAAA,eAAe,CAAC,KAAD,EAAkB,MAAlB,EAAoC,QAApC,EAAwD;AAErE,WAAO,iBAAiB,CAAC,iBAAD,CAAxB;AACD;;AACD,EAAA,uBAAuB,CAAC,EAAD,EAAe,MAAf,EAAiC,QAAjC,EAAqD;AAE1E,WAAO,iBAAiB,CAAC,yBAAD,CAAxB;AACD;;AACD,EAAA,wBAAwB,CAAC,CAAD,EAAc,EAAd,EAA4B,QAA5B,EAAgD;AAEtE,WAAO,iBAAiB,CAAC,0BAAD,CAAxB;AACD;;AACD,EAAA,MAAM,CAAC,CAAD,EAAc,MAAd,EAAgC,QAAhC,EAAoD;AACxD,WAAO,iBAAiB,CAAC,QAAD,CAAxB;AACD;;AACD,EAAA,cAAc,CAAC,EAAD,EAAe,MAAf,EAAiC,QAAjC,EAAqD;AAEjE,WAAO,iBAAiB,CAAC,gBAAD,CAAxB;AACD;;AACD,EAAA,eAAe,CAAC,CAAD,EAAc,EAAd,EAA4B,QAA5B,EAAgD;AAC7D,WAAO,iBAAiB,CAAC,iBAAD,CAAxB;AACD;;AACD,EAAA,OAAO,CAAC,CAAD,EAAc,QAAd,EAAkC;AACvC,WAAO,iBAAiB,CAAC,SAAD,CAAxB;AACD;;AACD,EAAA,eAAe,CAAC,EAAD,EAAe,CAAf,EAA4B,CAA5B,EAAyC,QAAzC,EAA6D;AAE1E,WAAO,iBAAiB,CAAC,iBAAD,CAAxB;AACD;;AACD,EAAA,OAAO,CAAC,CAAD,EAAc,QAAd,EAAkC;AACvC,WAAO,iBAAiB,CAAC,SAAD,CAAxB;AACD;;AACD,EAAA,eAAe,CAAC,EAAD,EAAe,CAAf,EAA4B,QAA5B,EAAgD;AAC7D,WAAO,iBAAiB,CAAC,iBAAD,CAAxB;AACD;;AACD,EAAA,SAAS,CAAC,CAAD,EAAc,QAAd,EAAkC;AACzC,WAAO,iBAAiB,CAAC,WAAD,CAAxB;AACD;;AACD,EAAA,iBAAiB,CAAC,EAAD,EAAe,CAAf,EAA4B,QAA5B,EAAgD;AAC/D,WAAO,iBAAiB,CAAC,mBAAD,CAAxB;AACD;;AACD,EAAA,SAAS,CAAC,CAAD,EAAc,QAAd,EAAkC;AACzC,WAAO,iBAAiB,CAAC,WAAD,CAAxB;AACD;;AACD,EAAA,iBAAiB,CACb,EADa,EACC,CADD,EACc,CADd,EAC2B,QAD3B,EAC+C;AAC9D,WAAO,iBAAiB,CAAC,mBAAD,CAAxB;AACD;;AAED,EAAA,OAAO,CAAmC,CAAnC,EAAyC,KAAzC,EAA2D;AAEhE,WAAO,iBAAiB,CAAC,SAAD,CAAxB;AACD;;AACD,EAAA,IAAI,CAAmB,CAAnB,EAAyB,KAAzB,EAAwC;AAC1C,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AAED,EAAA,IAAI,CAAmB,CAAnB,EAAyB,IAAzB,EAAuC;AACzC,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AAED,EAAA,GAAG,CACC,CADD,EACO,QADP,EAC0C,aAD1C,EAC+D;AAChE,WAAO,iBAAiB,CAAC,KAAD,CAAxB;AACD;;AAED,EAAA,SAAS,CAAmB,CAAnB,EAAyB,IAAzB,EAAuC;AAC9C,WAAO,iBAAiB,CAAC,WAAD,CAAxB;AACD;;AAED,EAAA,MAAM,CAAmB,CAAnB,EAAyB,OAAzB,EAA4C,IAA5C,EAAwD;AAC5D,WAAO,iBAAiB,CAAC,QAAD,CAAxB;AACD;;AAED,EAAA,QAAQ,CAAC,CAAD,EAAY,OAAZ,EAA2B;AACjC,WAAO,iBAAiB,CAAC,UAAD,CAAxB;AACD;;AAED,EAAA,SAAS,CACL,OADK,EACY,OADZ,EAC6B,KAD7B,EAC+C;AACtD,WAAO,iBAAiB,CAAC,WAAD,CAAxB;AACD;;AAED,EAAA,cAAc,CACV,CADU,EACJ,UADI,EACkB,KADlB,EACmC;AAC/C,WAAO,iBAAiB,CAAC,gBAAD,CAAxB;AACD;;AAED,EAAA,cAAc,CACV,CADU,EACJ,UADI,EACkB,QADlB,EACsC;AAClD,WAAO,iBAAiB,CAAC,gBAAD,CAAxB;AACD;;AAED,EAAA,cAAc,CACV,CADU,EACG,SADH,EACsB,QADtB,EAEV,YAFU,EAEW;AACvB,WAAO,iBAAiB,CAAC,gBAAD,CAAxB;AACD;;AAED,EAAA,sBAAsB,CAAC,EAAD,EAAe,CAAf,EAA4B,YAA5B,EAAiD;AAErE,WAAO,iBAAiB,CAAC,wBAAD,CAAxB;AACD;;AAED,EAAA,qBAAqB,CACjB,CADiB,EACJ,SADI,EACe,QADf,EAEjB,YAFiB,EAEI;AACvB,WAAO,iBAAiB,CAAC,uBAAD,CAAxB;AACD;;AAED,EAAA,6BAA6B,CACzB,EADyB,EACX,CADW,EACE,YADF,EACuB;AAClD,WAAO,iBAAiB,CAAC,+BAAD,CAAxB;AACD;;AAED,EAAA,SAAS,CACL,CADK,EACQ,IADR,EACiC,QADjC,EAEL,MAFK,EAEuB,KAFvB,EAGL,eAHK,EAGmB;AAC1B,WAAO,iBAAiB,CAAC,WAAD,CAAxB;AACD;;AAED,EAAA,4BAA4B,CACxB,CADwB,EACX,MADW,EACK,IADL,EACmB,KADnB,EAExB,IAFwB,EAEZ;AACd,WAAO,iBAAiB,CAAC,8BAAD,CAAxB;AACD;;AAED,EAAA,OAAO,CACH,EADG,EACW,UADX,EACiC,WADjC,EACwD,MADxD,EAEH,IAFG,EAEW,KAFX,EAE0B,IAF1B,EAEsC;AAC3C,WAAO,iBAAiB,CAAC,SAAD,CAAxB;AACD;;AAED,EAAA,WAAW,CACP,MADO,EACW,UADX,EACgC,UADhC,EAEP,IAFO,EAEK;AACd,WAAO,iBAAiB,CAAC,aAAD,CAAxB;AACD;;AAED,EAAA,MAAM,CAAC,OAAD,EAAoB,KAApB,EAAmC,OAAnC,EAAoD,QAApD,EAAoE;AAExE,WAAO,iBAAiB,CAAC,QAAD,CAAxB;AACD;;AAED,EAAA,MAAM,CAAC,CAAD,EAAY,IAAZ,EAA0B,SAA1B,EAA8C,OAA9C,EAA8D;AAElE,WAAO,iBAAiB,CAAC,QAAD,CAAxB;AACD;;AAED,EAAA,iBAAiB,CACb,KADa,EACI,MADJ,EACsB,aADtB,EAEb,YAFa,EAES,cAFT,EAEgC;AAC/C,WAAO,iBAAiB,CAAC,mBAAD,CAAxB;AACD;;AAED,EAAA,GAAG,CAAC,CAAD,EAAY;AACb,WAAO,iBAAiB,CAAC,KAAD,CAAxB;AACD;;AACD,EAAA,IAAI,CAAC,CAAD,EAAY;AACd,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AACD,EAAA,OAAO,CAAmB,IAAnB,EAA4B,IAA5B,EAAmC;AACxC,WAAO,iBAAiB,CAAC,SAAD,CAAxB;AACD;;AACD,EAAA,IAAI,CAAmB,KAAnB,EAA2B;AAC7B,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AACD,EAAA,IAAI,CAAmB,KAAnB,EAA2B;AAC7B,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AAED,EAAA,aAAa,CACT,KADS,EACQ,KADR,EACyB,QADzB,EAET,QAFS,EAEmB,MAFnB,EAGT,kBAHS,EAGiB;AAC5B,WAAO,iBAAiB,CAAC,eAAD,CAAxB;AACD;;AAED,EAAA,YAAY,CAAC,CAAD,EAAc,SAAd,EAAiC,UAAjC,EAAmD;AAC7D,WAAO,iBAAiB,CAAC,cAAD,CAAxB;AACD,GAhhBuB,CAkhBxB;;;AACA,EAAA,KAAK,CAAmB,KAAnB,EAA6B,UAA7B,EAAmD,IAAnD,EAA+D;AAClE,WAAO,iBAAiB,CAAC,OAAD,CAAxB;AACD;;AAED,EAAA,aAAa,CACT,aADS,EACc,YADd,EACoC,WADpC,EAET,YAFS,EAEW;AACtB,WAAO,iBAAiB,CAAC,eAAD,CAAxB;AACD;;AAED,EAAA,IAAI,CAAC,CAAD,EAAU;AACZ,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AAED,EAAA,IAAI,CACA,KADA,EACoB,KADpB,EAC0C,KAD1C,EAC0D;AAC5D,WAAO,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AAED,EAAA,QAAQ,CAAiB,CAAjB,EAA6B;AACnC,WAAO,iBAAiB,CAAC,UAAD,CAAxB;AACD;;AAED,EAAA,SAAS,CAAiB,CAAjB,EAA6B;AACpC,WAAO,iBAAiB,CAAC,WAAD,CAAxB;AACD;;AAED,EAAA,QAAQ,CAAC,KAAD,EAAgB,IAAhB,EAA8B,GAA9B,EAAyC;AAC/C,WAAO,iBAAiB,CAAC,UAAD,CAAxB;AACD;;AAED,EAAA,OAAO,GAAA;AACL,WAAO,iBAAiB,CAAC,SAAD,CAAxB;AACD;;AApjBuB;;AAujB1B,SAAS,iBAAT,CAA2B,UAA3B,EAA6C;AAC3C,QAAM,IAAI,KAAJ,CACF,IAAI,UAAU,sDAAd,GACA,sCAFE,CAAN;AAGD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n/** Convenient class for storing tensor-related data. */\nexport class DataStorage {\n    constructor(backend, dataMover) {\n        this.backend = backend;\n        this.dataMover = dataMover;\n        this.data = new WeakMap();\n        this.dataIdsCount = 0;\n    }\n    get(dataId) {\n        if (!this.data.has(dataId)) {\n            this.dataMover.moveData(this.backend, dataId);\n        }\n        return this.data.get(dataId);\n    }\n    set(dataId, value) {\n        this.dataIdsCount++;\n        this.data.set(dataId, value);\n    }\n    has(dataId) {\n        return this.data.has(dataId);\n    }\n    delete(dataId) {\n        this.dataIdsCount--;\n        return this.data.delete(dataId);\n    }\n    numDataIds() {\n        return this.dataIdsCount;\n    }\n}\n/**\n * The interface that defines the kernels that should be implemented when\n * adding a new backend. New backends don't need to implement every one of the\n * methods, this can be done gradually (throw an error for unimplemented\n * methods).\n */\nexport class KernelBackend {\n    time(f) {\n        return notYetImplemented('time');\n    }\n    read(dataId) {\n        return notYetImplemented('read');\n    }\n    readSync(dataId) {\n        return notYetImplemented('readSync');\n    }\n    numDataIds() {\n        return notYetImplemented('numDataIds');\n    }\n    disposeData(dataId) {\n        return notYetImplemented('disposeData');\n    }\n    write(values, shape, dtype) {\n        return notYetImplemented('write');\n    }\n    move(dataId, values, shape, dtype) {\n        return notYetImplemented('move');\n    }\n    memory() {\n        return notYetImplemented('memory');\n    }\n    /** Returns the highest precision for floats in bits (e.g. 16 or 32) */\n    floatPrecision() {\n        return notYetImplemented('floatPrecision');\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n    batchMatMul(a, b, transposeA, transposeB) {\n        return notYetImplemented('batchMatMul');\n    }\n    fusedBatchMatMul({ a, b, transposeA, transposeB, bias, activation, preluActivationWeights }) {\n        return notYetImplemented('fusedBatchMatMul');\n    }\n    slice(x, begin, size) {\n        return notYetImplemented('slice');\n    }\n    stridedSlice(x, begin, end, strides) {\n        return notYetImplemented('stridedSlice');\n    }\n    unstack(x, axis) {\n        return notYetImplemented('unstack');\n    }\n    reverse(a, axis) {\n        return notYetImplemented('reverse');\n    }\n    concat(tensors, axis) {\n        return notYetImplemented('concat');\n    }\n    neg(a) {\n        return notYetImplemented('neg');\n    }\n    add(a, b) {\n        return notYetImplemented('add');\n    }\n    addN(tensors) {\n        return notYetImplemented('addN');\n    }\n    subtract(a, b) {\n        return notYetImplemented('subtract');\n    }\n    multiply(a, b) {\n        return notYetImplemented('multiply');\n    }\n    realDivide(a, b) {\n        return notYetImplemented('realDivide');\n    }\n    floorDiv(a, b) {\n        return notYetImplemented('floorDiv');\n    }\n    sum(x, axes) {\n        return notYetImplemented('sum');\n    }\n    prod(x, axes) {\n        return notYetImplemented('prod');\n    }\n    unsortedSegmentSum(x, segmentIds, numSegments) {\n        return notYetImplemented('unsortedSegmentSum');\n    }\n    argMin(x, axis) {\n        return notYetImplemented('argMin');\n    }\n    argMax(x, axis) {\n        return notYetImplemented('argMax');\n    }\n    equal(a, b) {\n        return notYetImplemented('equal');\n    }\n    notEqual(a, b) {\n        return notYetImplemented('notEqual');\n    }\n    less(a, b) {\n        return notYetImplemented('less');\n    }\n    lessEqual(a, b) {\n        return notYetImplemented('lessEqual');\n    }\n    greater(a, b) {\n        return notYetImplemented('greater');\n    }\n    greaterEqual(a, b) {\n        return notYetImplemented('greaterEqual');\n    }\n    logicalNot(a) {\n        return notYetImplemented('logicalNot');\n    }\n    logicalAnd(a, b) {\n        return notYetImplemented('logicalAnd');\n    }\n    logicalOr(a, b) {\n        return notYetImplemented('logicalOr');\n    }\n    where(condition) {\n        return notYetImplemented('where');\n    }\n    select(condition, a, b) {\n        return notYetImplemented('select');\n    }\n    topk(x, k, sorted) {\n        return notYetImplemented('topk');\n    }\n    min(x, axes) {\n        return notYetImplemented('min');\n    }\n    minimum(a, b) {\n        return notYetImplemented('minimum');\n    }\n    mod(a, b) {\n        return notYetImplemented('mod');\n    }\n    max(x, axes) {\n        return notYetImplemented('max');\n    }\n    maximum(a, b) {\n        return notYetImplemented('maximum');\n    }\n    all(x, axes) {\n        return notYetImplemented('all');\n    }\n    any(x, axes) {\n        return notYetImplemented('any');\n    }\n    squaredDifference(a, b) {\n        return notYetImplemented('squaredDifference');\n    }\n    ceil(x) {\n        return notYetImplemented('ceil');\n    }\n    floor(x) {\n        return notYetImplemented('floor');\n    }\n    round(x) {\n        return notYetImplemented('round');\n    }\n    sign(x) {\n        return notYetImplemented('sign');\n    }\n    isNaN(x) {\n        return notYetImplemented('isNaN');\n    }\n    isInf(x) {\n        return notYetImplemented('isInf');\n    }\n    isFinite(x) {\n        return notYetImplemented('isFinite');\n    }\n    pow(a, b) {\n        return notYetImplemented('pow');\n    }\n    exp(x) {\n        return notYetImplemented('exp');\n    }\n    expm1(x) {\n        return notYetImplemented('expm1');\n    }\n    softmax(x, dim) {\n        return notYetImplemented('softmax');\n    }\n    log(x) {\n        return notYetImplemented('log');\n    }\n    log1p(x) {\n        return notYetImplemented('log1p');\n    }\n    sqrt(x) {\n        return notYetImplemented('sqrt');\n    }\n    rsqrt(x) {\n        return notYetImplemented('rsqrt');\n    }\n    square(x) {\n        return notYetImplemented('square');\n    }\n    reciprocal(x) {\n        return notYetImplemented('reciprocal');\n    }\n    relu(x) {\n        return notYetImplemented('relu');\n    }\n    relu6(x) {\n        return notYetImplemented('relu6');\n    }\n    prelu(x, a) {\n        return notYetImplemented('prelu');\n    }\n    elu(x) {\n        return notYetImplemented('elu');\n    }\n    eluDer(dy, y) {\n        return notYetImplemented('eluDer');\n    }\n    selu(x) {\n        return notYetImplemented('selu');\n    }\n    int(x) {\n        return notYetImplemented('int');\n    }\n    clip(x, min, max) {\n        return notYetImplemented('clip');\n    }\n    abs(x) {\n        return notYetImplemented('abs');\n    }\n    complexAbs(x) {\n        return notYetImplemented('complexAbs');\n    }\n    sigmoid(x) {\n        return notYetImplemented('sigmoid');\n    }\n    softplus(x) {\n        return notYetImplemented('softplus');\n    }\n    sin(x) {\n        return notYetImplemented('sin');\n    }\n    cos(x) {\n        return notYetImplemented('cos');\n    }\n    tan(x) {\n        return notYetImplemented('tan');\n    }\n    asin(x) {\n        return notYetImplemented('asin');\n    }\n    acos(x) {\n        return notYetImplemented('acos');\n    }\n    atan(x) {\n        return notYetImplemented('atan');\n    }\n    atan2(a, b) {\n        return notYetImplemented('atan2');\n    }\n    sinh(x) {\n        return notYetImplemented('sinh');\n    }\n    cosh(x) {\n        return notYetImplemented('cosh');\n    }\n    tanh(x) {\n        return notYetImplemented('tanh');\n    }\n    asinh(x) {\n        return notYetImplemented('asinh');\n    }\n    acosh(x) {\n        return notYetImplemented('acosh');\n    }\n    atanh(x) {\n        return notYetImplemented('atanh');\n    }\n    erf(x) {\n        return notYetImplemented('erf');\n    }\n    step(x, alpha) {\n        return notYetImplemented('step');\n    }\n    fusedConv2d({ input, filter, convInfo, bias, activation, preluActivationWeights }) {\n        return notYetImplemented('fusedConv2d');\n    }\n    conv2d(x, filter, convInfo) {\n        return notYetImplemented('conv2d');\n    }\n    conv2dDerInput(dy, filter, convInfo) {\n        return notYetImplemented('conv2dDerInput');\n    }\n    conv2dDerFilter(x, dY, convInfo) {\n        return notYetImplemented('conv2dDerFilter');\n    }\n    fusedDepthwiseConv2D({ input, filter, convInfo, bias, activation, preluActivationWeights }) {\n        return notYetImplemented('fusedDepthwiseConv2D');\n    }\n    depthwiseConv2D(input, filter, convInfo) {\n        return notYetImplemented('depthwiseConv2D');\n    }\n    depthwiseConv2DDerInput(dy, filter, convInfo) {\n        return notYetImplemented('depthwiseConv2DDerInput');\n    }\n    depthwiseConv2DDerFilter(x, dY, convInfo) {\n        return notYetImplemented('depthwiseConv2DDerFilter');\n    }\n    conv3d(x, filter, convInfo) {\n        return notYetImplemented('conv3d');\n    }\n    conv3dDerInput(dy, filter, convInfo) {\n        return notYetImplemented('conv3dDerInput');\n    }\n    conv3dDerFilter(x, dY, convInfo) {\n        return notYetImplemented('conv3dDerFilter');\n    }\n    maxPool(x, convInfo) {\n        return notYetImplemented('maxPool');\n    }\n    maxPoolBackprop(dy, x, y, convInfo) {\n        return notYetImplemented('maxPoolBackprop');\n    }\n    avgPool(x, convInfo) {\n        return notYetImplemented('avgPool');\n    }\n    avgPoolBackprop(dy, x, convInfo) {\n        return notYetImplemented('avgPoolBackprop');\n    }\n    avgPool3d(x, convInfo) {\n        return notYetImplemented('avgPool3d');\n    }\n    avgPool3dBackprop(dy, x, convInfo) {\n        return notYetImplemented('avgPool3dBackprop');\n    }\n    maxPool3d(x, convInfo) {\n        return notYetImplemented('maxPool3d');\n    }\n    maxPool3dBackprop(dy, x, y, convInfo) {\n        return notYetImplemented('maxPool3dBackprop');\n    }\n    reshape(x, shape) {\n        return notYetImplemented('reshape');\n    }\n    cast(x, dtype) {\n        return notYetImplemented('cast');\n    }\n    tile(x, reps) {\n        return notYetImplemented('tile');\n    }\n    pad(x, paddings, constantValue) {\n        return notYetImplemented('pad');\n    }\n    transpose(x, perm) {\n        return notYetImplemented('transpose');\n    }\n    gather(x, indices, axis) {\n        return notYetImplemented('gather');\n    }\n    gatherND(x, indices) {\n        return notYetImplemented('gatherND');\n    }\n    scatterND(indices, updates, shape) {\n        return notYetImplemented('scatterND');\n    }\n    batchToSpaceND(x, blockShape, crops) {\n        return notYetImplemented('batchToSpaceND');\n    }\n    spaceToBatchND(x, blockShape, paddings) {\n        return notYetImplemented('spaceToBatchND');\n    }\n    resizeBilinear(x, newHeight, newWidth, alignCorners) {\n        return notYetImplemented('resizeBilinear');\n    }\n    resizeBilinearBackprop(dy, x, alignCorners) {\n        return notYetImplemented('resizeBilinearBackprop');\n    }\n    resizeNearestNeighbor(x, newHEight, newWidth, alignCorners) {\n        return notYetImplemented('resizeNearestNeighbor');\n    }\n    resizeNearestNeighborBackprop(dy, x, alignCorners) {\n        return notYetImplemented('resizeNearestNeighborBackprop');\n    }\n    batchNorm(x, mean, variance, offset, scale, varianceEpsilon) {\n        return notYetImplemented('batchNorm');\n    }\n    localResponseNormalization4D(x, radius, bias, alpha, beta) {\n        return notYetImplemented('localResponseNormalization4D');\n    }\n    LRNGrad(dy, inputImage, outputImage, radius, bias, alpha, beta) {\n        return notYetImplemented('LRNGrad');\n    }\n    multinomial(logits, normalized, numSamples, seed) {\n        return notYetImplemented('multinomial');\n    }\n    oneHot(indices, depth, onValue, offValue) {\n        return notYetImplemented('oneHot');\n    }\n    cumsum(x, axis, exclusive, reverse) {\n        return notYetImplemented('cumsum');\n    }\n    nonMaxSuppression(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {\n        return notYetImplemented('nonMaxSuppression');\n    }\n    fft(x) {\n        return notYetImplemented('fft');\n    }\n    ifft(x) {\n        return notYetImplemented('ifft');\n    }\n    complex(real, imag) {\n        return notYetImplemented('complex');\n    }\n    real(input) {\n        return notYetImplemented('real');\n    }\n    imag(input) {\n        return notYetImplemented('imag');\n    }\n    cropAndResize(image, boxes, boxIndex, cropSize, method, extrapolationValue) {\n        return notYetImplemented('cropAndResize');\n    }\n    depthToSpace(x, blockSize, dataFormat) {\n        return notYetImplemented('depthToSpace');\n    }\n    // Aligns with the \"SplitV\" kernel in TensorFlow.\n    split(value, sizeSplits, axis) {\n        return notYetImplemented('split');\n    }\n    sparseToDense(sparseIndices, sparseValues, outputShape, defaultValue) {\n        return notYetImplemented('sparseToDense');\n    }\n    diag(x) {\n        return notYetImplemented('diag');\n    }\n    fill(shape, value, dtype) {\n        return notYetImplemented('fill');\n    }\n    onesLike(x) {\n        return notYetImplemented('onesLike');\n    }\n    zerosLike(x) {\n        return notYetImplemented('zerosLike');\n    }\n    linspace(start, stop, num) {\n        return notYetImplemented('linspace');\n    }\n    dispose() {\n        return notYetImplemented('dispose');\n    }\n}\nfunction notYetImplemented(kernelName) {\n    throw new Error(`'${kernelName}' not yet implemented or not found in the registry. ` +\n        `Did you forget to import the kernel?`);\n}\n//# sourceMappingURL=backend.js.map"]},"metadata":{},"sourceType":"module"}