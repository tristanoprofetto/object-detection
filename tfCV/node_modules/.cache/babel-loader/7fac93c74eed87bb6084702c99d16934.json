{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Unpack } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Unstacks a `tf.Tensor` of rank-`R` into a list of rank-`(R-1)` `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * tf.unstack(a).forEach(tensor => tensor.print());\n * ```\n *\n * @param x A tensor object.\n * @param axis The axis to unstack along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\n\nfunction unstack_(x, axis = 0) {\n  const $x = convertToTensor(x, 'x', 'unstack');\n  util.assert(axis >= -$x.shape.length && axis < $x.shape.length, () => `Axis = ${axis} is not in [-${$x.shape.length}, ${$x.shape.length})`);\n\n  if (axis < 0) {\n    axis += $x.shape.length;\n  }\n\n  const inputs = {\n    value: $x\n  };\n  const attrs = {\n    axis\n  };\n\n  const forward = backend => backend.unstack($x, axis);\n\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , Unpack, attrs);\n}\n\nexport const unstack = op({\n  unstack_\n});","map":{"version":3,"sources":["../../src/ops/unstack.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,MAAR,QAAgD,iBAAhD;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;;AAcA,SAAS,QAAT,CAAkB,CAAlB,EAAwC,IAAI,GAAG,CAA/C,EAAgD;AAC9C,QAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,SAAT,CAA1B;AACA,EAAA,IAAI,CAAC,MAAL,CACI,IAAI,IAAI,CAAC,EAAE,CAAC,KAAH,CAAS,MAAlB,IAA4B,IAAI,GAAG,EAAE,CAAC,KAAH,CAAS,MADhD,EAEI,MACI,UAAU,IAAI,gBAAgB,EAAE,CAAC,KAAH,CAAS,MAAM,KAAK,EAAE,CAAC,KAAH,CAAS,MAAM,GAHzE;;AAIA,MAAI,IAAI,GAAG,CAAX,EAAc;AACZ,IAAA,IAAI,IAAI,EAAE,CAAC,KAAH,CAAS,MAAjB;AACD;;AACD,QAAM,MAAM,GAAiB;AAAC,IAAA,KAAK,EAAE;AAAR,GAA7B;AACA,QAAM,KAAK,GAAgB;AAAC,IAAA;AAAD,GAA3B;;AACA,QAAM,OAAO,GAA2B,OAAD,IACnC,OAAO,CAAC,OAAR,CAAgB,EAAhB,EAAoB,IAApB,CADJ;;AAEA,SAAO,MAAM,CAAC,aAAP,CACH,OADG,EACM,MADN,EACsC;AAAK;AAD3C,IACuD,MADvD,EAEH,KAFG,CAAP;AAGD;;AAED,OAAO,MAAM,OAAO,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAlB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Unpack } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Unstacks a `tf.Tensor` of rank-`R` into a list of rank-`(R-1)` `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * tf.unstack(a).forEach(tensor => tensor.print());\n * ```\n *\n * @param x A tensor object.\n * @param axis The axis to unstack along. Defaults to 0 (the first dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction unstack_(x, axis = 0) {\n    const $x = convertToTensor(x, 'x', 'unstack');\n    util.assert(axis >= -$x.shape.length && axis < $x.shape.length, () => `Axis = ${axis} is not in [-${$x.shape.length}, ${$x.shape.length})`);\n    if (axis < 0) {\n        axis += $x.shape.length;\n    }\n    const inputs = { value: $x };\n    const attrs = { axis };\n    const forward = (backend) => backend.unstack($x, axis);\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Unpack, attrs);\n}\nexport const unstack = op({ unstack_ });\n//# sourceMappingURL=unstack.js.map"]},"metadata":{},"sourceType":"module"}