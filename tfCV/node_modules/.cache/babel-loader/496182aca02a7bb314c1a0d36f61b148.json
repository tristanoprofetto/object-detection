{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { BatchMatMul } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the dot product of two matrices, A * B. These must be matrices.\n *\n * ```js\n * const a = tf.tensor2d([1, 2], [1, 2]);\n * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * a.matMul(b).print();  // or tf.matMul(a, b)\n * ```\n * @param a First matrix in dot product operation.\n * @param b Second matrix in dot product operation.\n * @param transposeA If true, `a` is transposed before multiplication.\n * @param transposeB If true, `b` is transposed before multiplication.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\n\nfunction matMul_(a, b, transposeA = false, transposeB = false) {\n  let $a = convertToTensor(a, 'a', 'matMul');\n  let $b = convertToTensor(b, 'b', 'matMul');\n  [$a, $b] = makeTypesMatch($a, $b);\n  util.assert($a.rank >= 2 && $b.rank >= 2 && $a.rank === $b.rank, () => `Error in matMul: inputs must have the same rank of at least 2, ` + `got ranks ${$a.rank} and ${$b.rank}.`);\n  const innerShapeA = transposeA ? $a.shape[$a.rank - 2] : $a.shape[$a.rank - 1];\n  const innerShapeB = transposeB ? $b.shape[$b.rank - 1] : $b.shape[$b.rank - 2];\n  const outerShapeA = transposeA ? $a.shape[$a.rank - 1] : $a.shape[$a.rank - 2];\n  const outerShapeB = transposeB ? $b.shape[$b.rank - 2] : $b.shape[$b.rank - 1];\n  const outerDimsA = $a.shape.slice(0, -2);\n  const outerDimsB = $b.shape.slice(0, -2);\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n  util.assert(util.arraysEqual(outerDimsA, outerDimsB), () => `Error in matMul: outer dimensions (${outerDimsA}) and (` + `${outerDimsB}) of Tensors with shapes ${$a.shape} and ` + `${$b.shape} must match.`);\n  util.assert(innerShapeA === innerShapeB, () => `Error in matMul: inner shapes (${innerShapeA}) and (` + `${innerShapeB}) of Tensors with shapes ${$a.shape} and ` + `${$b.shape} and transposeA=${transposeA}` + ` and transposeB=${transposeB} must match.`);\n  const outShape = $a.shape.slice(0, -2).concat([outerShapeA, outerShapeB]);\n  const a3D = transposeA ? reshape($a, [batchDimA, innerShapeA, outerShapeA]) : reshape($a, [batchDimA, outerShapeA, innerShapeA]);\n  const b3D = transposeB ? reshape($b, [batchDimB, outerShapeB, innerShapeB]) : reshape($b, [batchDimB, innerShapeB, outerShapeB]);\n\n  const forward = (backend, save) => {\n    save([a3D, b3D]);\n    return backend.batchMatMul(a3D, b3D, transposeA, transposeB);\n  };\n\n  const inputs = {\n    a: a3D,\n    b: b3D\n  };\n  const attrs = {\n    transposeA,\n    transposeB\n  };\n  const res = ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , BatchMatMul, attrs);\n  return reshape(res, outShape);\n}\n\nexport const matMul = op({\n  matMul_\n});","map":{"version":3,"sources":["../../src/ops/mat_mul.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { BatchMatMul } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the dot product of two matrices, A * B. These must be matrices.\n *\n * ```js\n * const a = tf.tensor2d([1, 2], [1, 2]);\n * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * a.matMul(b).print();  // or tf.matMul(a, b)\n * ```\n * @param a First matrix in dot product operation.\n * @param b Second matrix in dot product operation.\n * @param transposeA If true, `a` is transposed before multiplication.\n * @param transposeB If true, `b` is transposed before multiplication.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction matMul_(a, b, transposeA = false, transposeB = false) {\n    let $a = convertToTensor(a, 'a', 'matMul');\n    let $b = convertToTensor(b, 'b', 'matMul');\n    [$a, $b] = makeTypesMatch($a, $b);\n    util.assert($a.rank >= 2 && $b.rank >= 2 && $a.rank === $b.rank, () => `Error in matMul: inputs must have the same rank of at least 2, ` +\n        `got ranks ${$a.rank} and ${$b.rank}.`);\n    const innerShapeA = transposeA ? $a.shape[$a.rank - 2] : $a.shape[$a.rank - 1];\n    const innerShapeB = transposeB ? $b.shape[$b.rank - 1] : $b.shape[$b.rank - 2];\n    const outerShapeA = transposeA ? $a.shape[$a.rank - 1] : $a.shape[$a.rank - 2];\n    const outerShapeB = transposeB ? $b.shape[$b.rank - 2] : $b.shape[$b.rank - 1];\n    const outerDimsA = $a.shape.slice(0, -2);\n    const outerDimsB = $b.shape.slice(0, -2);\n    const batchDimA = util.sizeFromShape(outerDimsA);\n    const batchDimB = util.sizeFromShape(outerDimsB);\n    util.assert(util.arraysEqual(outerDimsA, outerDimsB), () => `Error in matMul: outer dimensions (${outerDimsA}) and (` +\n        `${outerDimsB}) of Tensors with shapes ${$a.shape} and ` +\n        `${$b.shape} must match.`);\n    util.assert(innerShapeA === innerShapeB, () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n        `${innerShapeB}) of Tensors with shapes ${$a.shape} and ` +\n        `${$b.shape} and transposeA=${transposeA}` +\n        ` and transposeB=${transposeB} must match.`);\n    const outShape = $a.shape.slice(0, -2).concat([outerShapeA, outerShapeB]);\n    const a3D = transposeA ? reshape($a, [batchDimA, innerShapeA, outerShapeA]) :\n        reshape($a, [batchDimA, outerShapeA, innerShapeA]);\n    const b3D = transposeB ? reshape($b, [batchDimB, outerShapeB, innerShapeB]) :\n        reshape($b, [batchDimB, innerShapeB, outerShapeB]);\n    const forward = (backend, save) => {\n        save([a3D, b3D]);\n        return backend.batchMatMul(a3D, b3D, transposeA, transposeB);\n    };\n    const inputs = { a: a3D, b: b3D };\n    const attrs = { transposeA, transposeB };\n    const res = ENGINE.runKernelFunc(forward, inputs, null /* grad */, BatchMatMul, attrs);\n    return reshape(res, outShape);\n}\nexport const matMul = op({ matMul_ });\n//# sourceMappingURL=mat_mul.js.map"]},"metadata":{},"sourceType":"module"}