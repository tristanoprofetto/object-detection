{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import webgl flags.\nimport './flags_webgl';\nimport * as tf from '@tensorflow/tfjs-core';\nimport { complex, div, engine, env, imag, max, range, real, reshape, scalar, softmax, tensor, tidy, transpose } from '@tensorflow/tfjs-core';\nimport { backend_util, buffer, kernel_impls, slice_util, util } from '@tensorflow/tfjs-core';\nimport { DataStorage, KernelBackend, upcastType } from '@tensorflow/tfjs-core';\nconst {\n  segment_util\n} = backend_util;\nconst split = kernel_impls.split;\nconst tile = kernel_impls.tile;\nconst topkImpl = kernel_impls.topkImpl;\nconst whereImpl = kernel_impls.whereImpl;\nimport { AddNProgram } from './addn_gpu';\nimport { AddNPackedProgram } from './addn_packed_gpu';\nimport { ArgMinMaxProgram } from './argminmax_gpu';\nimport { ArgMinMaxPackedProgram } from './argminmax_packed_gpu';\nimport { AvgPool2DBackpropProgram, AvgPool3DBackpropProgram } from './avg_pool_backprop_gpu';\nimport { BatchNormProgram } from './batchnorm_gpu';\nimport { BatchNormPackedProgram } from './batchnorm_packed_gpu';\nimport * as binaryop_complex_gpu from './binaryop_complex_gpu';\nimport { BinaryOpComplexProgram } from './binaryop_complex_gpu';\nimport * as binaryop_gpu from './binaryop_gpu';\nimport { BinaryOpProgram } from './binaryop_gpu';\nimport * as binaryop_packed_gpu from './binaryop_packed_gpu';\nimport { BinaryOpPackedProgram } from './binaryop_packed_gpu';\nimport { getWebGLContext } from './canvas_util';\nimport { ClipProgram } from './clip_gpu';\nimport { ClipPackedProgram } from './clip_packed_gpu';\nimport { ComplexAbsProgram } from './complex_abs_gpu';\nimport { ConcatProgram } from './concat_gpu';\nimport { ConcatPackedProgram } from './concat_packed_gpu';\nimport { Conv2DDerFilterProgram, Conv2DDerInputProgram, Conv3DDerFilterProgram, Conv3DDerInputProgram } from './conv_backprop_gpu';\nimport { DepthwiseConv2DDerFilterProgram, DepthwiseConv2DDerInputProgram } from './conv_backprop_gpu_depthwise';\nimport { Conv2DProgram, Conv3DProgram } from './conv_gpu';\nimport { DepthwiseConv2DProgram } from './conv_gpu_depthwise';\nimport { DepthwiseConvPacked2DProgram } from './conv_packed_gpu_depthwise';\nimport { CropAndResizeProgram } from './crop_and_resize_gpu';\nimport { CumSumProgram } from './cumsum_gpu';\nimport { DecodeMatrixProgram } from './decode_matrix_gpu';\nimport { DecodeMatrixPackedProgram } from './decode_matrix_packed_gpu';\nimport { DepthToSpaceProgram } from './depth_to_space_gpu';\nimport { DiagProgram } from './diag_gpu';\nimport { EncodeFloatProgram } from './encode_float_gpu';\nimport { EncodeFloatPackedProgram } from './encode_float_packed_gpu';\nimport { EncodeMatrixProgram } from './encode_matrix_gpu';\nimport { EncodeMatrixPackedProgram } from './encode_matrix_packed_gpu';\nimport * as fft_gpu from './fft_gpu';\nimport { FFTProgram } from './fft_gpu';\nimport { FillProgram } from './fill_gpu';\nimport { GatherProgram } from './gather_gpu';\nimport { GatherNDProgram } from './gather_nd_gpu';\nimport { GPGPUContext } from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport { Im2ColPackedProgram } from './im2col_packed_gpu';\nimport { LRNProgram } from './lrn_gpu';\nimport { LRNGradProgram } from './lrn_grad_gpu';\nimport { LRNPackedProgram } from './lrn_packed_gpu';\nimport { MaxPool2DBackpropProgram, MaxPool3DBackpropProgram } from './max_pool_backprop_gpu';\nimport { MatMulPackedProgram } from './mulmat_packed_gpu';\nimport { MultinomialProgram } from './multinomial_gpu';\nimport { OneHotProgram } from './onehot_gpu';\nimport { PackProgram } from './pack_gpu';\nimport { PadProgram } from './pad_gpu';\nimport { PadPackedProgram } from './pad_packed_gpu';\nimport { Pool2DProgram, Pool3DProgram } from './pool_gpu';\nimport { ReduceProgram } from './reduce_gpu';\nimport { ReshapePackedProgram } from './reshape_packed_gpu';\nimport { ResizeBilinearBackpropProgram } from './resize_bilinear_backprop_gpu';\nimport { ResizeBilinearProgram } from './resize_bilinear_gpu';\nimport { ResizeBilinearPackedProgram } from './resize_bilinear_packed_gpu';\nimport { ResizeNearestNeigborBackpropProgram } from './resize_nearest_neighbor_backprop_gpu';\nimport { ResizeNearestNeighborProgram } from './resize_nearest_neighbor_gpu';\nimport { ReverseProgram } from './reverse_gpu';\nimport { ReversePackedProgram } from './reverse_packed_gpu';\nimport { ScatterProgram } from './scatter_gpu';\nimport { SegmentOpProgram } from './segment_gpu';\nimport { SelectProgram } from './select_gpu';\nimport { SliceProgram } from './slice_gpu';\nimport { SlicePackedProgram } from './slice_packed_gpu';\nimport { StridedSliceProgram } from './strided_slice_gpu';\nimport * as tex_util from './tex_util';\nimport { TextureUsage } from './tex_util';\nimport { TextureManager } from './texture_manager';\nimport { TileProgram } from './tile_gpu';\nimport * as unary_op from './unaryop_gpu';\nimport { UnaryOpProgram } from './unaryop_gpu';\nimport * as unary_packed_op from './unaryop_packed_gpu';\nimport { UnaryOpPackedProgram } from './unaryop_packed_gpu';\nimport { UnpackProgram } from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\nconst binaryCaches = {};\nexport function getBinaryCache(webGLVersion) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n\nfunction mapActivationToShaderProgram(activation, packed = false) {\n  if (activation === 'linear') {\n    if (packed) {\n      return unary_packed_op.LINEAR;\n    }\n\n    return unary_op.LINEAR;\n  } else if (activation === 'relu') {\n    if (packed) {\n      return unary_packed_op.RELU;\n    }\n\n    return unary_op.RELU;\n  } else if (activation === 'elu') {\n    if (packed) {\n      return unary_packed_op.ELU;\n    }\n\n    return unary_op.ELU;\n  } else if (activation === 'relu6') {\n    if (packed) {\n      return unary_packed_op.RELU6;\n    }\n\n    return unary_op.RELU6;\n  } else if (activation === 'prelu') {\n    if (packed) {\n      return binaryop_packed_gpu.PRELU;\n    }\n\n    return binaryop_gpu.PRELU;\n  }\n\n  throw new Error(`Activation ${activation} has not been implemented for the WebGL backend.`);\n} // Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\n\n\nconst CPU_HANDOFF_SIZE_THRESHOLD = 128; // Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\n\nconst BEFORE_PAGING_CONSTANT = 600;\n\nfunction numMBBeforeWarning() {\n  if (env().global.screen == null) {\n    return 1024; // 1 GB.\n  }\n\n  return env().global.screen.height * env().global.screen.width * window.devicePixelRatio * BEFORE_PAGING_CONSTANT / 1024 / 1024;\n} // Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\n\n\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\nexport class MathBackendWebGL extends KernelBackend {\n  constructor(gpgpu) {\n    super(); // Maps data ids that have a pending read operation, to list of subscribers.\n\n    this.pendingRead = new WeakMap(); // List of data ids that are scheduled for disposal, but are waiting on a\n    // pending read operation.\n\n    this.pendingDisposal = new WeakSet(); // Used to count the number of 'shallow' sliced tensors that point to the\n    // same data id.\n\n    this.dataRefCount = new WeakMap();\n    this.numBytesInGPU = 0; // Accumulated time spent (including blocking) in uploading data to webgl.\n\n    this.uploadWaitMs = 0; // Accumulated time spent (including blocking in downloading data from webgl.\n\n    this.downloadWaitMs = 0;\n    this.warnedAboutMemory = false;\n    this.warnedAboutCPUBackend = false;\n    this.pendingDeletes = 0;\n    this.disposed = false;\n\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    if (gpgpu == null) {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpu = new GPGPUContext(gl);\n      this.canvas = gl.canvas;\n      this.gpgpuCreatedLocally = true;\n    } else {\n      this.gpgpu = gpgpu;\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n      this.canvas = gpgpu.gl.canvas;\n    }\n\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n    this.texData = new DataStorage(this, engine());\n  }\n\n  numDataIds() {\n    return this.texData.numDataIds() + (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) - this.pendingDeletes;\n  }\n\n  write(values, shape, dtype) {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') || env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);\n    }\n\n    const dataId = {};\n    this.texData.set(dataId, {\n      shape,\n      dtype,\n      values,\n      usage: TextureUsage.UPLOAD\n    });\n    return dataId;\n  }\n\n  move(dataId, values, shape, dtype) {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n\n    if (dtype === 'complex64') {\n      throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);\n    }\n\n    this.texData.set(dataId, {\n      shape,\n      dtype,\n      values,\n      usage: TextureUsage.UPLOAD\n    });\n  }\n\n  readSync(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      values,\n      dtype,\n      complexTensors,\n      slice,\n      shape,\n      isPacked\n    } = texData;\n\n    if (slice != null) {\n      let program;\n\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n\n      const res = this.runWebGLProgram(program, [{\n        dataId,\n        shape,\n        dtype\n      }], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeData(res.dataId);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (dtype === 'string') {\n      return values;\n    }\n\n    const shouldTimeProgram = this.activeTimers != null;\n    let start;\n\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result;\n\n    if (dtype === 'complex64') {\n      const realValues = complexTensors.real.dataSync();\n      const imagValues = complexTensors.imag.dataSync();\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  async read(dataId) {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise(resolve => subscribers.push(resolve));\n    }\n\n    const texData = this.texData.get(dataId);\n    const {\n      values,\n      shape,\n      slice,\n      dtype,\n      complexTensors,\n      isPacked\n    } = texData;\n\n    if (slice != null) {\n      let program;\n\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n\n      const res = this.runWebGLProgram(program, [{\n        dataId,\n        shape,\n        dtype\n      }], dtype);\n      const data = this.read(res.dataId);\n      this.disposeData(res.dataId);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') && env().getNumber('WEBGL_VERSION') === 2) {\n      throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` + `WEBGL_VERSION=2 not yet supported.`);\n    }\n\n    let buffer = null;\n    let tmpDownloadTarget;\n\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n      buffer = this.gpgpu.createBufferFromTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    } // Download the values from the GPU.\n\n\n    let vals;\n\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([complexTensors.real.data(), complexTensors.imag.data()]);\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n\n    if (tmpDownloadTarget != null) {\n      this.disposeData(tmpDownloadTarget.dataId);\n    }\n\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId); // Notify all pending reads.\n\n    subscribers.forEach(resolve => resolve(dTypeVals));\n\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      this.disposeData(dataId);\n      this.pendingDeletes--;\n    }\n\n    return dTypeVals;\n  }\n\n  checkNumericalProblems(values) {\n    if (values == null) {\n      return;\n    }\n\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i];\n\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(`The value ${num} cannot be represented with your ` + `current settings. Consider enabling float32 rendering: ` + `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  getValuesFromTexture(dataId) {\n    const {\n      shape,\n      dtype,\n      isPacked\n    } = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals = this.gpgpu.downloadMatrixFromPackedTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape)).subarray(0, size);\n      this.disposeData(tmpTarget.dataId);\n      return vals;\n    }\n\n    const shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ? new EncodeFloatPackedProgram(outputShape) : new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(program, [{\n      shape: outputShape,\n      dtype,\n      dataId\n    }], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture, tmpData.texShape[0], tmpData.texShape[1]).subarray(0, size);\n    this.disposeData(output.dataId);\n    return vals;\n  }\n\n  async time(f) {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers = [];\n    let outerMostTime = false;\n\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n\n    this.activeTimers = newActiveTimers;\n    f(); // needing to split these up because util.flatten only accepts certain types\n\n    const flattenedActiveTimerQueries = util.flatten(this.activeTimers.map(d => d.query)).filter(d => d != null);\n    const flattenedActiveTimerNames = util.flatten(this.activeTimers.map(d => d.name)).filter(d => d != null);\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const res = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null // will be filled by the engine\n\n    };\n\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n      res['kernelMs'] = util.sum(kernelMs);\n\n      res['getExtraProfileInfo'] = () => kernelMs.map((d, i) => ({\n        name: flattenedActiveTimerNames[i],\n        ms: d\n      })).map(d => `${d.name}: ${d.ms}`).join(', ');\n    } else {\n      res['kernelMs'] = {\n        error: 'WebGL query timers are not supported in this environment.'\n      };\n    }\n\n    this.uploadWaitMs = 0;\n    this.downloadWaitMs = 0;\n    return res;\n  }\n\n  memory() {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    };\n  }\n\n  startTimer() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n\n    return {\n      startMs: util.now(),\n      endMs: null\n    };\n  }\n\n  endTimer(query) {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n\n    query.endMs = util.now();\n    return query;\n  }\n\n  async getQueryTime(query) {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query);\n    }\n\n    const timerQuery = query;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n\n  disposeData(dataId) {\n    if (this.pendingDisposal.has(dataId)) {\n      return;\n    }\n\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return;\n    } // No-op if already disposed.\n\n\n    if (!this.texData.has(dataId)) {\n      return;\n    }\n\n    this.releaseGPUData(dataId);\n    const {\n      complexTensors\n    } = this.texData.get(dataId);\n\n    if (complexTensors != null) {\n      complexTensors.real.dispose();\n      complexTensors.imag.dispose();\n    }\n\n    this.texData.delete(dataId);\n  }\n\n  releaseGPUData(dataId) {\n    const {\n      texture,\n      dtype,\n      texShape,\n      usage,\n      isPacked,\n      slice\n    } = this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId) {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture;\n  }\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n\n\n  getDataInfo(dataId) {\n    return this.texData.get(dataId);\n  }\n\n  getCPUBackend() {\n    if (!env().getBool('WEBGL_CPU_FORWARD')) {\n      return null;\n    }\n\n    if (this.cpuBackend == null) {\n      this.cpuBackend = engine().findBackend('cpu');\n    }\n\n    return this.cpuBackend;\n  }\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n\n\n  shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {\n    const cpuBackend = this.getCPUBackend();\n\n    if (!this.warnedAboutCPUBackend && cpuBackend == null && !env().getBool('IS_TEST')) {\n      console.warn('Your application contains ops that are small enough to be ' + 'executed on the CPU backend, however the CPU backend cannot ' + 'be found. Consider importing the CPU backend ' + '(@tensorflow/tfjs-backend-cpu) for better performance.');\n      this.warnedAboutCPUBackend = true;\n    }\n\n    return cpuBackend != null && inputs.every(input => this.texData.get(input.dataId).texture == null && util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext() {\n    return this.gpgpu;\n  }\n\n  complex(real, imag) {\n    const result = this.makeOutput(real.shape, 'complex64');\n    const resultData = this.texData.get(result.dataId); // The backend owns the reference to the underlying real and imaginary\n    // clones. These will explicitly get disposed when the complex tensor is\n    // disposed.\n\n    resultData.complexTensors = {\n      real: engine().keep(real.clone()),\n      imag: engine().keep(imag.clone())\n    };\n    return result;\n  }\n\n  real(input) {\n    const resultData = this.texData.get(input.dataId);\n    return resultData.complexTensors.real.clone();\n  }\n\n  imag(input) {\n    const resultData = this.texData.get(input.dataId);\n    return resultData.complexTensors.imag.clone();\n  }\n\n  slice(x, begin, size) {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.slice(x, begin, size);\n    } // Short-circuit computation if the slice is zero-sized.\n\n\n    if (util.sizeFromShape(size) === 0) {\n      return tensor([], size, x.dtype);\n    }\n\n    const {\n      isPacked\n    } = this.texData.get(x.dataId);\n    const isContinous = slice_util.isSliceContinous(x.shape, begin, size);\n\n    if (isPacked || !isContinous) {\n      const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new SlicePackedProgram(size) : new SliceProgram(size);\n      const customSetup = program.getCustomSetupFunc(begin);\n      return this.compileAndRun(program, [x], null, customSetup);\n    }\n\n    this.uploadToGPU(x.dataId);\n    return this.shallowSlice(x, begin, size);\n  }\n\n  shallowSlice(x, begin, size) {\n    const xTexData = this.texData.get(x.dataId);\n    const t = this.makeOutput(size, x.dtype);\n    const newTexData = this.texData.get(t.dataId); // Copy texture data from the original tensor.\n\n    Object.assign(newTexData, xTexData);\n    newTexData.shape = size;\n    newTexData.dtype = x.dtype;\n    let flatOffset = slice_util.computeFlatOffset(begin, x.strides);\n\n    if (xTexData.slice) {\n      // We are slicing an already sliced tensor, so we have to accumulate\n      // the offset.\n      flatOffset += xTexData.slice.flatOffset;\n    }\n\n    newTexData.slice = {\n      flatOffset,\n      // Point to the original dataId, which is used to do ref counting.\n      origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n    }; // Increase the ref count for that data bucket.\n\n    const refCount = this.dataRefCount.get(newTexData.slice.origDataId) || 1;\n    this.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n    return t;\n  }\n\n  stridedSlice(x, begin, end, strides) {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.stridedSlice(x, begin, end, strides);\n    }\n\n    const outShape = slice_util.computeOutShape(begin, end, strides);\n\n    if (outShape.some(axis => axis === 0)) {\n      return tensor([], outShape);\n    }\n\n    const program = new StridedSliceProgram(begin, strides, outShape);\n    return this.compileAndRun(program, [x]);\n  }\n\n  reverse(x, axis) {\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new ReversePackedProgram(x.shape, axis) : new ReverseProgram(x.shape, axis);\n    return this.compileAndRun(program, [x]);\n  }\n\n  concat(tensors, axis) {\n    if (tensors[0].dtype === 'complex64') {\n      const reals = tensors.map(t => real(t));\n      const imags = tensors.map(t => imag(t));\n      return complex(this.concat(reals, axis), this.concat(imags, axis));\n    }\n\n    if (this.shouldExecuteOnCPU(tensors)) {\n      return this.cpuBackend.concat(tensors, axis);\n    }\n\n    if (tensors.length === 1) {\n      return tensors[0];\n    }\n\n    if (tensors.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n      const midIndex = Math.floor(tensors.length / 2);\n      const leftSide = this.concat(tensors.slice(0, midIndex), axis);\n      const rightSide = this.concat(tensors.slice(midIndex), axis);\n      return this.concat([leftSide, rightSide], axis);\n    }\n\n    if (env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') && tensors[0].rank > 1) {\n      const program = new ConcatPackedProgram(tensors.map(t => t.shape), axis);\n      return this.compileAndRun(program, tensors);\n    } // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n\n\n    const outShape = backend_util.computeOutShape(tensors.map(t => t.shape), axis);\n    const tensors2D = tensors.map(t => t.as2D(-1, util.sizeFromShape(t.shape.slice(axis))));\n    const program = new ConcatProgram(tensors2D.map(t => t.shape));\n    const res = this.compileAndRun(program, tensors2D);\n    return res.reshape(outShape);\n  }\n\n  neg(x) {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.neg(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.NEG, x.dtype);\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.NEG);\n    return this.compileAndRun(program, [x]);\n  }\n\n  batchMatMul(a, b, transposeA, transposeB) {\n    const outerShapeA = transposeA ? a.shape[2] : a.shape[1];\n    const outerShapeB = transposeB ? b.shape[1] : b.shape[2];\n    const sharedDim = transposeA ? a.shape[1] : a.shape[2];\n    const [batch,,] = a.shape; // Since the matrices are vectors, it is faster to call mul().sum()\n    // because sum() is O(sqrt(N)) due to divide-and-conquer.\n\n    if ((outerShapeA === 1 || outerShapeB === 1) && sharedDim > MATMUL_SHARED_DIM_THRESHOLD) {\n      if (transposeA) {\n        a = transpose(a, [0, 2, 1]);\n      }\n\n      if (transposeB) {\n        b = transpose(b, [0, 2, 1]);\n      }\n\n      const a3D = outerShapeB === 1 ? a : a.as3D(batch, sharedDim, 1);\n      const axis = outerShapeB === 1 ? 2 : 1;\n      const b3D = outerShapeB === 1 ? b.as3D(batch, 1, sharedDim) : b;\n      return this.multiply(a3D, b3D).sum(axis, true\n      /* keepDims */\n      );\n    }\n\n    const dtype = upcastType(a.dtype, b.dtype);\n    const program = new MatMulPackedProgram(a.shape, [batch, outerShapeA, outerShapeB], transposeA, transposeB);\n    return this.compileAndRun(program, [a, b], dtype);\n  }\n\n  fusedBatchMatMul({\n    a,\n    b,\n    transposeA,\n    transposeB,\n    bias,\n    activation,\n    preluActivationWeights\n  }) {\n    const outerShapeA = transposeA ? a.shape[2] : a.shape[1];\n    const outerShapeB = transposeB ? b.shape[1] : b.shape[2];\n    const [batch,,] = a.shape;\n    const dtype = upcastType(a.dtype, b.dtype);\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const fusedActivation = activation ? mapActivationToShaderProgram(activation, true) : null;\n    const program = new MatMulPackedProgram(a.shape, [batch, outerShapeA, outerShapeB], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights);\n    const inputs = [a, b];\n\n    if (bias) {\n      inputs.push(bias);\n    }\n\n    if (preluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n\n    return this.compileAndRun(program, inputs, dtype);\n  }\n\n  multiply(a, b) {\n    if (a.dtype === 'complex64') {\n      const aData = this.texData.get(a.dataId);\n      const bData = this.texData.get(b.dataId);\n      const realProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n      const imagProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n      const inputs = [this.makeComplexComponentTensorInfo(a, aData.complexTensors.real), this.makeComplexComponentTensorInfo(a, aData.complexTensors.imag), this.makeComplexComponentTensorInfo(b, bData.complexTensors.real), this.makeComplexComponentTensorInfo(b, bData.complexTensors.imag)];\n      const real = this.compileAndRun(realProgram, inputs);\n      const imag = this.compileAndRun(imagProgram, inputs);\n      const complex = this.complex(real, imag);\n      real.dispose();\n      imag.dispose();\n      return complex;\n    }\n\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.multiply(a, b);\n    }\n\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_gpu.MUL, a.dtype);\n    }\n\n    const program = new BinaryOpProgram(binaryop_gpu.MUL, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], a.dtype);\n  }\n\n  batchNorm(x, mean, variance, offset, scale, varianceEpsilon) {\n    const inputs = [x, mean, variance];\n    let offsetShape = null;\n\n    if (offset != null) {\n      offsetShape = offset.shape;\n      inputs.push(offset);\n    }\n\n    let scaleShape = null;\n\n    if (scale != null) {\n      scaleShape = scale.shape;\n      inputs.push(scale);\n    }\n\n    if (env().getBool('WEBGL_PACK_NORMALIZATION')) {\n      const batchNormPackedProgram = new BatchNormPackedProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n      return this.compileAndRun(batchNormPackedProgram, inputs);\n    }\n\n    const batchNormProgram = new BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n    return this.compileAndRun(batchNormProgram, inputs);\n  }\n\n  localResponseNormalization4D(x, radius, bias, alpha, beta) {\n    const program = env().getBool('WEBGL_PACK_NORMALIZATION') ? new LRNPackedProgram(x.shape, radius, bias, alpha, beta) : new LRNProgram(x.shape, radius, bias, alpha, beta);\n    return this.compileAndRun(program, [x]);\n  }\n\n  LRNGrad(dy, inputImage, outputImage, depthRadius, bias, alpha, beta) {\n    const program = new LRNGradProgram(inputImage.shape, depthRadius, bias, alpha, beta);\n    return this.compileAndRun(program, [inputImage, outputImage, dy]);\n  }\n\n  tile(x, reps) {\n    if (x.dtype === 'string') {\n      const data = this.readSync(x.dataId);\n      const decodedData = data.map(d => util.decodeString(d));\n      const buf = buffer(x.shape, x.dtype, decodedData);\n      return tile(buf, reps);\n    }\n\n    const program = new TileProgram(x.shape, reps);\n    return this.compileAndRun(program, [x]);\n  }\n\n  pad(x, paddings, constantValue) {\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new PadPackedProgram(x.shape, paddings, constantValue) : new PadProgram(x.shape, paddings, constantValue);\n    return this.compileAndRun(program, [x]);\n  }\n\n  gather(x, indices, axis) {\n    if (this.shouldExecuteOnCPU([x, indices])) {\n      return this.cpuBackend.gather(x, indices, axis);\n    }\n\n    const program = new GatherProgram(x.shape, indices.size, axis);\n    return this.compileAndRun(program, [x, indices]);\n  }\n\n  batchToSpaceND(x, blockShape, crops) {\n    util.assert(x.rank <= 4, () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' + 'implemented yet');\n    const prod = blockShape.reduce((a, b) => a * b);\n    const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n    const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n    const reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n    const sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n    const sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n    return transpose(x.reshape(reshaped), permuted).reshape(reshapedPermuted).slice(sliceBeginCoords, sliceSize);\n  }\n\n  spaceToBatchND(x, blockShape, paddings) {\n    util.assert(x.rank <= 4, () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' + 'implemented yet');\n    const prod = blockShape.reduce((a, b) => a * b);\n    const completePaddings = [[0, 0]];\n    completePaddings.push(...paddings);\n\n    for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n      completePaddings.push([0, 0]);\n    }\n\n    const paddedX = x.pad(completePaddings);\n    const reshapedPaddedShape = backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n    const permutedReshapedPaddedPermutation = backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n    const flattenShape = backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n    const paddedXT = transpose(paddedX.reshape(reshapedPaddedShape), permutedReshapedPaddedPermutation);\n    return reshape(paddedXT, flattenShape);\n  }\n\n  reduce(x, reduceType, dtype) {\n    const batchSize = x.shape[0];\n    const inSize = x.shape[1];\n    const windowSize = backend_util.computeOptimalWindowSize(inSize);\n    const outSize = Math.ceil(inSize / windowSize);\n    const reduceInfo = {\n      windowSize,\n      inSize,\n      batchSize,\n      outSize\n    };\n    const program = new ReduceProgram(reduceInfo, reduceType);\n    const output = this.compileAndRun(program, [x], dtype); // No need to run another GPGPU program.\n\n    if (output.shape[1] === 1) {\n      return output;\n    }\n\n    return this.reduce(output, reduceType, dtype);\n  }\n\n  argReduce(x, reduceType, bestIndicesA = null) {\n    let batchSize = x.shape[0];\n    let inSize = x.shape[1];\n\n    if (bestIndicesA != null) {\n      batchSize = bestIndicesA.shape[0];\n      inSize = bestIndicesA.shape[1];\n    }\n\n    const windowSize = backend_util.computeOptimalWindowSize(inSize);\n    const reduceInfo = {\n      windowSize,\n      inSize,\n      batchSize,\n      outSize: Math.ceil(inSize / windowSize)\n    };\n    const program = new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n    const inputs = [x];\n\n    if (bestIndicesA != null) {\n      inputs.push(bestIndicesA);\n    }\n\n    const output = this.compileAndRun(program, inputs, 'int32'); // No need to run another GPGPU program.\n\n    if (output.shape[1] === 1) {\n      return output;\n    }\n\n    return this.argReduce(x, reduceType, output);\n  }\n\n  argReducePacked(x, reduceType, bestIndicesA = null) {\n    const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n    const inSize = inShape[inShape.length - 1];\n    const windowSize = backend_util.computeOptimalWindowSize(inSize);\n    const program = new ArgMinMaxPackedProgram(inShape, windowSize, reduceType, bestIndicesA == null);\n    const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n    const output = this.compileAndRun(program, inputs, 'int32');\n\n    if (output.rank === x.rank) {\n      return this.argReducePacked(x, reduceType, output);\n    }\n\n    return output;\n  }\n\n  sum(x, axes) {\n    backend_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    const outputDType = tf.sumOutType(x.dtype);\n    return this.reduce(a2D, 'sum', outputDType).reshape(outShape);\n  }\n\n  prod(x, axes) {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.prod(x, axes);\n    }\n\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    const outputDType = tf.sumOutType(x.dtype);\n    return this.reduce(a2D, 'prod', outputDType).reshape(outShape);\n  }\n\n  unsortedSegmentSum(x, segmentIds, numSegments) {\n    let axis = 0;\n    const permutation = backend_util.getAxesPermutation([axis], x.rank);\n    let permutedX = x;\n\n    if (permutation != null) {\n      permutedX = transpose(x, permutation);\n      axis = backend_util.getInnerMostAxes(1, x.rank)[0];\n    }\n\n    const outShape = segment_util.computeOutShape(permutedX.shape, axis, numSegments);\n    const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n    const a2D = permutedX.as2D(-1, inSize);\n    const outputDType = tf.sumOutType(x.dtype);\n    let result = this.segOpCompute(a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments).reshape(outShape);\n\n    if (permutation != null) {\n      result = transpose(result, backend_util.getUndoAxesPermutation(permutation));\n    }\n\n    return result;\n  }\n\n  segOpCompute(x, segOpType, segmentIds, dtype, numSegments) {\n    const batchSize = x.shape[0];\n    const inSize = x.shape[1];\n    const windowSize = segment_util.segOpComputeOptimalWindowSize(inSize, numSegments);\n    const segOpInfo = {\n      windowSize,\n      inSize,\n      batchSize,\n      numSegments\n    };\n    const program = new SegmentOpProgram(segOpInfo, segOpType);\n    const output = this.compileAndRun(program, [x, segmentIds], dtype); // No need to run another GPGPU program.\n\n    if (output.shape[1] === numSegments) {\n      return output;\n    }\n\n    segmentIds = range(0, numSegments).tile([inSize / windowSize]);\n    return this.segOpCompute(output, segOpType, segmentIds, dtype, numSegments);\n  }\n\n  argMinMaxReduce(x, axis, reduceType) {\n    const axes = [axis];\n    backend_util.assertAxesAreInnerMostDims('arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.rank);\n\n    if (!env().getBool('WEBGL_PACK_REDUCE') || x.rank <= 2) {\n      const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n      const inSize = util.sizeFromShape(reduceShape);\n      const a2D = x.as2D(-1, inSize);\n      return this.argReduce(a2D, reduceType).reshape(outShape);\n    }\n\n    return this.argReducePacked(x, reduceType);\n  }\n\n  argMin(x, axis) {\n    return this.argMinMaxReduce(x, axis, 'min');\n  }\n\n  argMax(x, axis) {\n    return this.argMinMaxReduce(x, axis, 'max');\n  }\n\n  cumsum(x, axis, exclusive, reverse) {\n    if (axis !== x.rank - 1) {\n      throw new Error(`WebGL cumsum shader expects an inner-most axis=${x.rank - 1} ` + `but got axis=${axis}`);\n    }\n\n    const size = x.shape[axis];\n    let result = x; // Use cumsum parallel algorithm, ref:\n    // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n\n    for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n      const program = new CumSumProgram(x.shape, false, reverse);\n      const customSetup = program.getCustomSetupFunc(i);\n      const prevResult = result;\n      result = this.compileAndRun(program, [result], result.dtype, customSetup);\n      prevResult.dispose();\n    } // For exclusive cumsum, shift the end result in the direction of sum and\n    // add 0 to the front index.\n\n\n    if (exclusive) {\n      const program = new CumSumProgram(x.shape, exclusive, reverse);\n      const prevResult = result;\n      result = this.compileAndRun(program, [result]);\n      prevResult.dispose();\n    }\n\n    return result;\n  }\n\n  equal(a, b) {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.EQUAL, 'bool');\n    }\n\n    const program = new BinaryOpProgram(binaryop_gpu.EQUAL, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  notEqual(a, b) {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.NOT_EQUAL, 'bool');\n    }\n\n    const program = new BinaryOpProgram(binaryop_gpu.NOT_EQUAL, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  less(a, b) {\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.less(a, b);\n    }\n\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LESS, 'bool');\n    }\n\n    const program = new BinaryOpProgram(binaryop_gpu.LESS, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  lessEqual(a, b) {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LESS_EQUAL, 'bool');\n    }\n\n    const program = new BinaryOpProgram(binaryop_gpu.LESS_EQUAL, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  greater(a, b) {\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.greater(a, b);\n    }\n\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.GREATER, 'bool');\n    }\n\n    const program = new BinaryOpProgram(binaryop_gpu.GREATER, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  greaterEqual(a, b) {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.GREATER_EQUAL, 'bool');\n    }\n\n    const program = new BinaryOpProgram(binaryop_gpu.GREATER_EQUAL, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  logicalNot(x) {\n    const program = new UnaryOpProgram(x.shape, unary_op.LOGICAL_NOT);\n    return this.compileAndRun(program, [x]);\n  }\n\n  logicalAnd(a, b) {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LOGICAL_AND, 'bool');\n    }\n\n    const program = new BinaryOpProgram(binaryop_gpu.LOGICAL_AND, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  logicalOr(a, b) {\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.LOGICAL_OR, 'bool');\n    }\n\n    const program = new BinaryOpProgram(binaryop_gpu.LOGICAL_OR, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], 'bool');\n  }\n\n  select(condition, a, b) {\n    const program = new SelectProgram(condition.rank, a.shape, a.rank);\n    return this.compileAndRun(program, [condition, a, b], upcastType(a.dtype, b.dtype));\n  }\n\n  where(condition) {\n    backend_util.warn('tf.where() in webgl locks the UI thread. ' + 'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  topk(x, k, sorted) {\n    const xVals = x.dataSync();\n    return topkImpl(xVals, x.shape, x.dtype, k, sorted);\n  }\n\n  min(x, axes) {\n    backend_util.assertAxesAreInnerMostDims('min', axes, x.rank);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    return this.reduce(a2D, 'min', a2D.dtype).reshape(outShape);\n  }\n\n  minimum(a, b) {\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.minimum(a, b);\n    }\n\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new BinaryOpPackedProgram(binaryop_packed_gpu.MIN, a.shape, b.shape) : new BinaryOpProgram(binaryop_gpu.MIN, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  mod(a, b) {\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new BinaryOpPackedProgram(binaryop_packed_gpu.MOD, a.shape, b.shape) : new BinaryOpProgram(binaryop_gpu.MOD, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  maximum(a, b) {\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.maximum(a, b);\n    }\n\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new BinaryOpPackedProgram(binaryop_packed_gpu.MAX, a.shape, b.shape) : new BinaryOpProgram(binaryop_gpu.MAX, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  all(x, axes) {\n    backend_util.assertAxesAreInnerMostDims('all', axes, x.rank);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    return this.reduce(a2D, 'all', a2D.dtype).reshape(outShape);\n  }\n\n  any(x, axes) {\n    backend_util.assertAxesAreInnerMostDims('any', axes, x.rank);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = x.as2D(-1, inSize);\n    return this.reduce(a2D, 'any', a2D.dtype).reshape(outShape);\n  }\n\n  floorDiv(a, b) {\n    const op = binaryop_gpu.INT_DIV;\n    const outputDtype = 'int32';\n\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_packed_gpu.INT_DIV, outputDtype);\n    }\n\n    const program = new BinaryOpProgram(op, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], outputDtype);\n  }\n\n  add(a, b) {\n    if (a.dtype === 'complex64' && b.dtype === 'complex64') {\n      return this.complexSeparableBinaryOp(a, b, binaryop_gpu.ADD);\n    }\n\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.add(a, b);\n    }\n\n    const dtype = upcastType(a.dtype, b.dtype);\n\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_gpu.ADD, dtype);\n    }\n\n    const program = new BinaryOpProgram(binaryop_gpu.ADD, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], dtype);\n  }\n\n  packedUnaryOp(x, op, dtype) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    return this.compileAndRun(program, [x], dtype);\n  }\n\n  packedBinaryOp(a, b, op, dtype, checkOutOfBounds = false) {\n    const program = new BinaryOpPackedProgram(op, a.shape, b.shape, checkOutOfBounds);\n    return this.compileAndRun(program, [a, b], dtype);\n  }\n  /**\n   * Computes a complex binary operation that can be decomposed into a simple\n   * binary operation on both the real and imagary parts.\n   */\n\n\n  complexSeparableBinaryOp(a, b, op) {\n    const aData = this.texData.get(a.dataId);\n    const bData = this.texData.get(b.dataId);\n    const [real, imag] = [[aData.complexTensors.real, bData.complexTensors.real], [aData.complexTensors.imag, bData.complexTensors.imag]].map(complexParts => {\n      const [aPart, bPart] = complexParts;\n      const aHandle = this.makeComplexComponentTensorInfo(a, aPart);\n      const bHandle = this.makeComplexComponentTensorInfo(b, bPart);\n      const program = new BinaryOpProgram(op, a.shape, b.shape);\n      return this.compileAndRun(program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n    });\n    const complex = this.complex(real, imag);\n    real.dispose();\n    imag.dispose();\n    return complex;\n  } // Returns a TensorInfo with the complex shape and the dataId of the\n  // underlying part. We need to do this because a reshaped complex tensor is\n  // not reflected in its parts.\n\n\n  makeComplexComponentTensorInfo(complexTensor, complexPart) {\n    return {\n      dataId: complexPart.dataId,\n      dtype: complexPart.dtype,\n      shape: complexTensor.shape\n    };\n  }\n\n  addN(tensors) {\n    if (tensors.length === 1) {\n      return tensors[0];\n    } // Limit the number of uploaded textures for optimization.\n\n\n    if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n      const midIndex = Math.floor(tensors.length / 2);\n      const leftSide = this.addN(tensors.slice(0, midIndex));\n      const rightSide = this.addN(tensors.slice(midIndex));\n      return this.addN([leftSide, rightSide]);\n    }\n\n    const dtype = tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n    const shapes = tensors.map(t => t.shape); // We can make sure shapes are identical in op level.\n\n    const usePackedOp = env().getBool('WEBGL_PACK');\n    const program = usePackedOp ? new AddNPackedProgram(tensors[0].shape, shapes) : new AddNProgram(tensors[0].shape, shapes);\n    return this.compileAndRun(program, tensors, dtype);\n  }\n\n  subtract(a, b) {\n    if (a.dtype === 'complex64' && b.dtype === 'complex64') {\n      return this.complexSeparableBinaryOp(a, b, binaryop_gpu.SUB);\n    }\n\n    if (this.shouldExecuteOnCPU([a, b])) {\n      return this.cpuBackend.subtract(a, b);\n    }\n\n    const dtype = upcastType(a.dtype, b.dtype);\n\n    if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n      return this.packedBinaryOp(a, b, binaryop_gpu.SUB, a.dtype);\n    }\n\n    const program = new BinaryOpProgram(binaryop_gpu.SUB, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b], dtype);\n  }\n\n  pow(a, b) {\n    const usePackedOp = env().getBool('WEBGL_PACK_BINARY_OPERATIONS');\n    const program = usePackedOp ? new BinaryOpPackedProgram(binaryop_packed_gpu.POW, a.shape, b.shape) : new BinaryOpProgram(binaryop_gpu.POW, a.shape, b.shape);\n    const dtype = upcastType(a.dtype, b.dtype);\n    return this.compileAndRun(program, [a, b], dtype);\n  }\n\n  ceil(x) {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.ceil(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.CEIL, x.dtype);\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.CEIL);\n    return this.compileAndRun(program, [x]);\n  }\n\n  floor(x) {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.floor(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.FLOOR, x.dtype);\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.FLOOR);\n    return this.compileAndRun(program, [x]);\n  }\n\n  sign(x) {\n    const program = new UnaryOpProgram(x.shape, unary_op.SIGN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  isNaN(x) {\n    const program = new UnaryOpProgram(x.shape, unary_op.IS_NAN);\n    return this.compileAndRun(program, [x], 'bool');\n  }\n\n  isInf(x) {\n    const program = new UnaryOpProgram(x.shape, unary_op.IS_INF);\n    return this.compileAndRun(program, [x], 'bool');\n  }\n\n  isFinite(x) {\n    const program = new UnaryOpProgram(x.shape, unary_op.IS_FINITE);\n    return this.compileAndRun(program, [x], 'bool');\n  }\n\n  round(x) {\n    const program = new UnaryOpProgram(x.shape, unary_op.ROUND);\n    return this.compileAndRun(program, [x]);\n  }\n\n  exp(x) {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.exp(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.EXP, x.dtype);\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.EXP);\n    return this.compileAndRun(program, [x]);\n  }\n\n  expm1(x) {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.expm1(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.EXPM1, x.dtype);\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.EXPM1);\n    return this.compileAndRun(program, [x]);\n  }\n\n  softmax(logits, dim) {\n    const axes = util.parseAxisParam([dim], logits.shape); // TODO(annxingyuan): Call maxImpl rather than op as part of softmax kernel\n    // modularization.\n\n    const maxLogit = max(logits, axes);\n    const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n    const a = this.subtract(logits, maxLogit.reshape(expandedShape));\n    const b = this.exp(a);\n    const sumExp = this.sum(b, axes).reshape(expandedShape); // TODO(annxingyuan): Call divImpl rather than op as part of softmax kernel\n    // modularization.\n\n    return div(b, sumExp);\n  }\n\n  log(x) {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.log(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_packed_op.LOG, x.dtype);\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.LOG);\n    return this.compileAndRun(program, [x]);\n  }\n\n  log1p(x) {\n    const program = new UnaryOpProgram(x.shape, unary_op.LOG1P);\n    return this.compileAndRun(program, [x]);\n  }\n\n  sqrt(x) {\n    const program = new UnaryOpProgram(x.shape, unary_op.SQRT);\n    return this.compileAndRun(program, [x]);\n  }\n\n  rsqrt(x) {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.rsqrt(x);\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.RSQRT);\n    return this.compileAndRun(program, [x]);\n  }\n\n  reciprocal(x) {\n    const program = new UnaryOpProgram(x.shape, unary_op.RECIPROCAL);\n    return this.compileAndRun(program, [x]);\n  }\n\n  relu(x) {\n    let program;\n\n    if (env().getBool('WEBGL_PACK')) {\n      program = new UnaryOpPackedProgram(x.shape, unary_packed_op.RELU);\n    } else {\n      program = new UnaryOpProgram(x.shape, unary_op.RELU);\n    }\n\n    return this.compileAndRun(program, [x]);\n  }\n\n  relu6(x) {\n    let program;\n\n    if (env().getBool('WEBGL_PACK')) {\n      program = new UnaryOpPackedProgram(x.shape, unary_packed_op.RELU6);\n    } else {\n      program = new UnaryOpProgram(x.shape, unary_op.RELU6);\n    }\n\n    return this.compileAndRun(program, [x]);\n  }\n\n  prelu(x, alpha) {\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new BinaryOpPackedProgram(binaryop_packed_gpu.PRELU, x.shape, alpha.shape) : new BinaryOpProgram(binaryop_gpu.PRELU, x.shape, alpha.shape);\n    return this.compileAndRun(program, [x, alpha]);\n  }\n\n  elu(x) {\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_packed_op.ELU, x.dtype);\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ELU);\n    return this.compileAndRun(program, [x]);\n  }\n\n  eluDer(dy, y) {\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new BinaryOpPackedProgram(binaryop_packed_gpu.ELU_DER, dy.shape, y.shape) : new BinaryOpProgram(binaryop_gpu.ELU_DER, dy.shape, y.shape);\n    return this.compileAndRun(program, [dy, y]);\n  }\n\n  selu(x) {\n    const program = new UnaryOpProgram(x.shape, unary_op.SELU);\n    return this.compileAndRun(program, [x]);\n  }\n\n  int(x) {\n    const program = new UnaryOpProgram(x.shape, unary_op.TO_INT);\n    return this.compileAndRun(program, [x], 'int32');\n  }\n\n  clip(x, min, max) {\n    let program;\n\n    if (env().getBool('WEBGL_PACK_CLIP')) {\n      program = new ClipPackedProgram(x.shape);\n    } else {\n      program = new ClipProgram(x.shape);\n    }\n\n    const customSetup = program.getCustomSetupFunc(min, max);\n    return this.compileAndRun(program, [x], null, customSetup);\n  }\n\n  abs(x) {\n    if (this.shouldExecuteOnCPU([x])) {\n      return this.cpuBackend.abs(x);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype);\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    return this.compileAndRun(program, [x]);\n  }\n\n  complexAbs(x) {\n    const xData = this.texData.get(x.dataId);\n    const program = new ComplexAbsProgram(x.shape);\n    const inputs = [this.makeComplexComponentTensorInfo(x, xData.complexTensors.real), this.makeComplexComponentTensorInfo(x, xData.complexTensors.imag)];\n    return this.compileAndRun(program, inputs);\n  }\n\n  sigmoid(x) {\n    const program = new UnaryOpProgram(x.shape, unary_op.SIGMOID);\n    return this.compileAndRun(program, [x]);\n  }\n\n  softplus(x) {\n    const program = new UnaryOpProgram(x.shape, unary_op.SOFTPLUS);\n    return this.compileAndRun(program, [x]);\n  }\n\n  sin(x) {\n    const program = new UnaryOpProgram(x.shape, unary_op.SIN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  cos(x) {\n    const program = new UnaryOpProgram(x.shape, unary_op.COS);\n    return this.compileAndRun(program, [x]);\n  }\n\n  tan(x) {\n    const program = new UnaryOpProgram(x.shape, unary_op.TAN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  asin(x) {\n    const program = new UnaryOpProgram(x.shape, unary_op.ASIN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  acos(x) {\n    const program = new UnaryOpProgram(x.shape, unary_op.ACOS);\n    return this.compileAndRun(program, [x]);\n  }\n\n  atan(x) {\n    const program = new UnaryOpProgram(x.shape, unary_op.ATAN);\n    return this.compileAndRun(program, [x]);\n  }\n\n  atan2(a, b) {\n    const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new BinaryOpPackedProgram(binaryop_packed_gpu.ATAN2, a.shape, b.shape) : new BinaryOpProgram(binaryop_gpu.ATAN2, a.shape, b.shape);\n    return this.compileAndRun(program, [a, b]);\n  }\n\n  sinh(x) {\n    const program = new UnaryOpProgram(x.shape, unary_op.SINH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  cosh(x) {\n    const program = new UnaryOpProgram(x.shape, unary_op.COSH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  tanh(x) {\n    const program = new UnaryOpProgram(x.shape, unary_op.TANH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  asinh(x) {\n    const program = new UnaryOpProgram(x.shape, unary_op.ASINH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  acosh(x) {\n    const program = new UnaryOpProgram(x.shape, unary_op.ACOSH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  atanh(x) {\n    const program = new UnaryOpProgram(x.shape, unary_op.ATANH);\n    return this.compileAndRun(program, [x]);\n  }\n\n  erf(x) {\n    const program = new UnaryOpProgram(x.shape, unary_op.ERF);\n    return this.compileAndRun(program, [x]);\n  }\n\n  step(x, alpha) {\n    const program = new UnaryOpProgram(x.shape, unary_op.STEP(alpha));\n    return this.compileAndRun(program, [x]);\n  }\n\n  conv2dByMatMul(x, filter, convInfo, bias, activation, preluActivationWeights) {\n    // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n    // result from 2D to 4D.\n    const xShape = x.shape;\n    const xTexData = this.texData.get(x.dataId);\n    const sharedMatMulDim = convInfo.inChannels;\n    const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n    const outerShapeFilter = convInfo.outChannels;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    const transposeA = false;\n    const transposeB = false; // TODO: Once reduction ops are packed, batchMatMul will always be packed\n    // and we can remove this condition.\n\n    const batchMatMulWillBeUnpacked = (outerShapeX === 1 || outerShapeFilter === 1) && sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n    const reshapeWillBeExpensive = xShape[2] % 2 !== 0 && !!xTexData.isPacked;\n\n    if (batchMatMulWillBeUnpacked || !env().getBool('WEBGL_LAZILY_UNPACK') || !env().getBool('WEBGL_PACK_BINARY_OPERATIONS') || !reshapeWillBeExpensive) {\n      const targetShape = isChannelsLast ? xShape[0] * xShape[1] * xShape[2] : xShape[0] * xShape[2] * xShape[3];\n      const xReshaped = this.reshape(x, [1, targetShape, convInfo.inChannels]);\n      const filterReshaped = this.reshape(filter, [1, convInfo.inChannels, convInfo.outChannels]);\n      return this.reshape(this.fusedBatchMatMul({\n        a: xReshaped,\n        b: filterReshaped,\n        transposeA,\n        transposeB,\n        bias,\n        activation,\n        preluActivationWeights\n      }), convInfo.outShape);\n    } // Following optimization is specific to packed |x| with odd row count\n    // (For example, in channelLast mode, 'row count' refers to x.shape[2]):\n    // we avoid expensive packed 2x2 reshape by padding row count to next,\n    // even number. When x.shape[2] is odd, the result of packed batchMatMul is\n    // the same (has the same texture layout and and values in the texture) as\n    // it is for even x.shape[2] + 1. We make the odd-rows tensor to look like\n    // even-rows tensor before the operation and, after the batchMatMul,\n    // fix the even-rows result to have odd number of rows.\n\n\n    const targetShape = isChannelsLast ? xShape[0] * xShape[1] * (xShape[2] + 1) : xShape[0] * xShape[2] * (xShape[3] + 1);\n    const xReshaped = {\n      dataId: x.dataId,\n      shape: [1, targetShape, convInfo.inChannels],\n      dtype: x.dtype\n    }; // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n    // Decrementing row count, after batchMatMul->...->compileProgram leads to\n    // invalid row count within the reference in GPGPUBinary.inShapeInfos.\n    // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n    // in compileProgram method, but that would affect compilation of all\n    // programs - instead, provide a copy here, with even row count, before\n    // calling batchMatMul->...->compileProgram and after that, the original\n    // xTexData.shape is restored.\n\n    const originalXTexDataShape = xTexData.shape;\n    xTexData.shape = xTexData.shape.slice();\n    xTexData.shape[xTexData.shape.length - 2]++;\n    util.assert(webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape), () => `packed reshape ${xTexData.shape} to ${xReshaped.shape} isn't free`);\n    const filterReshaped = this.reshape(filter, [1, convInfo.inChannels, convInfo.outChannels]);\n    const pointwiseConv = this.fusedBatchMatMul({\n      a: xReshaped,\n      b: filterReshaped,\n      transposeA,\n      transposeB,\n      bias,\n      activation,\n      preluActivationWeights\n    });\n    const pointwiseConvTexData = this.texData.get(pointwiseConv.dataId);\n    util.assert(pointwiseConvTexData.isPacked, () => 'batchMatMul result is expected to be packed'); // Restore the input shape to original.\n\n    xTexData.shape = originalXTexDataShape; // Set the output shape - there is no need for expensive reshape as data\n    // layout is already correct.\n\n    pointwiseConvTexData.shape = convInfo.outShape;\n    return engine().makeTensorFromDataId(pointwiseConv.dataId, convInfo.outShape, pointwiseConv.dtype);\n  }\n\n  conv2dWithIm2Row(x, filter, convInfo, bias, activation, preluActivationWeights) {\n    // Rearranges conv2d input so each block to be convolved over forms the\n    // column of a new matrix with shape [filterWidth * filterHeight *\n    // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n    // output channel forms a row of a new matrix with shape [outChannels,\n    // filterWidth * filterHeight * inChannels]. The convolution is then\n    // computed by multiplying these matrices and reshaping the result.\n    const {\n      filterWidth,\n      filterHeight,\n      inChannels,\n      outWidth,\n      outHeight,\n      dataFormat\n    } = convInfo;\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const sharedDim = filterWidth * filterHeight * inChannels;\n    const numCols = outHeight * outWidth;\n    const x2ColShape = [sharedDim, numCols];\n    const transposeA = true;\n    const transposeB = false;\n    const xSqueezed = x.squeeze([0]);\n    const w2Row = filter.reshape([1, sharedDim, -1]);\n    const im2ColProgram = new Im2ColPackedProgram(x2ColShape, xSqueezed.shape, convInfo);\n    const im2Col = this.compileAndRun(im2ColProgram, [xSqueezed]).reshape([1, x2ColShape[0], x2ColShape[1]]);\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const fusedActivation = activation ? mapActivationToShaderProgram(activation, true) : null;\n    const matmulProgram = new MatMulPackedProgram(im2Col.shape, [1, numCols, convInfo.outChannels], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights);\n    const inputs = [im2Col, w2Row];\n\n    if (bias) {\n      inputs.push(bias);\n    }\n\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n\n    const product = this.compileAndRun(matmulProgram, inputs);\n\n    if (isChannelsLast) {\n      return product.reshape([1, outHeight, outWidth, convInfo.outChannels]);\n    } else {\n      return product.reshape([1, convInfo.outChannels, outHeight, outWidth]);\n    }\n  }\n\n  fusedConv2d({\n    input,\n    filter,\n    convInfo,\n    bias,\n    activation,\n    preluActivationWeights\n  }) {\n    if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n      return this.conv2dByMatMul(input, filter, convInfo, bias, activation, preluActivationWeights);\n    }\n\n    if (env().getBool('WEBGL_CONV_IM2COL') && input.shape[0] === 1) {\n      return this.conv2dWithIm2Row(input, filter, convInfo, bias, activation, preluActivationWeights);\n    }\n\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const fusedActivation = activation ? mapActivationToShaderProgram(activation, false) : null;\n    const program = new Conv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n    const inputs = [input, filter];\n\n    if (bias) {\n      inputs.push(bias);\n    }\n\n    if (preluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n\n    return this.compileAndRun(program, inputs);\n  }\n\n  conv2d(x, filter, convInfo) {\n    if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n      return this.conv2dByMatMul(x, filter, convInfo);\n    }\n\n    if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n      return this.conv2dWithIm2Row(x, filter, convInfo);\n    }\n\n    const program = new Conv2DProgram(convInfo);\n    return this.compileAndRun(program, [x, filter]);\n  }\n\n  conv2dDerInput(dy, filter, convInfo) {\n    const program = new Conv2DDerInputProgram(convInfo);\n    return this.compileAndRun(program, [dy, filter]);\n  }\n\n  conv2dDerFilter(x, dy, convInfo) {\n    const program = new Conv2DDerFilterProgram(convInfo);\n    return this.compileAndRun(program, [x, dy]);\n  }\n\n  fusedDepthwiseConv2D({\n    input,\n    filter,\n    convInfo,\n    bias,\n    activation,\n    preluActivationWeights\n  }) {\n    const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1;\n    const fusedActivation = activation ? mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) : null;\n    const inputs = [input, filter];\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n\n    if (hasBias) {\n      inputs.push(bias);\n    }\n\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n\n    let program;\n\n    if (shouldPackDepthwiseConv) {\n      program = new DepthwiseConvPacked2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n      return this.compileAndRun(program, inputs);\n    }\n\n    program = new DepthwiseConv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n    return this.compileAndRun(program, inputs);\n  }\n\n  depthwiseConv2D(x, filter, convInfo) {\n    let program;\n\n    if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1) {\n      program = new DepthwiseConvPacked2DProgram(convInfo);\n      return this.compileAndRun(program, [x, filter]);\n    }\n\n    program = new DepthwiseConv2DProgram(convInfo);\n    return this.compileAndRun(program, [x, filter]);\n  }\n\n  depthwiseConv2DDerInput(dy, filter, convInfo) {\n    const program = new DepthwiseConv2DDerInputProgram(convInfo);\n    return this.compileAndRun(program, [dy, filter]);\n  }\n\n  depthwiseConv2DDerFilter(x, dy, convInfo) {\n    const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n    return this.compileAndRun(program, [x, dy]);\n  }\n\n  conv3d(x, filter, convInfo) {\n    const program = new Conv3DProgram(convInfo);\n    return this.compileAndRun(program, [x, filter]);\n  }\n\n  conv3dDerInput(dy, filter, convInfo) {\n    const program = new Conv3DDerInputProgram(convInfo);\n    return this.compileAndRun(program, [dy, filter]);\n  }\n\n  conv3dDerFilter(x, dy, convInfo) {\n    const program = new Conv3DDerFilterProgram(convInfo);\n    return this.compileAndRun(program, [x, dy]);\n  }\n\n  maxPool(x, convInfo) {\n    const program = new Pool2DProgram(convInfo, 'max', false);\n    return this.compileAndRun(program, [x]);\n  }\n\n  avgPool(x, convInfo) {\n    const program = new Pool2DProgram(convInfo, 'avg', false);\n    return this.compileAndRun(program, [x], 'float32');\n  }\n\n  maxPoolBackprop(dy, x, y, convInfo) {\n    const getPositions = true;\n    const maxPoolPositionsProgram = new Pool2DProgram(convInfo, 'max', getPositions);\n    const maxPoolPositions = this.compileAndRun(maxPoolPositionsProgram, [x]);\n    const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n    const result = this.compileAndRun(maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n    maxPoolPositions.dispose();\n    return result;\n  }\n\n  avgPoolBackprop(dy, x, convInfo) {\n    const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n    return this.compileAndRun(avgPoolBackpropProgram, [dy], x.dtype);\n  }\n\n  cast(x, dtype) {\n    return backend_util.castTensor(x, dtype, this);\n  }\n\n  unstack(x, axis) {\n    const num = x.shape[axis];\n    const outShape = new Array(x.rank - 1);\n    let outIndex = 0;\n\n    for (let i = 0; i < x.rank; i++) {\n      if (i !== axis) {\n        outShape[outIndex++] = x.shape[i];\n      }\n    }\n\n    const begin = new Array(x.rank).fill(0);\n    const size = x.shape.slice();\n    size[axis] = 1;\n    const res = new Array(num);\n\n    for (let i = 0; i < res.length; i++) {\n      begin[axis] = i;\n      res[i] = this.slice(x, begin, size).reshape(outShape);\n    }\n\n    return res;\n  }\n\n  avgPool3d(x, convInfo) {\n    const program = new Pool3DProgram(convInfo, 'avg', false);\n    return this.compileAndRun(program, [x], 'float32');\n  }\n\n  avgPool3dBackprop(dy, x, convInfo) {\n    const avgPool3dBackpropProgram = new AvgPool3DBackpropProgram(convInfo);\n    return this.compileAndRun(avgPool3dBackpropProgram, [dy], x.dtype);\n  }\n\n  maxPool3d(x, convInfo) {\n    const program = new Pool3DProgram(convInfo, 'max', false);\n    return this.compileAndRun(program, [x], 'float32');\n  }\n\n  maxPool3dBackprop(dy, x, y, convInfo) {\n    const getPositions = true;\n    const maxPool3dPositionsProgram = new Pool3DProgram(convInfo, 'max', getPositions);\n    const maxPool3dPositions = this.compileAndRun(maxPool3dPositionsProgram, [x]);\n    const maxPool3dBackPropProgram = new MaxPool3DBackpropProgram(convInfo);\n    const result = this.compileAndRun(maxPool3dBackPropProgram, [dy, maxPool3dPositions], x.dtype);\n    maxPool3dPositions.dispose();\n    return result;\n  }\n\n  reshape(x, shape) {\n    const texData = this.texData.get(x.dataId);\n\n    if (texData.isPacked && !webgl_util.isReshapeFree(x.shape, shape) && !(texData.texture !== null && webgl_util.isReshapeFree(texData.shape, shape))) {\n      const info = this.packedReshape(x, shape);\n      return engine().makeTensorFromDataId(info.dataId, info.shape, info.dtype);\n    }\n\n    return backend_util.reshapeTensor(x, shape);\n  }\n\n  resizeBilinear(x, newHeight, newWidth, alignCorners) {\n    const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ? new ResizeBilinearPackedProgram(x.shape, newHeight, newWidth, alignCorners) : new ResizeBilinearProgram(x.shape, newHeight, newWidth, alignCorners);\n    return this.compileAndRun(program, [x], 'float32');\n  }\n\n  resizeBilinearBackprop(dy, x, alignCorners) {\n    const program = new ResizeBilinearBackpropProgram(dy, x, alignCorners);\n    return this.compileAndRun(program, [dy]);\n  }\n\n  resizeNearestNeighbor(x, newHeight, newWidth, alignCorners) {\n    const program = new ResizeNearestNeighborProgram(x.shape, newHeight, newWidth, alignCorners);\n    return this.compileAndRun(program, [x]);\n  }\n\n  resizeNearestNeighborBackprop(dy, x, alignCorners) {\n    const program = new ResizeNearestNeigborBackpropProgram(dy, x, alignCorners);\n    return this.compileAndRun(program, [dy]);\n  }\n\n  multinomial(logits, normalized, numSamples, seed) {\n    const probs = normalized ? logits : softmax(logits);\n    const batchSize = probs.shape[0];\n    const numOutcomes = probs.shape[1];\n    const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n    const customSetup = program.getCustomSetupFunc(seed);\n    return this.compileAndRun(program, [probs], 'int32', customSetup);\n  }\n\n  oneHot(indices, depth, onValue, offValue) {\n    const program = new OneHotProgram(indices.size, depth, onValue, offValue);\n    return this.compileAndRun(program, [indices]);\n  }\n\n  diag(x) {\n    const program = new DiagProgram(x.size);\n    return this.compileAndRun(program, [x]);\n  }\n\n  cropAndResize(image, boxes, boxIndex, cropSize, method, extrapolationValue) {\n    const program = new CropAndResizeProgram(image.shape, boxes.shape, cropSize, method, extrapolationValue);\n    return this.compileAndRun(program, [image, boxes, boxIndex], 'float32');\n  }\n\n  depthToSpace(x, blockSize, dataFormat) {\n    util.assert(blockSize > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n    const batchSize = x.shape[0];\n    const inputHeight = dataFormat === 'NHWC' ? x.shape[1] : x.shape[2];\n    const inputWidth = dataFormat === 'NHWC' ? x.shape[2] : x.shape[3];\n    const inputDepth = dataFormat === 'NHWC' ? x.shape[3] : x.shape[1];\n    const outputHeight = inputHeight * blockSize;\n    const outputWidth = inputWidth * blockSize;\n    const outputDepth = inputDepth / (blockSize * blockSize);\n    const outputShape = dataFormat === 'NHWC' ? [batchSize, outputHeight, outputWidth, outputDepth] : [batchSize, outputDepth, outputHeight, outputWidth];\n    const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n    return this.compileAndRun(program, [x]);\n  }\n\n  split(x, sizeSplits, axis) {\n    return split(x, sizeSplits, axis);\n  }\n\n  scatterND(indices, updates, shape) {\n    const {\n      sliceRank,\n      numUpdates,\n      sliceSize,\n      strides,\n      outputSize\n    } = backend_util.calculateShapes(updates, indices, shape);\n    const flattenShape = [outputSize / sliceSize, sliceSize];\n    const flattenIndices = indices.reshape([numUpdates, sliceRank]);\n    const flattenX = updates.reshape([numUpdates, sliceSize]);\n\n    if (outputSize === 0) {\n      return backend_util.reshapeTensor(tensor([]), shape);\n    }\n\n    const defaultValue = scalar(0);\n    const program = new ScatterProgram(numUpdates, sliceRank, flattenIndices.rank, flattenX.rank, strides, flattenShape);\n    const res = this.compileAndRun(program, [flattenX, flattenIndices, defaultValue]);\n    return res.reshape(shape);\n  }\n\n  sparseToDense(sparseIndices, sparseValues, outputShape, defaultValue) {\n    const {\n      sliceRank,\n      numUpdates,\n      strides,\n      outputSize\n    } = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n    const sumDupeIndices = false;\n    const program = new ScatterProgram(numUpdates, sliceRank, sparseIndices.rank, sparseValues.rank, strides, [outputSize, 1], sumDupeIndices);\n    const res = this.compileAndRun(program, [sparseValues, sparseIndices, defaultValue]);\n    return res.reshape(outputShape);\n  }\n\n  fft(x) {\n    const inverse = false;\n    return this.fftImpl(x, inverse);\n  }\n\n  ifft(x) {\n    const inverse = true;\n    return this.fftImpl(x, inverse);\n  }\n\n  fftImpl(x, inverse) {\n    const xData = this.texData.get(x.dataId);\n    const realProgram = new FFTProgram(fft_gpu.COMPLEX_FFT.REAL, x.shape, inverse);\n    const imagProgram = new FFTProgram(fft_gpu.COMPLEX_FFT.IMAG, x.shape, inverse);\n    const inputs = [this.makeComplexComponentTensorInfo(x, xData.complexTensors.real), this.makeComplexComponentTensorInfo(x, xData.complexTensors.imag)];\n    const real = this.compileAndRun(realProgram, inputs);\n    const imag = this.compileAndRun(imagProgram, inputs);\n    const complex = this.complex(real, imag).as2D(x.shape[0], x.shape[1]);\n    real.dispose();\n    imag.dispose();\n    return complex;\n  }\n\n  gatherND(x, indices) {\n    const indicesShape = indices.shape;\n    const sliceRank = indicesShape[indicesShape.length - 1];\n    const [resultShape, numSlices, sliceSize, strides] = backend_util.prepareAndValidate(x, indices);\n    const flattenIndices = indices.reshape([numSlices, sliceRank]);\n    const flattenX = x.reshape([x.size / sliceSize, sliceSize]);\n    const program = new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);\n    const res = this.compileAndRun(program, [flattenX, flattenIndices]);\n    return res.reshape(resultShape);\n  }\n\n  fill(shape, value, dtype) {\n    dtype = dtype || util.inferDtype(value);\n\n    if (dtype === 'string') {\n      // String type should be handled in CPU memory.\n      const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n      values.fill(value);\n      return engine().makeTensor(values, shape, dtype, this);\n    } else {\n      const program = new FillProgram(shape, value);\n      const customSetup = program.getCustomSetupFunc(value);\n      return this.compileAndRun(program, [], dtype, customSetup);\n    }\n  }\n\n  onesLike(x) {\n    if (x.dtype === 'string') {\n      throw new Error('onesLike is not supported under string dtype');\n    } else {\n      // TODO(cais, smilkov): Add WebGL shader for onesLike:\n      //   https://github.com/tensorflow/tfjs/issues/1293\n      return this.fill(x.shape, 1, x.dtype);\n    }\n  }\n\n  zerosLike(x) {\n    return this.fill(x.shape, x.dtype === 'string' ? '' : 0, x.dtype);\n  }\n\n  linspace(start, stop, num) {\n    // TODO: Use CPU implementation due to the precision problem in Safari.\n    return backend_util.linspaceImpl(start, stop, num);\n  }\n\n  makeTensorInfo(shape, dtype) {\n    const dataId = this.write(null\n    /* values */\n    , shape, dtype);\n    this.texData.get(dataId).usage = null;\n    return {\n      dataId,\n      shape,\n      dtype\n    };\n  }\n\n  makeOutput(shape, dtype) {\n    const {\n      dataId\n    } = this.makeTensorInfo(shape, dtype);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n  }\n\n  unpackTensor(input) {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  packTensor(input) {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(program, [input], input.dtype, null\n    /* customSetup */\n    , preventEagerUnpackingOutput);\n  }\n\n  packedReshape(input, afterShape) {\n    const input3DShape = [webgl_util.getBatchDim(input.shape), ...webgl_util.getRowsCols(input.shape)];\n    const input3D = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)];\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const output = this.runWebGLProgram(program, [input3D], input.dtype, null\n    /* customSetup */\n    , preventEagerUnpackingOfOutput);\n    return {\n      dataId: output.dataId,\n      shape: afterShape,\n      dtype: output.dtype\n    };\n  }\n\n  decode(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      isPacked,\n      shape,\n      dtype\n    } = texData;\n    const shapeAs3D = webgl_util.getShapeAs3D(shape);\n    let program;\n\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n\n    const preventEagerUnpackingOfOutput = true;\n    const out = this.runWebGLProgram(program, [{\n      shape: shapeAs3D,\n      dtype,\n      dataId\n    }], dtype, null\n    /* customSetup */\n    , preventEagerUnpackingOfOutput);\n    return {\n      dtype,\n      shape,\n      dataId: out.dataId\n    };\n  }\n\n  runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = tex_util.getDenseTexShape(program.outputShape); // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n\n      outData.texShape = texelShape.map(d => d * 2);\n    }\n\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values = util.getTypedArrayFromDType(output.dtype, 0);\n      return output;\n    }\n\n    const dataToDispose = [];\n    const inputsData = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` + `dtypes, please separate the program into real and imaginary ` + `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs && util.sizeFromShape(input.shape) <= env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values\n          };\n        } // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n\n\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      } else if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) : this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (texData.isPacked && !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n        const savedInput = input;\n        const targetShape = input.shape;\n        input.shape = texData.shape;\n        input = this.packedReshape(input, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n        savedInput.shape = targetShape;\n      }\n\n      this.uploadToGPU(input.dataId);\n      return {\n        shape: input.shape,\n        texData,\n        isUniform: false\n      };\n    });\n    this.uploadToGPU(output.dataId);\n    const outputData = {\n      shape: output.shape,\n      texData: outData,\n      isUniform: false\n    };\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query;\n\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customSetup);\n    dataToDispose.forEach(info => this.disposeData(info.dataId));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push({\n        name: program.constructor.name,\n        query: this.getQueryTime(query)\n      });\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked && preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeData(output.dataId);\n      return unpacked;\n    }\n\n    return output;\n  }\n\n  compileAndRun(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput);\n    return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n  }\n\n  getAndSaveBinary(key, getBinary) {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n\n    return this.binaryCache[key];\n  }\n\n  getTextureManager() {\n    return this.textureManager;\n  }\n\n  dispose() {\n    if (this.disposed) {\n      return;\n    } // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n\n\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n\n    this.textureManager.dispose();\n\n    if (this.canvas != null && typeof HTMLCanvasElement !== 'undefined' && this.canvas instanceof HTMLCanvasElement) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n\n    this.disposed = true;\n  }\n\n  floatPrecision() {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n\n        return 16;\n      });\n    }\n\n    return this.floatPrecisionValue;\n  }\n  /** Returns the smallest representable number.  */\n\n\n  epsilon() {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  uploadToGPU(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      shape,\n      dtype,\n      values,\n      texture,\n      usage,\n      isPacked\n    } = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n\n    const shouldTimeProgram = this.activeTimers != null;\n    let start;\n\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n\n    if (texShape == null) {\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n      let program;\n      let width = texShape[1],\n          height = texShape[0];\n      const isByteArray = values instanceof Uint8Array;\n\n      if (isPacked) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n        program = new EncodeMatrixPackedProgram(shapeAs3D, [height, width], isByteArray);\n      } else {\n        program = new EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);\n      }\n\n      const tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);\n\n      if (isByteArray) {\n        this.texData.get(tempDenseInputHandle.dataId).usage = TextureUsage.PIXELS;\n      } else {\n        this.texData.get(tempDenseInputHandle.dataId).usage = TextureUsage.UPLOAD;\n      }\n\n      this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values); // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking); // Have the original texture assume the identity of the encoded output.\n\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texture = outputTexData.texture;\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n      this.disposeData(tempDenseInputHandle.dataId);\n      this.texData.delete(encodedOutputTarget.dataId); // Once uploaded, don't store the values on cpu.\n\n      texData.values = null;\n\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  convertAndCacheOnCPU(dataId, float32Values) {\n    const texData = this.texData.get(dataId);\n    const {\n      dtype\n    } = texData;\n    this.releaseGPUData(dataId);\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype);\n    }\n\n    return texData.values;\n  }\n\n  acquireTexture(texShape, texType, dtype, isPacked) {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n\n    if (!this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(`High memory usage in GPU: ${mb} MB, ` + `most likely due to a memory leak`);\n    }\n\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  computeBytes(shape, dtype) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n\n}\n\nfunction float32ToTypedArray(a, dtype) {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a;\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = dtype === 'int32' ? new Int32Array(a.length) : new Uint8Array(a.length);\n\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n\n    return result;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}","map":{"version":3,"sources":["../src/backend_webgl.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import webgl flags.\nimport './flags_webgl';\nimport * as tf from '@tensorflow/tfjs-core';\nimport { complex, div, engine, env, imag, max, range, real, reshape, scalar, softmax, tensor, tidy, transpose } from '@tensorflow/tfjs-core';\nimport { backend_util, buffer, kernel_impls, slice_util, util } from '@tensorflow/tfjs-core';\nimport { DataStorage, KernelBackend, upcastType } from '@tensorflow/tfjs-core';\nconst { segment_util } = backend_util;\nconst split = kernel_impls.split;\nconst tile = kernel_impls.tile;\nconst topkImpl = kernel_impls.topkImpl;\nconst whereImpl = kernel_impls.whereImpl;\nimport { AddNProgram } from './addn_gpu';\nimport { AddNPackedProgram } from './addn_packed_gpu';\nimport { ArgMinMaxProgram } from './argminmax_gpu';\nimport { ArgMinMaxPackedProgram } from './argminmax_packed_gpu';\nimport { AvgPool2DBackpropProgram, AvgPool3DBackpropProgram } from './avg_pool_backprop_gpu';\nimport { BatchNormProgram } from './batchnorm_gpu';\nimport { BatchNormPackedProgram } from './batchnorm_packed_gpu';\nimport * as binaryop_complex_gpu from './binaryop_complex_gpu';\nimport { BinaryOpComplexProgram } from './binaryop_complex_gpu';\nimport * as binaryop_gpu from './binaryop_gpu';\nimport { BinaryOpProgram } from './binaryop_gpu';\nimport * as binaryop_packed_gpu from './binaryop_packed_gpu';\nimport { BinaryOpPackedProgram } from './binaryop_packed_gpu';\nimport { getWebGLContext } from './canvas_util';\nimport { ClipProgram } from './clip_gpu';\nimport { ClipPackedProgram } from './clip_packed_gpu';\nimport { ComplexAbsProgram } from './complex_abs_gpu';\nimport { ConcatProgram } from './concat_gpu';\nimport { ConcatPackedProgram } from './concat_packed_gpu';\nimport { Conv2DDerFilterProgram, Conv2DDerInputProgram, Conv3DDerFilterProgram, Conv3DDerInputProgram } from './conv_backprop_gpu';\nimport { DepthwiseConv2DDerFilterProgram, DepthwiseConv2DDerInputProgram } from './conv_backprop_gpu_depthwise';\nimport { Conv2DProgram, Conv3DProgram } from './conv_gpu';\nimport { DepthwiseConv2DProgram } from './conv_gpu_depthwise';\nimport { DepthwiseConvPacked2DProgram } from './conv_packed_gpu_depthwise';\nimport { CropAndResizeProgram } from './crop_and_resize_gpu';\nimport { CumSumProgram } from './cumsum_gpu';\nimport { DecodeMatrixProgram } from './decode_matrix_gpu';\nimport { DecodeMatrixPackedProgram } from './decode_matrix_packed_gpu';\nimport { DepthToSpaceProgram } from './depth_to_space_gpu';\nimport { DiagProgram } from './diag_gpu';\nimport { EncodeFloatProgram } from './encode_float_gpu';\nimport { EncodeFloatPackedProgram } from './encode_float_packed_gpu';\nimport { EncodeMatrixProgram } from './encode_matrix_gpu';\nimport { EncodeMatrixPackedProgram } from './encode_matrix_packed_gpu';\nimport * as fft_gpu from './fft_gpu';\nimport { FFTProgram } from './fft_gpu';\nimport { FillProgram } from './fill_gpu';\nimport { GatherProgram } from './gather_gpu';\nimport { GatherNDProgram } from './gather_nd_gpu';\nimport { GPGPUContext } from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport { Im2ColPackedProgram } from './im2col_packed_gpu';\nimport { LRNProgram } from './lrn_gpu';\nimport { LRNGradProgram } from './lrn_grad_gpu';\nimport { LRNPackedProgram } from './lrn_packed_gpu';\nimport { MaxPool2DBackpropProgram, MaxPool3DBackpropProgram } from './max_pool_backprop_gpu';\nimport { MatMulPackedProgram } from './mulmat_packed_gpu';\nimport { MultinomialProgram } from './multinomial_gpu';\nimport { OneHotProgram } from './onehot_gpu';\nimport { PackProgram } from './pack_gpu';\nimport { PadProgram } from './pad_gpu';\nimport { PadPackedProgram } from './pad_packed_gpu';\nimport { Pool2DProgram, Pool3DProgram } from './pool_gpu';\nimport { ReduceProgram } from './reduce_gpu';\nimport { ReshapePackedProgram } from './reshape_packed_gpu';\nimport { ResizeBilinearBackpropProgram } from './resize_bilinear_backprop_gpu';\nimport { ResizeBilinearProgram } from './resize_bilinear_gpu';\nimport { ResizeBilinearPackedProgram } from './resize_bilinear_packed_gpu';\nimport { ResizeNearestNeigborBackpropProgram } from './resize_nearest_neighbor_backprop_gpu';\nimport { ResizeNearestNeighborProgram } from './resize_nearest_neighbor_gpu';\nimport { ReverseProgram } from './reverse_gpu';\nimport { ReversePackedProgram } from './reverse_packed_gpu';\nimport { ScatterProgram } from './scatter_gpu';\nimport { SegmentOpProgram } from './segment_gpu';\nimport { SelectProgram } from './select_gpu';\nimport { SliceProgram } from './slice_gpu';\nimport { SlicePackedProgram } from './slice_packed_gpu';\nimport { StridedSliceProgram } from './strided_slice_gpu';\nimport * as tex_util from './tex_util';\nimport { TextureUsage } from './tex_util';\nimport { TextureManager } from './texture_manager';\nimport { TileProgram } from './tile_gpu';\nimport * as unary_op from './unaryop_gpu';\nimport { UnaryOpProgram } from './unaryop_gpu';\nimport * as unary_packed_op from './unaryop_packed_gpu';\nimport { UnaryOpPackedProgram } from './unaryop_packed_gpu';\nimport { UnpackProgram } from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\nconst binaryCaches = {};\nexport function getBinaryCache(webGLVersion) {\n    if (webGLVersion in binaryCaches) {\n        return binaryCaches[webGLVersion];\n    }\n    binaryCaches[webGLVersion] = {};\n    return binaryCaches[webGLVersion];\n}\nfunction mapActivationToShaderProgram(activation, packed = false) {\n    if (activation === 'linear') {\n        if (packed) {\n            return unary_packed_op.LINEAR;\n        }\n        return unary_op.LINEAR;\n    }\n    else if (activation === 'relu') {\n        if (packed) {\n            return unary_packed_op.RELU;\n        }\n        return unary_op.RELU;\n    }\n    else if (activation === 'elu') {\n        if (packed) {\n            return unary_packed_op.ELU;\n        }\n        return unary_op.ELU;\n    }\n    else if (activation === 'relu6') {\n        if (packed) {\n            return unary_packed_op.RELU6;\n        }\n        return unary_op.RELU6;\n    }\n    else if (activation === 'prelu') {\n        if (packed) {\n            return binaryop_packed_gpu.PRELU;\n        }\n        return binaryop_gpu.PRELU;\n    }\n    throw new Error(`Activation ${activation} has not been implemented for the WebGL backend.`);\n}\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD = 128;\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning() {\n    if (env().global.screen == null) {\n        return 1024; // 1 GB.\n    }\n    return (env().global.screen.height * env().global.screen.width *\n        window.devicePixelRatio) *\n        BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\nexport class MathBackendWebGL extends KernelBackend {\n    constructor(gpgpu) {\n        super();\n        // Maps data ids that have a pending read operation, to list of subscribers.\n        this.pendingRead = new WeakMap();\n        // List of data ids that are scheduled for disposal, but are waiting on a\n        // pending read operation.\n        this.pendingDisposal = new WeakSet();\n        // Used to count the number of 'shallow' sliced tensors that point to the\n        // same data id.\n        this.dataRefCount = new WeakMap();\n        this.numBytesInGPU = 0;\n        // Accumulated time spent (including blocking) in uploading data to webgl.\n        this.uploadWaitMs = 0;\n        // Accumulated time spent (including blocking in downloading data from webgl.\n        this.downloadWaitMs = 0;\n        this.warnedAboutMemory = false;\n        this.warnedAboutCPUBackend = false;\n        this.pendingDeletes = 0;\n        this.disposed = false;\n        if (!env().getBool('HAS_WEBGL')) {\n            throw new Error('WebGL is not supported on this device');\n        }\n        if (gpgpu == null) {\n            const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n            this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n            this.gpgpu = new GPGPUContext(gl);\n            this.canvas = gl.canvas;\n            this.gpgpuCreatedLocally = true;\n        }\n        else {\n            this.gpgpu = gpgpu;\n            this.binaryCache = {};\n            this.gpgpuCreatedLocally = false;\n            this.canvas = gpgpu.gl.canvas;\n        }\n        this.textureManager = new TextureManager(this.gpgpu);\n        this.numMBBeforeWarning = numMBBeforeWarning();\n        this.texData = new DataStorage(this, engine());\n    }\n    numDataIds() {\n        return this.texData.numDataIds() +\n            (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) -\n            this.pendingDeletes;\n    }\n    write(values, shape, dtype) {\n        if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n            env().getBool('DEBUG')) {\n            this.checkNumericalProblems(values);\n        }\n        if (dtype === 'complex64' && values != null) {\n            throw new Error(`Cannot write to a complex64 dtype. ` +\n                `Please use tf.complex(real, imag).`);\n        }\n        const dataId = {};\n        this.texData.set(dataId, { shape, dtype, values, usage: TextureUsage.UPLOAD });\n        return dataId;\n    }\n    move(dataId, values, shape, dtype) {\n        if (env().getBool('DEBUG')) {\n            this.checkNumericalProblems(values);\n        }\n        if (dtype === 'complex64') {\n            throw new Error(`Cannot write to a complex64 dtype. ` +\n                `Please use tf.complex(real, imag).`);\n        }\n        this.texData.set(dataId, { shape, dtype, values, usage: TextureUsage.UPLOAD });\n    }\n    readSync(dataId) {\n        const texData = this.texData.get(dataId);\n        const { values, dtype, complexTensors, slice, shape, isPacked } = texData;\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const data = this.readSync(res.dataId);\n            this.disposeData(res.dataId);\n            return data;\n        }\n        if (values != null) {\n            return this.convertAndCacheOnCPU(dataId);\n        }\n        if (dtype === 'string') {\n            return values;\n        }\n        const shouldTimeProgram = this.activeTimers != null;\n        let start;\n        if (shouldTimeProgram) {\n            start = util.now();\n        }\n        let result;\n        if (dtype === 'complex64') {\n            const realValues = complexTensors.real.dataSync();\n            const imagValues = complexTensors.imag.dataSync();\n            result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        else {\n            result = this.getValuesFromTexture(dataId);\n        }\n        if (shouldTimeProgram) {\n            this.downloadWaitMs += util.now() - start;\n        }\n        return this.convertAndCacheOnCPU(dataId, result);\n    }\n    async read(dataId) {\n        if (this.pendingRead.has(dataId)) {\n            const subscribers = this.pendingRead.get(dataId);\n            return new Promise(resolve => subscribers.push(resolve));\n        }\n        const texData = this.texData.get(dataId);\n        const { values, shape, slice, dtype, complexTensors, isPacked } = texData;\n        if (slice != null) {\n            let program;\n            if (isPacked) {\n                program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n            }\n            else {\n                program = new UnaryOpProgram(shape, unary_op.CLONE);\n            }\n            const res = this.runWebGLProgram(program, [{ dataId, shape, dtype }], dtype);\n            const data = this.read(res.dataId);\n            this.disposeData(res.dataId);\n            return data;\n        }\n        if (values != null) {\n            return this.convertAndCacheOnCPU(dataId);\n        }\n        if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n            env().getNumber('WEBGL_VERSION') === 2) {\n            throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n                `WEBGL_VERSION=2 not yet supported.`);\n        }\n        let buffer = null;\n        let tmpDownloadTarget;\n        if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n            // Possibly copy the texture into a buffer before inserting a fence.\n            tmpDownloadTarget = this.decode(dataId);\n            const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n            buffer = this.gpgpu.createBufferFromTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape));\n        }\n        this.pendingRead.set(dataId, []);\n        if (dtype !== 'complex64') {\n            // Create a fence and wait for it to resolve.\n            await this.gpgpu.createAndWaitForFence();\n        }\n        // Download the values from the GPU.\n        let vals;\n        if (dtype === 'complex64') {\n            const ps = await Promise.all([complexTensors.real.data(), complexTensors.imag.data()]);\n            const realValues = ps[0];\n            const imagValues = ps[1];\n            vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        else if (buffer == null) {\n            vals = this.getValuesFromTexture(dataId);\n        }\n        else {\n            const size = util.sizeFromShape(shape);\n            vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n        }\n        if (tmpDownloadTarget != null) {\n            this.disposeData(tmpDownloadTarget.dataId);\n        }\n        const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n        const subscribers = this.pendingRead.get(dataId);\n        this.pendingRead.delete(dataId);\n        // Notify all pending reads.\n        subscribers.forEach(resolve => resolve(dTypeVals));\n        if (this.pendingDisposal.has(dataId)) {\n            this.pendingDisposal.delete(dataId);\n            this.disposeData(dataId);\n            this.pendingDeletes--;\n        }\n        return dTypeVals;\n    }\n    checkNumericalProblems(values) {\n        if (values == null) {\n            return;\n        }\n        for (let i = 0; i < values.length; i++) {\n            const num = values[i];\n            if (!webgl_util.canBeRepresented(num)) {\n                if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n                    throw Error(`The value ${num} cannot be represented with your ` +\n                        `current settings. Consider enabling float32 rendering: ` +\n                        `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n                }\n                throw Error(`The value ${num} cannot be represented on this device.`);\n            }\n        }\n    }\n    getValuesFromTexture(dataId) {\n        const { shape, dtype, isPacked } = this.texData.get(dataId);\n        const size = util.sizeFromShape(shape);\n        if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n            const tmpTarget = this.decode(dataId);\n            const tmpData = this.texData.get(tmpTarget.dataId);\n            const vals = this.gpgpu\n                .downloadMatrixFromPackedTexture(tmpData.texture, ...tex_util.getDenseTexShape(shape))\n                .subarray(0, size);\n            this.disposeData(tmpTarget.dataId);\n            return vals;\n        }\n        const shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;\n        const outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n        const program = shouldUsePackedProgram ?\n            new EncodeFloatPackedProgram(outputShape) :\n            new EncodeFloatProgram(outputShape);\n        const output = this.runWebGLProgram(program, [{ shape: outputShape, dtype, dataId }], 'float32');\n        const tmpData = this.texData.get(output.dataId);\n        const vals = this.gpgpu\n            .downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture, tmpData.texShape[0], tmpData.texShape[1])\n            .subarray(0, size);\n        this.disposeData(output.dataId);\n        return vals;\n    }\n    async time(f) {\n        const oldActiveTimers = this.activeTimers;\n        const newActiveTimers = [];\n        let outerMostTime = false;\n        if (this.programTimersStack == null) {\n            this.programTimersStack = newActiveTimers;\n            outerMostTime = true;\n        }\n        else {\n            this.activeTimers.push(newActiveTimers);\n        }\n        this.activeTimers = newActiveTimers;\n        f();\n        // needing to split these up because util.flatten only accepts certain types\n        const flattenedActiveTimerQueries = util.flatten(this.activeTimers.map((d) => d.query))\n            .filter(d => d != null);\n        const flattenedActiveTimerNames = util.flatten(this.activeTimers.map((d) => d.name))\n            .filter(d => d != null);\n        this.activeTimers = oldActiveTimers;\n        if (outerMostTime) {\n            this.programTimersStack = null;\n        }\n        const res = {\n            uploadWaitMs: this.uploadWaitMs,\n            downloadWaitMs: this.downloadWaitMs,\n            kernelMs: null,\n            wallMs: null // will be filled by the engine\n        };\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n            res['kernelMs'] = util.sum(kernelMs);\n            res['getExtraProfileInfo'] = () => kernelMs.map((d, i) => ({ name: flattenedActiveTimerNames[i], ms: d }))\n                .map(d => `${d.name}: ${d.ms}`)\n                .join(', ');\n        }\n        else {\n            res['kernelMs'] = {\n                error: 'WebGL query timers are not supported in this environment.'\n            };\n        }\n        this.uploadWaitMs = 0;\n        this.downloadWaitMs = 0;\n        return res;\n    }\n    memory() {\n        return {\n            unreliable: false,\n            numBytesInGPU: this.numBytesInGPU,\n            numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n            numBytesInGPUFree: this.textureManager.numBytesFree\n        };\n    }\n    startTimer() {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            return this.gpgpu.beginQuery();\n        }\n        return { startMs: util.now(), endMs: null };\n    }\n    endTimer(query) {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            this.gpgpu.endQuery();\n            return query;\n        }\n        query.endMs = util.now();\n        return query;\n    }\n    async getQueryTime(query) {\n        if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n            return this.gpgpu.waitForQueryAndGetTime(query);\n        }\n        const timerQuery = query;\n        return timerQuery.endMs - timerQuery.startMs;\n    }\n    disposeData(dataId) {\n        if (this.pendingDisposal.has(dataId)) {\n            return;\n        }\n        if (this.pendingRead.has(dataId)) {\n            this.pendingDisposal.add(dataId);\n            this.pendingDeletes++;\n            return;\n        }\n        // No-op if already disposed.\n        if (!this.texData.has(dataId)) {\n            return;\n        }\n        this.releaseGPUData(dataId);\n        const { complexTensors } = this.texData.get(dataId);\n        if (complexTensors != null) {\n            complexTensors.real.dispose();\n            complexTensors.imag.dispose();\n        }\n        this.texData.delete(dataId);\n    }\n    releaseGPUData(dataId) {\n        const { texture, dtype, texShape, usage, isPacked, slice } = this.texData.get(dataId);\n        const key = slice && slice.origDataId || dataId;\n        const refCount = this.dataRefCount.get(key);\n        if (refCount > 1) {\n            this.dataRefCount.set(key, refCount - 1);\n        }\n        else {\n            this.dataRefCount.delete(key);\n            if (texture != null) {\n                this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n                this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n            }\n        }\n        const texData = this.texData.get(dataId);\n        texData.texture = null;\n        texData.texShape = null;\n        texData.isPacked = false;\n        texData.slice = null;\n    }\n    getTexture(dataId) {\n        this.uploadToGPU(dataId);\n        return this.texData.get(dataId).texture;\n    }\n    /**\n     * Returns internal information for the specific data bucket. Used in unit\n     * tests.\n     */\n    getDataInfo(dataId) {\n        return this.texData.get(dataId);\n    }\n    getCPUBackend() {\n        if (!env().getBool('WEBGL_CPU_FORWARD')) {\n            return null;\n        }\n        if (this.cpuBackend == null) {\n            this.cpuBackend = engine().findBackend('cpu');\n        }\n        return this.cpuBackend;\n    }\n    /*\n    Tests whether all the inputs to an op are small and on the CPU. This heuristic\n    determines when it would be faster to execute a kernel on the CPU. WebGL\n    kernels opt into running this check and forwarding when appropriate.\n    TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n    sustainable strategy for optimizing backend execution of ops.\n     */\n    shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {\n        const cpuBackend = this.getCPUBackend();\n        if (!this.warnedAboutCPUBackend && cpuBackend == null &&\n            !env().getBool('IS_TEST')) {\n            console.warn('Your application contains ops that are small enough to be ' +\n                'executed on the CPU backend, however the CPU backend cannot ' +\n                'be found. Consider importing the CPU backend ' +\n                '(@tensorflow/tfjs-backend-cpu) for better performance.');\n            this.warnedAboutCPUBackend = true;\n        }\n        return cpuBackend != null &&\n            inputs.every(input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n    }\n    getGPGPUContext() {\n        return this.gpgpu;\n    }\n    complex(real, imag) {\n        const result = this.makeOutput(real.shape, 'complex64');\n        const resultData = this.texData.get(result.dataId);\n        // The backend owns the reference to the underlying real and imaginary\n        // clones. These will explicitly get disposed when the complex tensor is\n        // disposed.\n        resultData.complexTensors = {\n            real: engine().keep(real.clone()),\n            imag: engine().keep(imag.clone())\n        };\n        return result;\n    }\n    real(input) {\n        const resultData = this.texData.get(input.dataId);\n        return resultData.complexTensors.real.clone();\n    }\n    imag(input) {\n        const resultData = this.texData.get(input.dataId);\n        return resultData.complexTensors.imag.clone();\n    }\n    slice(x, begin, size) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.slice(x, begin, size);\n        }\n        // Short-circuit computation if the slice is zero-sized.\n        if (util.sizeFromShape(size) === 0) {\n            return tensor([], size, x.dtype);\n        }\n        const { isPacked } = this.texData.get(x.dataId);\n        const isContinous = slice_util.isSliceContinous(x.shape, begin, size);\n        if (isPacked || !isContinous) {\n            const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n                new SlicePackedProgram(size) :\n                new SliceProgram(size);\n            const customSetup = program.getCustomSetupFunc(begin);\n            return this.compileAndRun(program, [x], null, customSetup);\n        }\n        this.uploadToGPU(x.dataId);\n        return this.shallowSlice(x, begin, size);\n    }\n    shallowSlice(x, begin, size) {\n        const xTexData = this.texData.get(x.dataId);\n        const t = this.makeOutput(size, x.dtype);\n        const newTexData = this.texData.get(t.dataId);\n        // Copy texture data from the original tensor.\n        Object.assign(newTexData, xTexData);\n        newTexData.shape = size;\n        newTexData.dtype = x.dtype;\n        let flatOffset = slice_util.computeFlatOffset(begin, x.strides);\n        if (xTexData.slice) {\n            // We are slicing an already sliced tensor, so we have to accumulate\n            // the offset.\n            flatOffset += xTexData.slice.flatOffset;\n        }\n        newTexData.slice = {\n            flatOffset,\n            // Point to the original dataId, which is used to do ref counting.\n            origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n        };\n        // Increase the ref count for that data bucket.\n        const refCount = this.dataRefCount.get(newTexData.slice.origDataId) || 1;\n        this.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n        return t;\n    }\n    stridedSlice(x, begin, end, strides) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.stridedSlice(x, begin, end, strides);\n        }\n        const outShape = slice_util.computeOutShape(begin, end, strides);\n        if (outShape.some(axis => axis === 0)) {\n            return tensor([], outShape);\n        }\n        const program = new StridedSliceProgram(begin, strides, outShape);\n        return this.compileAndRun(program, [x]);\n    }\n    reverse(x, axis) {\n        const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n            new ReversePackedProgram(x.shape, axis) :\n            new ReverseProgram(x.shape, axis);\n        return this.compileAndRun(program, [x]);\n    }\n    concat(tensors, axis) {\n        if (tensors[0].dtype === 'complex64') {\n            const reals = tensors.map((t) => real(t));\n            const imags = tensors.map((t) => imag(t));\n            return complex(this.concat(reals, axis), this.concat(imags, axis));\n        }\n        if (this.shouldExecuteOnCPU(tensors)) {\n            return this.cpuBackend.concat(tensors, axis);\n        }\n        if (tensors.length === 1) {\n            return tensors[0];\n        }\n        if (tensors.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n            const midIndex = Math.floor(tensors.length / 2);\n            const leftSide = this.concat(tensors.slice(0, midIndex), axis);\n            const rightSide = this.concat(tensors.slice(midIndex), axis);\n            return this.concat([leftSide, rightSide], axis);\n        }\n        if (env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') && tensors[0].rank > 1) {\n            const program = new ConcatPackedProgram(tensors.map(t => t.shape), axis);\n            return this.compileAndRun(program, tensors);\n        }\n        // Any concat of n-dimensional tensors across any axis can be reduced to\n        // a concatenation of two-dimensional tensors across the axis 1 by first\n        // partitioning the axes of the original tensors into those less than the\n        // axis to be concatenated and the rest. Then reshape the tensors\n        // into a two-dimensional tensor by collapsing these two sets of axes and\n        // concatenate the resulting matrices across the axis 1, finally reshaping\n        // the result to have the proper shape.\n        const outShape = backend_util.computeOutShape(tensors.map(t => t.shape), axis);\n        const tensors2D = tensors.map(t => t.as2D(-1, util.sizeFromShape(t.shape.slice(axis))));\n        const program = new ConcatProgram(tensors2D.map(t => t.shape));\n        const res = this.compileAndRun(program, tensors2D);\n        return res.reshape(outShape);\n    }\n    neg(x) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.neg(x);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.NEG, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.NEG);\n        return this.compileAndRun(program, [x]);\n    }\n    batchMatMul(a, b, transposeA, transposeB) {\n        const outerShapeA = transposeA ? a.shape[2] : a.shape[1];\n        const outerShapeB = transposeB ? b.shape[1] : b.shape[2];\n        const sharedDim = transposeA ? a.shape[1] : a.shape[2];\n        const [batch, ,] = a.shape;\n        // Since the matrices are vectors, it is faster to call mul().sum()\n        // because sum() is O(sqrt(N)) due to divide-and-conquer.\n        if ((outerShapeA === 1 || outerShapeB === 1) &&\n            sharedDim > MATMUL_SHARED_DIM_THRESHOLD) {\n            if (transposeA) {\n                a = transpose(a, [0, 2, 1]);\n            }\n            if (transposeB) {\n                b = transpose(b, [0, 2, 1]);\n            }\n            const a3D = outerShapeB === 1 ? a : a.as3D(batch, sharedDim, 1);\n            const axis = outerShapeB === 1 ? 2 : 1;\n            const b3D = outerShapeB === 1 ? b.as3D(batch, 1, sharedDim) : b;\n            return this.multiply(a3D, b3D).sum(axis, true /* keepDims */);\n        }\n        const dtype = upcastType(a.dtype, b.dtype);\n        const program = new MatMulPackedProgram(a.shape, [batch, outerShapeA, outerShapeB], transposeA, transposeB);\n        return this.compileAndRun(program, [a, b], dtype);\n    }\n    fusedBatchMatMul({ a, b, transposeA, transposeB, bias, activation, preluActivationWeights }) {\n        const outerShapeA = transposeA ? a.shape[2] : a.shape[1];\n        const outerShapeB = transposeB ? b.shape[1] : b.shape[2];\n        const [batch, ,] = a.shape;\n        const dtype = upcastType(a.dtype, b.dtype);\n        const hasBias = bias != null;\n        const hasPreluActivationWeights = preluActivationWeights != null;\n        const fusedActivation = activation ? mapActivationToShaderProgram(activation, true) : null;\n        const program = new MatMulPackedProgram(a.shape, [batch, outerShapeA, outerShapeB], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights);\n        const inputs = [a, b];\n        if (bias) {\n            inputs.push(bias);\n        }\n        if (preluActivationWeights) {\n            inputs.push(preluActivationWeights);\n        }\n        return this.compileAndRun(program, inputs, dtype);\n    }\n    multiply(a, b) {\n        if (a.dtype === 'complex64') {\n            const aData = this.texData.get(a.dataId);\n            const bData = this.texData.get(b.dataId);\n            const realProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n            const imagProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n            const inputs = [\n                this.makeComplexComponentTensorInfo(a, aData.complexTensors.real),\n                this.makeComplexComponentTensorInfo(a, aData.complexTensors.imag),\n                this.makeComplexComponentTensorInfo(b, bData.complexTensors.real),\n                this.makeComplexComponentTensorInfo(b, bData.complexTensors.imag)\n            ];\n            const real = this.compileAndRun(realProgram, inputs);\n            const imag = this.compileAndRun(imagProgram, inputs);\n            const complex = this.complex(real, imag);\n            real.dispose();\n            imag.dispose();\n            return complex;\n        }\n        if (this.shouldExecuteOnCPU([a, b])) {\n            return this.cpuBackend.multiply(a, b);\n        }\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_gpu.MUL, a.dtype);\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.MUL, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], a.dtype);\n    }\n    batchNorm(x, mean, variance, offset, scale, varianceEpsilon) {\n        const inputs = [x, mean, variance];\n        let offsetShape = null;\n        if (offset != null) {\n            offsetShape = offset.shape;\n            inputs.push(offset);\n        }\n        let scaleShape = null;\n        if (scale != null) {\n            scaleShape = scale.shape;\n            inputs.push(scale);\n        }\n        if (env().getBool('WEBGL_PACK_NORMALIZATION')) {\n            const batchNormPackedProgram = new BatchNormPackedProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n            return this.compileAndRun(batchNormPackedProgram, inputs);\n        }\n        const batchNormProgram = new BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n        return this.compileAndRun(batchNormProgram, inputs);\n    }\n    localResponseNormalization4D(x, radius, bias, alpha, beta) {\n        const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n            new LRNPackedProgram(x.shape, radius, bias, alpha, beta) :\n            new LRNProgram(x.shape, radius, bias, alpha, beta);\n        return this.compileAndRun(program, [x]);\n    }\n    LRNGrad(dy, inputImage, outputImage, depthRadius, bias, alpha, beta) {\n        const program = new LRNGradProgram(inputImage.shape, depthRadius, bias, alpha, beta);\n        return this.compileAndRun(program, [inputImage, outputImage, dy]);\n    }\n    tile(x, reps) {\n        if (x.dtype === 'string') {\n            const data = this.readSync(x.dataId);\n            const decodedData = data.map(d => util.decodeString(d));\n            const buf = buffer(x.shape, x.dtype, decodedData);\n            return tile(buf, reps);\n        }\n        const program = new TileProgram(x.shape, reps);\n        return this.compileAndRun(program, [x]);\n    }\n    pad(x, paddings, constantValue) {\n        const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n            new PadPackedProgram(x.shape, paddings, constantValue) :\n            new PadProgram(x.shape, paddings, constantValue);\n        return this.compileAndRun(program, [x]);\n    }\n    gather(x, indices, axis) {\n        if (this.shouldExecuteOnCPU([x, indices])) {\n            return this.cpuBackend.gather(x, indices, axis);\n        }\n        const program = new GatherProgram(x.shape, indices.size, axis);\n        return this.compileAndRun(program, [x, indices]);\n    }\n    batchToSpaceND(x, blockShape, crops) {\n        util.assert(x.rank <= 4, () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +\n            'implemented yet');\n        const prod = blockShape.reduce((a, b) => a * b);\n        const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n        const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n        const reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n        const sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n        const sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n        return transpose(x.reshape(reshaped), permuted)\n            .reshape(reshapedPermuted)\n            .slice(sliceBeginCoords, sliceSize);\n    }\n    spaceToBatchND(x, blockShape, paddings) {\n        util.assert(x.rank <= 4, () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +\n            'implemented yet');\n        const prod = blockShape.reduce((a, b) => a * b);\n        const completePaddings = [[0, 0]];\n        completePaddings.push(...paddings);\n        for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n            completePaddings.push([0, 0]);\n        }\n        const paddedX = x.pad(completePaddings);\n        const reshapedPaddedShape = backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n        const permutedReshapedPaddedPermutation = backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n        const flattenShape = backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n        const paddedXT = transpose(paddedX.reshape(reshapedPaddedShape), permutedReshapedPaddedPermutation);\n        return reshape(paddedXT, flattenShape);\n    }\n    reduce(x, reduceType, dtype) {\n        const batchSize = x.shape[0];\n        const inSize = x.shape[1];\n        const windowSize = backend_util.computeOptimalWindowSize(inSize);\n        const outSize = Math.ceil(inSize / windowSize);\n        const reduceInfo = { windowSize, inSize, batchSize, outSize };\n        const program = new ReduceProgram(reduceInfo, reduceType);\n        const output = this.compileAndRun(program, [x], dtype);\n        // No need to run another GPGPU program.\n        if (output.shape[1] === 1) {\n            return output;\n        }\n        return this.reduce(output, reduceType, dtype);\n    }\n    argReduce(x, reduceType, bestIndicesA = null) {\n        let batchSize = x.shape[0];\n        let inSize = x.shape[1];\n        if (bestIndicesA != null) {\n            batchSize = bestIndicesA.shape[0];\n            inSize = bestIndicesA.shape[1];\n        }\n        const windowSize = backend_util.computeOptimalWindowSize(inSize);\n        const reduceInfo = {\n            windowSize,\n            inSize,\n            batchSize,\n            outSize: Math.ceil(inSize / windowSize)\n        };\n        const program = new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n        const inputs = [x];\n        if (bestIndicesA != null) {\n            inputs.push(bestIndicesA);\n        }\n        const output = this.compileAndRun(program, inputs, 'int32');\n        // No need to run another GPGPU program.\n        if (output.shape[1] === 1) {\n            return output;\n        }\n        return this.argReduce(x, reduceType, output);\n    }\n    argReducePacked(x, reduceType, bestIndicesA = null) {\n        const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n        const inSize = inShape[inShape.length - 1];\n        const windowSize = backend_util.computeOptimalWindowSize(inSize);\n        const program = new ArgMinMaxPackedProgram(inShape, windowSize, reduceType, bestIndicesA == null);\n        const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n        const output = this.compileAndRun(program, inputs, 'int32');\n        if (output.rank === x.rank) {\n            return this.argReducePacked(x, reduceType, output);\n        }\n        return output;\n    }\n    sum(x, axes) {\n        backend_util.assertAxesAreInnerMostDims('sum', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const inSize = util.sizeFromShape(reduceShape);\n        const a2D = x.as2D(-1, inSize);\n        const outputDType = tf.sumOutType(x.dtype);\n        return this.reduce(a2D, 'sum', outputDType).reshape(outShape);\n    }\n    prod(x, axes) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.prod(x, axes);\n        }\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const inSize = util.sizeFromShape(reduceShape);\n        const a2D = x.as2D(-1, inSize);\n        const outputDType = tf.sumOutType(x.dtype);\n        return this.reduce(a2D, 'prod', outputDType).reshape(outShape);\n    }\n    unsortedSegmentSum(x, segmentIds, numSegments) {\n        let axis = 0;\n        const permutation = backend_util.getAxesPermutation([axis], x.rank);\n        let permutedX = x;\n        if (permutation != null) {\n            permutedX = transpose(x, permutation);\n            axis = backend_util.getInnerMostAxes(1, x.rank)[0];\n        }\n        const outShape = segment_util.computeOutShape(permutedX.shape, axis, numSegments);\n        const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n        const a2D = permutedX.as2D(-1, inSize);\n        const outputDType = tf.sumOutType(x.dtype);\n        let result = this.segOpCompute(a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments)\n            .reshape(outShape);\n        if (permutation != null) {\n            result =\n                transpose(result, backend_util.getUndoAxesPermutation(permutation));\n        }\n        return result;\n    }\n    segOpCompute(x, segOpType, segmentIds, dtype, numSegments) {\n        const batchSize = x.shape[0];\n        const inSize = x.shape[1];\n        const windowSize = segment_util.segOpComputeOptimalWindowSize(inSize, numSegments);\n        const segOpInfo = { windowSize, inSize, batchSize, numSegments };\n        const program = new SegmentOpProgram(segOpInfo, segOpType);\n        const output = this.compileAndRun(program, [x, segmentIds], dtype);\n        // No need to run another GPGPU program.\n        if (output.shape[1] === numSegments) {\n            return output;\n        }\n        segmentIds = range(0, numSegments).tile([inSize / windowSize]);\n        return this.segOpCompute(output, segOpType, segmentIds, dtype, numSegments);\n    }\n    argMinMaxReduce(x, axis, reduceType) {\n        const axes = [axis];\n        backend_util.assertAxesAreInnerMostDims('arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.rank);\n        if (!env().getBool('WEBGL_PACK_REDUCE') || x.rank <= 2) {\n            const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n            const inSize = util.sizeFromShape(reduceShape);\n            const a2D = x.as2D(-1, inSize);\n            return this.argReduce(a2D, reduceType).reshape(outShape);\n        }\n        return this.argReducePacked(x, reduceType);\n    }\n    argMin(x, axis) {\n        return this.argMinMaxReduce(x, axis, 'min');\n    }\n    argMax(x, axis) {\n        return this.argMinMaxReduce(x, axis, 'max');\n    }\n    cumsum(x, axis, exclusive, reverse) {\n        if (axis !== x.rank - 1) {\n            throw new Error(`WebGL cumsum shader expects an inner-most axis=${x.rank - 1} ` +\n                `but got axis=${axis}`);\n        }\n        const size = x.shape[axis];\n        let result = x;\n        // Use cumsum parallel algorithm, ref:\n        // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n        for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n            const program = new CumSumProgram(x.shape, false, reverse);\n            const customSetup = program.getCustomSetupFunc(i);\n            const prevResult = result;\n            result = this.compileAndRun(program, [result], result.dtype, customSetup);\n            prevResult.dispose();\n        }\n        // For exclusive cumsum, shift the end result in the direction of sum and\n        // add 0 to the front index.\n        if (exclusive) {\n            const program = new CumSumProgram(x.shape, exclusive, reverse);\n            const prevResult = result;\n            result = this.compileAndRun(program, [result]);\n            prevResult.dispose();\n        }\n        return result;\n    }\n    equal(a, b) {\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.EQUAL, 'bool');\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.EQUAL, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], 'bool');\n    }\n    notEqual(a, b) {\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.NOT_EQUAL, 'bool');\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.NOT_EQUAL, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], 'bool');\n    }\n    less(a, b) {\n        if (this.shouldExecuteOnCPU([a, b])) {\n            return this.cpuBackend.less(a, b);\n        }\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.LESS, 'bool');\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.LESS, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], 'bool');\n    }\n    lessEqual(a, b) {\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.LESS_EQUAL, 'bool');\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.LESS_EQUAL, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], 'bool');\n    }\n    greater(a, b) {\n        if (this.shouldExecuteOnCPU([a, b])) {\n            return this.cpuBackend.greater(a, b);\n        }\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.GREATER, 'bool');\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.GREATER, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], 'bool');\n    }\n    greaterEqual(a, b) {\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.GREATER_EQUAL, 'bool');\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.GREATER_EQUAL, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], 'bool');\n    }\n    logicalNot(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.LOGICAL_NOT);\n        return this.compileAndRun(program, [x]);\n    }\n    logicalAnd(a, b) {\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.LOGICAL_AND, 'bool');\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.LOGICAL_AND, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], 'bool');\n    }\n    logicalOr(a, b) {\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.LOGICAL_OR, 'bool');\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.LOGICAL_OR, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], 'bool');\n    }\n    select(condition, a, b) {\n        const program = new SelectProgram(condition.rank, a.shape, a.rank);\n        return this.compileAndRun(program, [condition, a, b], upcastType(a.dtype, b.dtype));\n    }\n    where(condition) {\n        backend_util.warn('tf.where() in webgl locks the UI thread. ' +\n            'Call tf.whereAsync() instead');\n        const condVals = condition.dataSync();\n        return whereImpl(condition.shape, condVals);\n    }\n    topk(x, k, sorted) {\n        const xVals = x.dataSync();\n        return topkImpl(xVals, x.shape, x.dtype, k, sorted);\n    }\n    min(x, axes) {\n        backend_util.assertAxesAreInnerMostDims('min', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const inSize = util.sizeFromShape(reduceShape);\n        const a2D = x.as2D(-1, inSize);\n        return this.reduce(a2D, 'min', a2D.dtype).reshape(outShape);\n    }\n    minimum(a, b) {\n        if (this.shouldExecuteOnCPU([a, b])) {\n            return this.cpuBackend.minimum(a, b);\n        }\n        const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n            new BinaryOpPackedProgram(binaryop_packed_gpu.MIN, a.shape, b.shape) :\n            new BinaryOpProgram(binaryop_gpu.MIN, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    }\n    mod(a, b) {\n        const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n            new BinaryOpPackedProgram(binaryop_packed_gpu.MOD, a.shape, b.shape) :\n            new BinaryOpProgram(binaryop_gpu.MOD, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    }\n    maximum(a, b) {\n        if (this.shouldExecuteOnCPU([a, b])) {\n            return this.cpuBackend.maximum(a, b);\n        }\n        const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n            new BinaryOpPackedProgram(binaryop_packed_gpu.MAX, a.shape, b.shape) :\n            new BinaryOpProgram(binaryop_gpu.MAX, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    }\n    all(x, axes) {\n        backend_util.assertAxesAreInnerMostDims('all', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const inSize = util.sizeFromShape(reduceShape);\n        const a2D = x.as2D(-1, inSize);\n        return this.reduce(a2D, 'all', a2D.dtype).reshape(outShape);\n    }\n    any(x, axes) {\n        backend_util.assertAxesAreInnerMostDims('any', axes, x.rank);\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const inSize = util.sizeFromShape(reduceShape);\n        const a2D = x.as2D(-1, inSize);\n        return this.reduce(a2D, 'any', a2D.dtype).reshape(outShape);\n    }\n    floorDiv(a, b) {\n        const op = binaryop_gpu.INT_DIV;\n        const outputDtype = 'int32';\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_packed_gpu.INT_DIV, outputDtype);\n        }\n        const program = new BinaryOpProgram(op, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], outputDtype);\n    }\n    add(a, b) {\n        if (a.dtype === 'complex64' && b.dtype === 'complex64') {\n            return this.complexSeparableBinaryOp(a, b, binaryop_gpu.ADD);\n        }\n        if (this.shouldExecuteOnCPU([a, b])) {\n            return this.cpuBackend.add(a, b);\n        }\n        const dtype = upcastType(a.dtype, b.dtype);\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_gpu.ADD, dtype);\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.ADD, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], dtype);\n    }\n    packedUnaryOp(x, op, dtype) {\n        const program = new UnaryOpPackedProgram(x.shape, op);\n        return this.compileAndRun(program, [x], dtype);\n    }\n    packedBinaryOp(a, b, op, dtype, checkOutOfBounds = false) {\n        const program = new BinaryOpPackedProgram(op, a.shape, b.shape, checkOutOfBounds);\n        return this.compileAndRun(program, [a, b], dtype);\n    }\n    /**\n     * Computes a complex binary operation that can be decomposed into a simple\n     * binary operation on both the real and imagary parts.\n     */\n    complexSeparableBinaryOp(a, b, op) {\n        const aData = this.texData.get(a.dataId);\n        const bData = this.texData.get(b.dataId);\n        const [real, imag] = [\n            [aData.complexTensors.real, bData.complexTensors.real],\n            [aData.complexTensors.imag, bData.complexTensors.imag]\n        ].map(complexParts => {\n            const [aPart, bPart] = complexParts;\n            const aHandle = this.makeComplexComponentTensorInfo(a, aPart);\n            const bHandle = this.makeComplexComponentTensorInfo(b, bPart);\n            const program = new BinaryOpProgram(op, a.shape, b.shape);\n            return this.compileAndRun(program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n        });\n        const complex = this.complex(real, imag);\n        real.dispose();\n        imag.dispose();\n        return complex;\n    }\n    // Returns a TensorInfo with the complex shape and the dataId of the\n    // underlying part. We need to do this because a reshaped complex tensor is\n    // not reflected in its parts.\n    makeComplexComponentTensorInfo(complexTensor, complexPart) {\n        return {\n            dataId: complexPart.dataId,\n            dtype: complexPart.dtype,\n            shape: complexTensor.shape\n        };\n    }\n    addN(tensors) {\n        if (tensors.length === 1) {\n            return tensors[0];\n        }\n        // Limit the number of uploaded textures for optimization.\n        if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n            const midIndex = Math.floor(tensors.length / 2);\n            const leftSide = this.addN(tensors.slice(0, midIndex));\n            const rightSide = this.addN(tensors.slice(midIndex));\n            return this.addN([leftSide, rightSide]);\n        }\n        const dtype = tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n        const shapes = tensors.map(t => t.shape);\n        // We can make sure shapes are identical in op level.\n        const usePackedOp = env().getBool('WEBGL_PACK');\n        const program = usePackedOp ?\n            new AddNPackedProgram(tensors[0].shape, shapes) :\n            new AddNProgram(tensors[0].shape, shapes);\n        return this.compileAndRun(program, tensors, dtype);\n    }\n    subtract(a, b) {\n        if (a.dtype === 'complex64' && b.dtype === 'complex64') {\n            return this.complexSeparableBinaryOp(a, b, binaryop_gpu.SUB);\n        }\n        if (this.shouldExecuteOnCPU([a, b])) {\n            return this.cpuBackend.subtract(a, b);\n        }\n        const dtype = upcastType(a.dtype, b.dtype);\n        if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n            return this.packedBinaryOp(a, b, binaryop_gpu.SUB, a.dtype);\n        }\n        const program = new BinaryOpProgram(binaryop_gpu.SUB, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b], dtype);\n    }\n    pow(a, b) {\n        const usePackedOp = env().getBool('WEBGL_PACK_BINARY_OPERATIONS');\n        const program = usePackedOp ?\n            new BinaryOpPackedProgram(binaryop_packed_gpu.POW, a.shape, b.shape) :\n            new BinaryOpProgram(binaryop_gpu.POW, a.shape, b.shape);\n        const dtype = upcastType(a.dtype, b.dtype);\n        return this.compileAndRun(program, [a, b], dtype);\n    }\n    ceil(x) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.ceil(x);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.CEIL, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.CEIL);\n        return this.compileAndRun(program, [x]);\n    }\n    floor(x) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.floor(x);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.FLOOR, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.FLOOR);\n        return this.compileAndRun(program, [x]);\n    }\n    sign(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.SIGN);\n        return this.compileAndRun(program, [x]);\n    }\n    isNaN(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.IS_NAN);\n        return this.compileAndRun(program, [x], 'bool');\n    }\n    isInf(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.IS_INF);\n        return this.compileAndRun(program, [x], 'bool');\n    }\n    isFinite(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.IS_FINITE);\n        return this.compileAndRun(program, [x], 'bool');\n    }\n    round(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.ROUND);\n        return this.compileAndRun(program, [x]);\n    }\n    exp(x) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.exp(x);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.EXP, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.EXP);\n        return this.compileAndRun(program, [x]);\n    }\n    expm1(x) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.expm1(x);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.EXPM1, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.EXPM1);\n        return this.compileAndRun(program, [x]);\n    }\n    softmax(logits, dim) {\n        const axes = util.parseAxisParam([dim], logits.shape);\n        // TODO(annxingyuan): Call maxImpl rather than op as part of softmax kernel\n        // modularization.\n        const maxLogit = max(logits, axes);\n        const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n        const a = this.subtract(logits, maxLogit.reshape(expandedShape));\n        const b = this.exp(a);\n        const sumExp = this.sum(b, axes).reshape(expandedShape);\n        // TODO(annxingyuan): Call divImpl rather than op as part of softmax kernel\n        // modularization.\n        return div(b, sumExp);\n    }\n    log(x) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.log(x);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_packed_op.LOG, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.LOG);\n        return this.compileAndRun(program, [x]);\n    }\n    log1p(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.LOG1P);\n        return this.compileAndRun(program, [x]);\n    }\n    sqrt(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.SQRT);\n        return this.compileAndRun(program, [x]);\n    }\n    rsqrt(x) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.rsqrt(x);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.RSQRT);\n        return this.compileAndRun(program, [x]);\n    }\n    reciprocal(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.RECIPROCAL);\n        return this.compileAndRun(program, [x]);\n    }\n    relu(x) {\n        let program;\n        if (env().getBool('WEBGL_PACK')) {\n            program = new UnaryOpPackedProgram(x.shape, unary_packed_op.RELU);\n        }\n        else {\n            program = new UnaryOpProgram(x.shape, unary_op.RELU);\n        }\n        return this.compileAndRun(program, [x]);\n    }\n    relu6(x) {\n        let program;\n        if (env().getBool('WEBGL_PACK')) {\n            program = new UnaryOpPackedProgram(x.shape, unary_packed_op.RELU6);\n        }\n        else {\n            program = new UnaryOpProgram(x.shape, unary_op.RELU6);\n        }\n        return this.compileAndRun(program, [x]);\n    }\n    prelu(x, alpha) {\n        const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n            new BinaryOpPackedProgram(binaryop_packed_gpu.PRELU, x.shape, alpha.shape) :\n            new BinaryOpProgram(binaryop_gpu.PRELU, x.shape, alpha.shape);\n        return this.compileAndRun(program, [x, alpha]);\n    }\n    elu(x) {\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_packed_op.ELU, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.ELU);\n        return this.compileAndRun(program, [x]);\n    }\n    eluDer(dy, y) {\n        const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n            new BinaryOpPackedProgram(binaryop_packed_gpu.ELU_DER, dy.shape, y.shape) :\n            new BinaryOpProgram(binaryop_gpu.ELU_DER, dy.shape, y.shape);\n        return this.compileAndRun(program, [dy, y]);\n    }\n    selu(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.SELU);\n        return this.compileAndRun(program, [x]);\n    }\n    int(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.TO_INT);\n        return this.compileAndRun(program, [x], 'int32');\n    }\n    clip(x, min, max) {\n        let program;\n        if (env().getBool('WEBGL_PACK_CLIP')) {\n            program = new ClipPackedProgram(x.shape);\n        }\n        else {\n            program = new ClipProgram(x.shape);\n        }\n        const customSetup = program.getCustomSetupFunc(min, max);\n        return this.compileAndRun(program, [x], null, customSetup);\n    }\n    abs(x) {\n        if (this.shouldExecuteOnCPU([x])) {\n            return this.cpuBackend.abs(x);\n        }\n        if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n            return this.packedUnaryOp(x, unary_op.ABS, x.dtype);\n        }\n        const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n        return this.compileAndRun(program, [x]);\n    }\n    complexAbs(x) {\n        const xData = this.texData.get(x.dataId);\n        const program = new ComplexAbsProgram(x.shape);\n        const inputs = [\n            this.makeComplexComponentTensorInfo(x, xData.complexTensors.real),\n            this.makeComplexComponentTensorInfo(x, xData.complexTensors.imag),\n        ];\n        return this.compileAndRun(program, inputs);\n    }\n    sigmoid(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.SIGMOID);\n        return this.compileAndRun(program, [x]);\n    }\n    softplus(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.SOFTPLUS);\n        return this.compileAndRun(program, [x]);\n    }\n    sin(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.SIN);\n        return this.compileAndRun(program, [x]);\n    }\n    cos(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.COS);\n        return this.compileAndRun(program, [x]);\n    }\n    tan(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.TAN);\n        return this.compileAndRun(program, [x]);\n    }\n    asin(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.ASIN);\n        return this.compileAndRun(program, [x]);\n    }\n    acos(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.ACOS);\n        return this.compileAndRun(program, [x]);\n    }\n    atan(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.ATAN);\n        return this.compileAndRun(program, [x]);\n    }\n    atan2(a, b) {\n        const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n            new BinaryOpPackedProgram(binaryop_packed_gpu.ATAN2, a.shape, b.shape) :\n            new BinaryOpProgram(binaryop_gpu.ATAN2, a.shape, b.shape);\n        return this.compileAndRun(program, [a, b]);\n    }\n    sinh(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.SINH);\n        return this.compileAndRun(program, [x]);\n    }\n    cosh(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.COSH);\n        return this.compileAndRun(program, [x]);\n    }\n    tanh(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.TANH);\n        return this.compileAndRun(program, [x]);\n    }\n    asinh(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.ASINH);\n        return this.compileAndRun(program, [x]);\n    }\n    acosh(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.ACOSH);\n        return this.compileAndRun(program, [x]);\n    }\n    atanh(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.ATANH);\n        return this.compileAndRun(program, [x]);\n    }\n    erf(x) {\n        const program = new UnaryOpProgram(x.shape, unary_op.ERF);\n        return this.compileAndRun(program, [x]);\n    }\n    step(x, alpha) {\n        const program = new UnaryOpProgram(x.shape, unary_op.STEP(alpha));\n        return this.compileAndRun(program, [x]);\n    }\n    conv2dByMatMul(x, filter, convInfo, bias, activation, preluActivationWeights) {\n        // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n        // result from 2D to 4D.\n        const xShape = x.shape;\n        const xTexData = this.texData.get(x.dataId);\n        const sharedMatMulDim = convInfo.inChannels;\n        const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n        const outerShapeFilter = convInfo.outChannels;\n        const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n        const transposeA = false;\n        const transposeB = false;\n        // TODO: Once reduction ops are packed, batchMatMul will always be packed\n        // and we can remove this condition.\n        const batchMatMulWillBeUnpacked = (outerShapeX === 1 || outerShapeFilter === 1) &&\n            sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n        const reshapeWillBeExpensive = xShape[2] % 2 !== 0 && !!xTexData.isPacked;\n        if (batchMatMulWillBeUnpacked || !env().getBool('WEBGL_LAZILY_UNPACK') ||\n            !env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ||\n            !reshapeWillBeExpensive) {\n            const targetShape = isChannelsLast ? xShape[0] * xShape[1] * xShape[2] :\n                xShape[0] * xShape[2] * xShape[3];\n            const xReshaped = this.reshape(x, [1, targetShape, convInfo.inChannels]);\n            const filterReshaped = this.reshape(filter, [1, convInfo.inChannels, convInfo.outChannels]);\n            return this.reshape(this.fusedBatchMatMul({\n                a: xReshaped,\n                b: filterReshaped,\n                transposeA,\n                transposeB,\n                bias,\n                activation,\n                preluActivationWeights\n            }), convInfo.outShape);\n        }\n        // Following optimization is specific to packed |x| with odd row count\n        // (For example, in channelLast mode, 'row count' refers to x.shape[2]):\n        // we avoid expensive packed 2x2 reshape by padding row count to next,\n        // even number. When x.shape[2] is odd, the result of packed batchMatMul is\n        // the same (has the same texture layout and and values in the texture) as\n        // it is for even x.shape[2] + 1. We make the odd-rows tensor to look like\n        // even-rows tensor before the operation and, after the batchMatMul,\n        // fix the even-rows result to have odd number of rows.\n        const targetShape = isChannelsLast ?\n            xShape[0] * xShape[1] * (xShape[2] + 1) :\n            xShape[0] * xShape[2] * (xShape[3] + 1);\n        const xReshaped = {\n            dataId: x.dataId,\n            shape: [1, targetShape, convInfo.inChannels],\n            dtype: x.dtype\n        };\n        // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n        // Decrementing row count, after batchMatMul->...->compileProgram leads to\n        // invalid row count within the reference in GPGPUBinary.inShapeInfos.\n        // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n        // in compileProgram method, but that would affect compilation of all\n        // programs - instead, provide a copy here, with even row count, before\n        // calling batchMatMul->...->compileProgram and after that, the original\n        // xTexData.shape is restored.\n        const originalXTexDataShape = xTexData.shape;\n        xTexData.shape = xTexData.shape.slice();\n        xTexData.shape[xTexData.shape.length - 2]++;\n        util.assert(webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape), () => `packed reshape ${xTexData.shape} to ${xReshaped.shape} isn't free`);\n        const filterReshaped = this.reshape(filter, [1, convInfo.inChannels, convInfo.outChannels]);\n        const pointwiseConv = this.fusedBatchMatMul({\n            a: xReshaped,\n            b: filterReshaped,\n            transposeA,\n            transposeB,\n            bias,\n            activation,\n            preluActivationWeights\n        });\n        const pointwiseConvTexData = this.texData.get(pointwiseConv.dataId);\n        util.assert(pointwiseConvTexData.isPacked, () => 'batchMatMul result is expected to be packed');\n        // Restore the input shape to original.\n        xTexData.shape = originalXTexDataShape;\n        // Set the output shape - there is no need for expensive reshape as data\n        // layout is already correct.\n        pointwiseConvTexData.shape = convInfo.outShape;\n        return engine().makeTensorFromDataId(pointwiseConv.dataId, convInfo.outShape, pointwiseConv.dtype);\n    }\n    conv2dWithIm2Row(x, filter, convInfo, bias, activation, preluActivationWeights) {\n        // Rearranges conv2d input so each block to be convolved over forms the\n        // column of a new matrix with shape [filterWidth * filterHeight *\n        // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n        // output channel forms a row of a new matrix with shape [outChannels,\n        // filterWidth * filterHeight * inChannels]. The convolution is then\n        // computed by multiplying these matrices and reshaping the result.\n        const { filterWidth, filterHeight, inChannels, outWidth, outHeight, dataFormat } = convInfo;\n        const isChannelsLast = dataFormat === 'channelsLast';\n        const sharedDim = filterWidth * filterHeight * inChannels;\n        const numCols = outHeight * outWidth;\n        const x2ColShape = [sharedDim, numCols];\n        const transposeA = true;\n        const transposeB = false;\n        const xSqueezed = x.squeeze([0]);\n        const w2Row = filter.reshape([1, sharedDim, -1]);\n        const im2ColProgram = new Im2ColPackedProgram(x2ColShape, xSqueezed.shape, convInfo);\n        const im2Col = this.compileAndRun(im2ColProgram, [xSqueezed]).reshape([\n            1, x2ColShape[0], x2ColShape[1]\n        ]);\n        const hasBias = bias != null;\n        const hasPreluActivationWeights = preluActivationWeights != null;\n        const fusedActivation = activation ? mapActivationToShaderProgram(activation, true) : null;\n        const matmulProgram = new MatMulPackedProgram(im2Col.shape, [1, numCols, convInfo.outChannels], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights);\n        const inputs = [im2Col, w2Row];\n        if (bias) {\n            inputs.push(bias);\n        }\n        if (hasPreluActivationWeights) {\n            inputs.push(preluActivationWeights);\n        }\n        const product = this.compileAndRun(matmulProgram, inputs);\n        if (isChannelsLast) {\n            return product.reshape([1, outHeight, outWidth, convInfo.outChannels]);\n        }\n        else {\n            return product.reshape([1, convInfo.outChannels, outHeight, outWidth]);\n        }\n    }\n    fusedConv2d({ input, filter, convInfo, bias, activation, preluActivationWeights }) {\n        if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n            convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n            convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n            (convInfo.padInfo.type === 'SAME' ||\n                convInfo.padInfo.type === 'VALID')) {\n            return this.conv2dByMatMul(input, filter, convInfo, bias, activation, preluActivationWeights);\n        }\n        if (env().getBool('WEBGL_CONV_IM2COL') && input.shape[0] === 1) {\n            return this.conv2dWithIm2Row(input, filter, convInfo, bias, activation, preluActivationWeights);\n        }\n        const hasBias = bias != null;\n        const hasPreluActivationWeights = preluActivationWeights != null;\n        const fusedActivation = activation ? mapActivationToShaderProgram(activation, false) : null;\n        const program = new Conv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n        const inputs = [input, filter];\n        if (bias) {\n            inputs.push(bias);\n        }\n        if (preluActivationWeights) {\n            inputs.push(preluActivationWeights);\n        }\n        return this.compileAndRun(program, inputs);\n    }\n    conv2d(x, filter, convInfo) {\n        if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n            convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n            convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n            (convInfo.padInfo.type === 'SAME' ||\n                convInfo.padInfo.type === 'VALID')) {\n            return this.conv2dByMatMul(x, filter, convInfo);\n        }\n        if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n            return this.conv2dWithIm2Row(x, filter, convInfo);\n        }\n        const program = new Conv2DProgram(convInfo);\n        return this.compileAndRun(program, [x, filter]);\n    }\n    conv2dDerInput(dy, filter, convInfo) {\n        const program = new Conv2DDerInputProgram(convInfo);\n        return this.compileAndRun(program, [dy, filter]);\n    }\n    conv2dDerFilter(x, dy, convInfo) {\n        const program = new Conv2DDerFilterProgram(convInfo);\n        return this.compileAndRun(program, [x, dy]);\n    }\n    fusedDepthwiseConv2D({ input, filter, convInfo, bias, activation, preluActivationWeights }) {\n        const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n            convInfo.strideWidth <= 2 &&\n            convInfo.outChannels / convInfo.inChannels === 1;\n        const fusedActivation = activation ?\n            mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n            null;\n        const inputs = [input, filter];\n        const hasBias = bias != null;\n        const hasPreluActivationWeights = preluActivationWeights != null;\n        if (hasBias) {\n            inputs.push(bias);\n        }\n        if (hasPreluActivationWeights) {\n            inputs.push(preluActivationWeights);\n        }\n        let program;\n        if (shouldPackDepthwiseConv) {\n            program = new DepthwiseConvPacked2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n            return this.compileAndRun(program, inputs);\n        }\n        program = new DepthwiseConv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights);\n        return this.compileAndRun(program, inputs);\n    }\n    depthwiseConv2D(x, filter, convInfo) {\n        let program;\n        if (env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n            convInfo.strideWidth <= 2 &&\n            convInfo.outChannels / convInfo.inChannels === 1) {\n            program = new DepthwiseConvPacked2DProgram(convInfo);\n            return this.compileAndRun(program, [x, filter]);\n        }\n        program = new DepthwiseConv2DProgram(convInfo);\n        return this.compileAndRun(program, [x, filter]);\n    }\n    depthwiseConv2DDerInput(dy, filter, convInfo) {\n        const program = new DepthwiseConv2DDerInputProgram(convInfo);\n        return this.compileAndRun(program, [dy, filter]);\n    }\n    depthwiseConv2DDerFilter(x, dy, convInfo) {\n        const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n        return this.compileAndRun(program, [x, dy]);\n    }\n    conv3d(x, filter, convInfo) {\n        const program = new Conv3DProgram(convInfo);\n        return this.compileAndRun(program, [x, filter]);\n    }\n    conv3dDerInput(dy, filter, convInfo) {\n        const program = new Conv3DDerInputProgram(convInfo);\n        return this.compileAndRun(program, [dy, filter]);\n    }\n    conv3dDerFilter(x, dy, convInfo) {\n        const program = new Conv3DDerFilterProgram(convInfo);\n        return this.compileAndRun(program, [x, dy]);\n    }\n    maxPool(x, convInfo) {\n        const program = new Pool2DProgram(convInfo, 'max', false);\n        return this.compileAndRun(program, [x]);\n    }\n    avgPool(x, convInfo) {\n        const program = new Pool2DProgram(convInfo, 'avg', false);\n        return this.compileAndRun(program, [x], 'float32');\n    }\n    maxPoolBackprop(dy, x, y, convInfo) {\n        const getPositions = true;\n        const maxPoolPositionsProgram = new Pool2DProgram(convInfo, 'max', getPositions);\n        const maxPoolPositions = this.compileAndRun(maxPoolPositionsProgram, [x]);\n        const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n        const result = this.compileAndRun(maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n        maxPoolPositions.dispose();\n        return result;\n    }\n    avgPoolBackprop(dy, x, convInfo) {\n        const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n        return this.compileAndRun(avgPoolBackpropProgram, [dy], x.dtype);\n    }\n    cast(x, dtype) {\n        return backend_util.castTensor(x, dtype, this);\n    }\n    unstack(x, axis) {\n        const num = x.shape[axis];\n        const outShape = new Array(x.rank - 1);\n        let outIndex = 0;\n        for (let i = 0; i < x.rank; i++) {\n            if (i !== axis) {\n                outShape[outIndex++] = x.shape[i];\n            }\n        }\n        const begin = new Array(x.rank).fill(0);\n        const size = x.shape.slice();\n        size[axis] = 1;\n        const res = new Array(num);\n        for (let i = 0; i < res.length; i++) {\n            begin[axis] = i;\n            res[i] = this.slice(x, begin, size).reshape(outShape);\n        }\n        return res;\n    }\n    avgPool3d(x, convInfo) {\n        const program = new Pool3DProgram(convInfo, 'avg', false);\n        return this.compileAndRun(program, [x], 'float32');\n    }\n    avgPool3dBackprop(dy, x, convInfo) {\n        const avgPool3dBackpropProgram = new AvgPool3DBackpropProgram(convInfo);\n        return this.compileAndRun(avgPool3dBackpropProgram, [dy], x.dtype);\n    }\n    maxPool3d(x, convInfo) {\n        const program = new Pool3DProgram(convInfo, 'max', false);\n        return this.compileAndRun(program, [x], 'float32');\n    }\n    maxPool3dBackprop(dy, x, y, convInfo) {\n        const getPositions = true;\n        const maxPool3dPositionsProgram = new Pool3DProgram(convInfo, 'max', getPositions);\n        const maxPool3dPositions = this.compileAndRun(maxPool3dPositionsProgram, [x]);\n        const maxPool3dBackPropProgram = new MaxPool3DBackpropProgram(convInfo);\n        const result = this.compileAndRun(maxPool3dBackPropProgram, [dy, maxPool3dPositions], x.dtype);\n        maxPool3dPositions.dispose();\n        return result;\n    }\n    reshape(x, shape) {\n        const texData = this.texData.get(x.dataId);\n        if (texData.isPacked && !webgl_util.isReshapeFree(x.shape, shape) &&\n            !(texData.texture !== null &&\n                webgl_util.isReshapeFree(texData.shape, shape))) {\n            const info = this.packedReshape(x, shape);\n            return engine().makeTensorFromDataId(info.dataId, info.shape, info.dtype);\n        }\n        return backend_util.reshapeTensor(x, shape);\n    }\n    resizeBilinear(x, newHeight, newWidth, alignCorners) {\n        const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n            new ResizeBilinearPackedProgram(x.shape, newHeight, newWidth, alignCorners) :\n            new ResizeBilinearProgram(x.shape, newHeight, newWidth, alignCorners);\n        return this.compileAndRun(program, [x], 'float32');\n    }\n    resizeBilinearBackprop(dy, x, alignCorners) {\n        const program = new ResizeBilinearBackpropProgram(dy, x, alignCorners);\n        return this.compileAndRun(program, [dy]);\n    }\n    resizeNearestNeighbor(x, newHeight, newWidth, alignCorners) {\n        const program = new ResizeNearestNeighborProgram(x.shape, newHeight, newWidth, alignCorners);\n        return this.compileAndRun(program, [x]);\n    }\n    resizeNearestNeighborBackprop(dy, x, alignCorners) {\n        const program = new ResizeNearestNeigborBackpropProgram(dy, x, alignCorners);\n        return this.compileAndRun(program, [dy]);\n    }\n    multinomial(logits, normalized, numSamples, seed) {\n        const probs = normalized ? logits : softmax(logits);\n        const batchSize = probs.shape[0];\n        const numOutcomes = probs.shape[1];\n        const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n        const customSetup = program.getCustomSetupFunc(seed);\n        return this.compileAndRun(program, [probs], 'int32', customSetup);\n    }\n    oneHot(indices, depth, onValue, offValue) {\n        const program = new OneHotProgram(indices.size, depth, onValue, offValue);\n        return this.compileAndRun(program, [indices]);\n    }\n    diag(x) {\n        const program = new DiagProgram(x.size);\n        return this.compileAndRun(program, [x]);\n    }\n    cropAndResize(image, boxes, boxIndex, cropSize, method, extrapolationValue) {\n        const program = new CropAndResizeProgram(image.shape, boxes.shape, cropSize, method, extrapolationValue);\n        return this.compileAndRun(program, [image, boxes, boxIndex], 'float32');\n    }\n    depthToSpace(x, blockSize, dataFormat) {\n        util.assert(blockSize > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n        const batchSize = x.shape[0];\n        const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n        const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n        const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n        const outputHeight = inputHeight * blockSize;\n        const outputWidth = inputWidth * blockSize;\n        const outputDepth = inputDepth / (blockSize * blockSize);\n        const outputShape = (dataFormat === 'NHWC') ?\n            [batchSize, outputHeight, outputWidth, outputDepth] :\n            [batchSize, outputDepth, outputHeight, outputWidth];\n        const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n        return this.compileAndRun(program, [x]);\n    }\n    split(x, sizeSplits, axis) {\n        return split(x, sizeSplits, axis);\n    }\n    scatterND(indices, updates, shape) {\n        const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util.calculateShapes(updates, indices, shape);\n        const flattenShape = [outputSize / sliceSize, sliceSize];\n        const flattenIndices = indices.reshape([numUpdates, sliceRank]);\n        const flattenX = updates.reshape([numUpdates, sliceSize]);\n        if (outputSize === 0) {\n            return backend_util.reshapeTensor(tensor([]), shape);\n        }\n        const defaultValue = scalar(0);\n        const program = new ScatterProgram(numUpdates, sliceRank, flattenIndices.rank, flattenX.rank, strides, flattenShape);\n        const res = this.compileAndRun(program, [flattenX, flattenIndices, defaultValue]);\n        return res.reshape(shape);\n    }\n    sparseToDense(sparseIndices, sparseValues, outputShape, defaultValue) {\n        const { sliceRank, numUpdates, strides, outputSize } = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n        const sumDupeIndices = false;\n        const program = new ScatterProgram(numUpdates, sliceRank, sparseIndices.rank, sparseValues.rank, strides, [outputSize, 1], sumDupeIndices);\n        const res = this.compileAndRun(program, [sparseValues, sparseIndices, defaultValue]);\n        return res.reshape(outputShape);\n    }\n    fft(x) {\n        const inverse = false;\n        return this.fftImpl(x, inverse);\n    }\n    ifft(x) {\n        const inverse = true;\n        return this.fftImpl(x, inverse);\n    }\n    fftImpl(x, inverse) {\n        const xData = this.texData.get(x.dataId);\n        const realProgram = new FFTProgram(fft_gpu.COMPLEX_FFT.REAL, x.shape, inverse);\n        const imagProgram = new FFTProgram(fft_gpu.COMPLEX_FFT.IMAG, x.shape, inverse);\n        const inputs = [\n            this.makeComplexComponentTensorInfo(x, xData.complexTensors.real),\n            this.makeComplexComponentTensorInfo(x, xData.complexTensors.imag),\n        ];\n        const real = this.compileAndRun(realProgram, inputs);\n        const imag = this.compileAndRun(imagProgram, inputs);\n        const complex = this.complex(real, imag).as2D(x.shape[0], x.shape[1]);\n        real.dispose();\n        imag.dispose();\n        return complex;\n    }\n    gatherND(x, indices) {\n        const indicesShape = indices.shape;\n        const sliceRank = indicesShape[indicesShape.length - 1];\n        const [resultShape, numSlices, sliceSize, strides] = backend_util.prepareAndValidate(x, indices);\n        const flattenIndices = indices.reshape([numSlices, sliceRank]);\n        const flattenX = x.reshape([x.size / sliceSize, sliceSize]);\n        const program = new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);\n        const res = this.compileAndRun(program, [flattenX, flattenIndices]);\n        return res.reshape(resultShape);\n    }\n    fill(shape, value, dtype) {\n        dtype = dtype || util.inferDtype(value);\n        if (dtype === 'string') {\n            // String type should be handled in CPU memory.\n            const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n            values.fill(value);\n            return engine().makeTensor(values, shape, dtype, this);\n        }\n        else {\n            const program = new FillProgram(shape, value);\n            const customSetup = program.getCustomSetupFunc(value);\n            return this.compileAndRun(program, [], dtype, customSetup);\n        }\n    }\n    onesLike(x) {\n        if (x.dtype === 'string') {\n            throw new Error('onesLike is not supported under string dtype');\n        }\n        else {\n            // TODO(cais, smilkov): Add WebGL shader for onesLike:\n            //   https://github.com/tensorflow/tfjs/issues/1293\n            return this.fill(x.shape, 1, x.dtype);\n        }\n    }\n    zerosLike(x) {\n        return this.fill(x.shape, x.dtype === 'string' ? '' : 0, x.dtype);\n    }\n    linspace(start, stop, num) {\n        // TODO: Use CPU implementation due to the precision problem in Safari.\n        return backend_util.linspaceImpl(start, stop, num);\n    }\n    makeTensorInfo(shape, dtype) {\n        const dataId = this.write(null /* values */, shape, dtype);\n        this.texData.get(dataId).usage = null;\n        return { dataId, shape, dtype };\n    }\n    makeOutput(shape, dtype) {\n        const { dataId } = this.makeTensorInfo(shape, dtype);\n        return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n    }\n    unpackTensor(input) {\n        const program = new UnpackProgram(input.shape);\n        return this.runWebGLProgram(program, [input], input.dtype);\n    }\n    packTensor(input) {\n        const program = new PackProgram(input.shape);\n        const preventEagerUnpackingOutput = true;\n        return this.runWebGLProgram(program, [input], input.dtype, null /* customSetup */, preventEagerUnpackingOutput);\n    }\n    packedReshape(input, afterShape) {\n        const input3DShape = [\n            webgl_util.getBatchDim(input.shape),\n            ...webgl_util.getRowsCols(input.shape)\n        ];\n        const input3D = {\n            dtype: input.dtype,\n            shape: input3DShape,\n            dataId: input.dataId\n        };\n        const afterShapeAs3D = [\n            webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n        ];\n        const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n        const preventEagerUnpackingOfOutput = true;\n        const output = this.runWebGLProgram(program, [input3D], input.dtype, null /* customSetup */, preventEagerUnpackingOfOutput);\n        return { dataId: output.dataId, shape: afterShape, dtype: output.dtype };\n    }\n    decode(dataId) {\n        const texData = this.texData.get(dataId);\n        const { isPacked, shape, dtype } = texData;\n        const shapeAs3D = webgl_util.getShapeAs3D(shape);\n        let program;\n        if (isPacked) {\n            program = new DecodeMatrixPackedProgram(shapeAs3D);\n        }\n        else {\n            program = new DecodeMatrixProgram(shapeAs3D);\n        }\n        const preventEagerUnpackingOfOutput = true;\n        const out = this.runWebGLProgram(program, [{ shape: shapeAs3D, dtype, dataId }], dtype, null /* customSetup */, preventEagerUnpackingOfOutput);\n        return { dtype, shape, dataId: out.dataId };\n    }\n    runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {\n        const output = this.makeTensorInfo(program.outputShape, outputDtype);\n        const outData = this.texData.get(output.dataId);\n        if (program.packedOutput) {\n            outData.isPacked = true;\n        }\n        if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n            const texelShape = tex_util.getDenseTexShape(program.outputShape);\n            // For a densely packed output, we explicitly set texShape\n            // so it doesn't get assigned later according to our typical packing\n            // scheme wherein a single texel can only contain values from adjacent\n            // rows/cols.\n            outData.texShape = texelShape.map(d => d * 2);\n        }\n        if (program.outTexUsage != null) {\n            outData.usage = program.outTexUsage;\n        }\n        if (util.sizeFromShape(output.shape) === 0) {\n            // Short-circuit the computation since the result is empty (has 0 in its\n            // shape).\n            outData.values =\n                util.getTypedArrayFromDType(output.dtype, 0);\n            return output;\n        }\n        const dataToDispose = [];\n        const inputsData = inputs.map(input => {\n            if (input.dtype === 'complex64') {\n                throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` +\n                    `dtypes, please separate the program into real and imaginary ` +\n                    `parts.`);\n            }\n            let texData = this.texData.get(input.dataId);\n            if (texData.texture == null) {\n                if (!program.packedInputs &&\n                    util.sizeFromShape(input.shape) <=\n                        env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n                    // Upload small tensors that live on the CPU as uniforms, not as\n                    // textures. Do this only when the environment supports 32bit floats\n                    // due to problems when comparing 16bit floats with 32bit floats.\n                    // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n                    // possible for packed shaders to sample from uniforms.\n                    return {\n                        shape: input.shape,\n                        texData: null,\n                        isUniform: true,\n                        uniformValues: texData.values\n                    };\n                }\n                // This ensures that if a packed program's inputs have not yet been\n                // uploaded to the GPU, they get uploaded as packed right off the bat.\n                if (program.packedInputs) {\n                    texData.isPacked = true;\n                    texData.shape = input.shape;\n                }\n            }\n            else if (!!texData.isPacked !== !!program.packedInputs) {\n                input = texData.isPacked ? this.unpackTensor(input) :\n                    this.packTensor(input);\n                dataToDispose.push(input);\n                texData = this.texData.get(input.dataId);\n            }\n            else if (texData.isPacked &&\n                !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n                // This is a special case where a texture exists for a tensor\n                // but the shapes are incompatible (due to packing constraints) because\n                // the tensor did not have a chance to go through the packed reshape\n                // shader. This only happens when we reshape the *same* tensor to form\n                // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n                // case will disappear once packed uploading is the default.\n                const savedInput = input;\n                const targetShape = input.shape;\n                input.shape = texData.shape;\n                input = this.packedReshape(input, targetShape);\n                dataToDispose.push(input);\n                texData = this.texData.get(input.dataId);\n                savedInput.shape = targetShape;\n            }\n            this.uploadToGPU(input.dataId);\n            return { shape: input.shape, texData, isUniform: false };\n        });\n        this.uploadToGPU(output.dataId);\n        const outputData = { shape: output.shape, texData: outData, isUniform: false };\n        const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n        const binary = this.getAndSaveBinary(key, () => {\n            return gpgpu_math.compileProgram(this.gpgpu, program, inputsData, outputData);\n        });\n        const shouldTimeProgram = this.activeTimers != null;\n        let query;\n        if (shouldTimeProgram) {\n            query = this.startTimer();\n        }\n        gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customSetup);\n        dataToDispose.forEach(info => this.disposeData(info.dataId));\n        if (shouldTimeProgram) {\n            query = this.endTimer(query);\n            this.activeTimers.push({ name: program.constructor.name, query: this.getQueryTime(query) });\n        }\n        if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n            preventEagerUnpackingOfOutput === false) {\n            const unpacked = this.unpackTensor(output);\n            this.disposeData(output.dataId);\n            return unpacked;\n        }\n        return output;\n    }\n    compileAndRun(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput = false) {\n        outputDtype = outputDtype || inputs[0].dtype;\n        const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customSetup, preventEagerUnpackingOfOutput);\n        return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n    }\n    getAndSaveBinary(key, getBinary) {\n        if (!(key in this.binaryCache)) {\n            this.binaryCache[key] = getBinary();\n        }\n        return this.binaryCache[key];\n    }\n    getTextureManager() {\n        return this.textureManager;\n    }\n    dispose() {\n        if (this.disposed) {\n            return;\n        }\n        // Avoid disposing the compiled webgl programs during unit testing because\n        // it slows down test execution.\n        if (!env().getBool('IS_TEST')) {\n            const allKeys = Object.keys(this.binaryCache);\n            allKeys.forEach(key => {\n                this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n                delete this.binaryCache[key];\n            });\n        }\n        this.textureManager.dispose();\n        if (this.canvas != null &&\n            (typeof (HTMLCanvasElement) !== 'undefined' &&\n                this.canvas instanceof HTMLCanvasElement)) {\n            this.canvas.remove();\n        }\n        else {\n            this.canvas = null;\n        }\n        if (this.gpgpuCreatedLocally) {\n            this.gpgpu.program = null;\n            this.gpgpu.dispose();\n        }\n        this.disposed = true;\n    }\n    floatPrecision() {\n        if (this.floatPrecisionValue == null) {\n            this.floatPrecisionValue = tidy(() => {\n                if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n                    // Momentarily switching DEBUG flag to false so we don't throw an\n                    // error trying to upload a small value.\n                    const debugFlag = env().getBool('DEBUG');\n                    env().set('DEBUG', false);\n                    const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n                    env().set('DEBUG', debugFlag);\n                    if (underflowCheckValue > 0) {\n                        return 32;\n                    }\n                }\n                return 16;\n            });\n        }\n        return this.floatPrecisionValue;\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n    }\n    uploadToGPU(dataId) {\n        const texData = this.texData.get(dataId);\n        const { shape, dtype, values, texture, usage, isPacked } = texData;\n        if (texture != null) {\n            // Array is already on GPU. No-op.\n            return;\n        }\n        const shouldTimeProgram = this.activeTimers != null;\n        let start;\n        if (shouldTimeProgram) {\n            start = util.now();\n        }\n        let texShape = texData.texShape;\n        if (texShape == null) {\n            texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n            texData.texShape = texShape;\n        }\n        if (values != null) {\n            const shapeAs3D = webgl_util.getShapeAs3D(shape);\n            let program;\n            let width = texShape[1], height = texShape[0];\n            const isByteArray = values instanceof Uint8Array;\n            if (isPacked) {\n                [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n                program = new EncodeMatrixPackedProgram(shapeAs3D, [height, width], isByteArray);\n            }\n            else {\n                program =\n                    new EncodeMatrixProgram(shapeAs3D, [height, width], isByteArray);\n            }\n            const tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);\n            if (isByteArray) {\n                this.texData.get(tempDenseInputHandle.dataId).usage =\n                    TextureUsage.PIXELS;\n            }\n            else {\n                this.texData.get(tempDenseInputHandle.dataId).usage =\n                    TextureUsage.UPLOAD;\n            }\n            this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);\n            // We want the output to remain packed regardless of the value of\n            // WEBGL_PACK.\n            const preventEagerUnpacking = true;\n            const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, null, preventEagerUnpacking);\n            // Have the original texture assume the identity of the encoded output.\n            const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n            texData.texture = outputTexData.texture;\n            texData.texShape = outputTexData.texShape;\n            texData.isPacked = outputTexData.isPacked;\n            texData.usage = outputTexData.usage;\n            this.disposeData(tempDenseInputHandle.dataId);\n            this.texData.delete(encodedOutputTarget.dataId);\n            // Once uploaded, don't store the values on cpu.\n            texData.values = null;\n            if (shouldTimeProgram) {\n                this.uploadWaitMs += util.now() - start;\n            }\n        }\n        else {\n            const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n            texData.texture = newTexture;\n        }\n    }\n    convertAndCacheOnCPU(dataId, float32Values) {\n        const texData = this.texData.get(dataId);\n        const { dtype } = texData;\n        this.releaseGPUData(dataId);\n        if (float32Values != null) {\n            texData.values = float32ToTypedArray(float32Values, dtype);\n        }\n        return texData.values;\n    }\n    acquireTexture(texShape, texType, dtype, isPacked) {\n        this.numBytesInGPU += this.computeBytes(texShape, dtype);\n        if (!this.warnedAboutMemory &&\n            this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n            const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n            this.warnedAboutMemory = true;\n            console.warn(`High memory usage in GPU: ${mb} MB, ` +\n                `most likely due to a memory leak`);\n        }\n        return this.textureManager.acquireTexture(texShape, texType, isPacked);\n    }\n    computeBytes(shape, dtype) {\n        return shape[0] * shape[1] * util.bytesPerElement(dtype);\n    }\n}\nfunction float32ToTypedArray(a, dtype) {\n    if (dtype === 'float32' || dtype === 'complex64') {\n        return a;\n    }\n    else if (dtype === 'int32' || dtype === 'bool') {\n        const result = (dtype === 'int32') ? new Int32Array(a.length) :\n            new Uint8Array(a.length);\n        for (let i = 0; i < result.length; ++i) {\n            result[i] = Math.round(a[i]);\n        }\n        return result;\n    }\n    else {\n        throw new Error(`Unknown dtype ${dtype}`);\n    }\n}\n//# sourceMappingURL=backend_webgl.js.map"]},"metadata":{},"sourceType":"module"}