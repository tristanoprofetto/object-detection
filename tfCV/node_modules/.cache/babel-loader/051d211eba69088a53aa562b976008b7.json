{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { SplitV } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { op } from './operation';\nimport { prepareSplitSize } from './split_util';\n/**\n * Splits a `tf.Tensor` into sub tensors.\n *\n * If `numOrSizeSplits` is a number, splits `x` along dimension `axis`\n * into `numOrSizeSplits` smaller tensors.\n * Requires that `numOrSizeSplits` evenly divides `x.shape[axis]`.\n *\n * If `numOrSizeSplits` is a number array, splits `x` into\n * `numOrSizeSplits.length` pieces. The shape of the `i`-th piece has the\n * same size as `x` except along dimension `axis` where the size is\n * `numOrSizeSplits[i]`.\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [2, 4]);\n * const [a, b] = tf.split(x, 2, 1);\n * a.print();\n * b.print();\n *\n * const [c, d, e] = tf.split(x, [1, 2, 1], 1);\n * c.print();\n * d.print();\n * e.print();\n * ```\n *\n * @param x The input tensor to split.\n * @param numOrSizeSplits Either an integer indicating the number of\n * splits along the axis or an array of integers containing the sizes of\n * each output tensor along the axis. If a number then it must evenly divide\n * `x.shape[axis]`; otherwise the sum of sizes must match `x.shape[axis]`.\n * Can contain one -1 indicating that dimension is to be inferred.\n * @param axis The dimension along which to split. Defaults to 0 (the first\n * dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\n\nfunction split_(x, numOrSizeSplits, axis = 0) {\n  const $x = convertToTensor(x, 'x', 'split');\n\n  const forward = (backend, _) => {\n    const $axis = parseAxisParam(axis, $x.shape)[0];\n    const splitSizes = prepareSplitSize($x, numOrSizeSplits, $axis);\n    return backend.split($x, splitSizes, $axis);\n  };\n\n  const inputs = {\n    x: $x\n  };\n  const attr = {\n    numOrSizeSplits,\n    axis\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , SplitV, attr);\n}\n\nexport const split = op({\n  split_\n});","map":{"version":3,"sources":["../../src/ops/split.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,MAAR,QAAgD,iBAAhD;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,SAAQ,cAAR,QAA6B,SAA7B;AAEA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,gBAAR,QAA+B,cAA/B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,SAAS,MAAT,CACI,CADJ,EAC0B,eAD1B,EAC4D,IAAI,GAAG,CADnE,EACoE;AAClE,QAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,OAAT,CAA1B;;AAEA,QAAM,OAAO,GAAwB,CAAC,OAAD,EAAU,CAAV,KAAe;AAClD,UAAM,KAAK,GAAG,cAAc,CAAC,IAAD,EAAO,EAAE,CAAC,KAAV,CAAd,CAA+B,CAA/B,CAAd;AACA,UAAM,UAAU,GAAG,gBAAgB,CAAC,EAAD,EAAK,eAAL,EAAsB,KAAtB,CAAnC;AACA,WAAO,OAAO,CAAC,KAAR,CAAc,EAAd,EAAkB,UAAlB,EAA8B,KAA9B,CAAP;AACD,GAJD;;AAMA,QAAM,MAAM,GAAiB;AAAC,IAAA,CAAC,EAAE;AAAJ,GAA7B;AACA,QAAM,IAAI,GAAgB;AAAC,IAAA,eAAD;AAAkB,IAAA;AAAlB,GAA1B;AAEA,SAAO,MAAM,CAAC,aAAP,CACI,OADJ,EACa,MADb,EAC6C;AAAK;AADlD,IAC8D,MAD9D,EAEI,IAFJ,CAAP;AAGD;;AAED,OAAO,MAAM,KAAK,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAhB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { SplitV } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { op } from './operation';\nimport { prepareSplitSize } from './split_util';\n/**\n * Splits a `tf.Tensor` into sub tensors.\n *\n * If `numOrSizeSplits` is a number, splits `x` along dimension `axis`\n * into `numOrSizeSplits` smaller tensors.\n * Requires that `numOrSizeSplits` evenly divides `x.shape[axis]`.\n *\n * If `numOrSizeSplits` is a number array, splits `x` into\n * `numOrSizeSplits.length` pieces. The shape of the `i`-th piece has the\n * same size as `x` except along dimension `axis` where the size is\n * `numOrSizeSplits[i]`.\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [2, 4]);\n * const [a, b] = tf.split(x, 2, 1);\n * a.print();\n * b.print();\n *\n * const [c, d, e] = tf.split(x, [1, 2, 1], 1);\n * c.print();\n * d.print();\n * e.print();\n * ```\n *\n * @param x The input tensor to split.\n * @param numOrSizeSplits Either an integer indicating the number of\n * splits along the axis or an array of integers containing the sizes of\n * each output tensor along the axis. If a number then it must evenly divide\n * `x.shape[axis]`; otherwise the sum of sizes must match `x.shape[axis]`.\n * Can contain one -1 indicating that dimension is to be inferred.\n * @param axis The dimension along which to split. Defaults to 0 (the first\n * dim).\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nfunction split_(x, numOrSizeSplits, axis = 0) {\n    const $x = convertToTensor(x, 'x', 'split');\n    const forward = (backend, _) => {\n        const $axis = parseAxisParam(axis, $x.shape)[0];\n        const splitSizes = prepareSplitSize($x, numOrSizeSplits, $axis);\n        return backend.split($x, splitSizes, $axis);\n    };\n    const inputs = { x: $x };\n    const attr = { numOrSizeSplits, axis };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, SplitV, attr);\n}\nexport const split = op({ split_ });\n//# sourceMappingURL=split.js.map"]},"metadata":{},"sourceType":"module"}