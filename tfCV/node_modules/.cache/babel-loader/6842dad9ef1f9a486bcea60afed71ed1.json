{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Cumsum } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { getAxesPermutation, getInnerMostAxes, getUndoAxesPermutation } from './axis_util';\nimport { op } from './operation';\nimport { transpose } from './transpose';\n/**\n * Computes the cumulative sum of a `tf.Tensor` along `axis`.\n *\n * ```js\n * const x = tf.tensor([1, 2, 3, 4]);\n * x.cumsum().print();\n * ```\n * ```js\n * const x = tf.tensor([[1, 2], [3, 4]]);\n * x.cumsum().print();\n * ```\n *\n * @param x The input tensor to be summed.\n * @param axis The axis along which to sum. Optional. Defaults to 0.\n * @param exclusive Whether to perform exclusive cumulative sum. Optional.\n *     Defaults to false. If set to true then the sum of each tensor entry\n *     does not include its own value, but only the values previous to it\n *     along the specified axis.\n * @param reverse Whether to sum in the opposite direction. Optional.\n *     Defaults to false.\n *\n * @doc {heading: 'Operations', subheading: 'Scan'}\n */\n\nfunction cumsum_(x, axis = 0, exclusive = false, reverse = false) {\n  const $x = convertToTensor(x, 'x', 'cumsum');\n\n  const forward = (backend, save) => {\n    const permutation = getAxesPermutation([axis], $x.rank);\n    let permutedX = $x;\n\n    if (permutation != null) {\n      permutedX = transpose($x, permutation);\n    }\n\n    const permutedAxis = getInnerMostAxes(1, $x.rank)[0];\n    let value = backend.cumsum(permutedX, permutedAxis, exclusive, reverse);\n    save([$x]);\n\n    if (permutation != null) {\n      const reversePermutation = getUndoAxesPermutation(permutation);\n      value = transpose(value, reversePermutation);\n    }\n\n    return value;\n  };\n\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    axis,\n    exclusive,\n    reverse\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , Cumsum, attrs);\n}\n\nexport const cumsum = op({\n  cumsum_\n});","map":{"version":3,"sources":["../../src/ops/cumsum.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,MAAR,QAAgD,iBAAhD;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAGA,SAAQ,kBAAR,EAA4B,gBAA5B,EAA8C,sBAA9C,QAA2E,aAA3E;AACA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,SAAR,QAAwB,aAAxB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAAS,OAAT,CACI,CADJ,EAC0B,IAAI,GAAG,CADjC,EACoC,SAAS,GAAG,KADhD,EACuD,OAAO,GAAG,KADjE,EACsE;AACpE,QAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,QAAT,CAA1B;;AAEA,QAAM,OAAO,GACT,CAAC,OAAD,EAAyB,IAAzB,KAA+C;AAC7C,UAAM,WAAW,GAAG,kBAAkB,CAAC,CAAC,IAAD,CAAD,EAAS,EAAE,CAAC,IAAZ,CAAtC;AACA,QAAI,SAAS,GAAG,EAAhB;;AACA,QAAI,WAAW,IAAI,IAAnB,EAAyB;AACvB,MAAA,SAAS,GAAG,SAAS,CAAC,EAAD,EAAK,WAAL,CAArB;AACD;;AACD,UAAM,YAAY,GAAG,gBAAgB,CAAC,CAAD,EAAI,EAAE,CAAC,IAAP,CAAhB,CAA6B,CAA7B,CAArB;AACA,QAAI,KAAK,GAAG,OAAO,CAAC,MAAR,CAAe,SAAf,EAA0B,YAA1B,EAAwC,SAAxC,EAAmD,OAAnD,CAAZ;AACA,IAAA,IAAI,CAAC,CAAC,EAAD,CAAD,CAAJ;;AAEA,QAAI,WAAW,IAAI,IAAnB,EAAyB;AACvB,YAAM,kBAAkB,GAAG,sBAAsB,CAAC,WAAD,CAAjD;AACA,MAAA,KAAK,GAAG,SAAS,CAAC,KAAD,EAAQ,kBAAR,CAAjB;AACD;;AACD,WAAO,KAAP;AACD,GAhBL;;AAkBA,QAAM,MAAM,GAAiB;AAAC,IAAA,CAAC,EAAE;AAAJ,GAA7B;AACA,QAAM,KAAK,GAAgB;AAAC,IAAA,IAAD;AAAO,IAAA,SAAP;AAAkB,IAAA;AAAlB,GAA3B;AAEA,SAAO,MAAM,CAAC,aAAP,CACI,OADJ,EACa,MADb,EAC6C;AAAK;AADlD,IAC8D,MAD9D,EAEI,KAFJ,CAAP;AAGD;;AAED,OAAO,MAAM,MAAM,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAjB","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Cumsum } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { getAxesPermutation, getInnerMostAxes, getUndoAxesPermutation } from './axis_util';\nimport { op } from './operation';\nimport { transpose } from './transpose';\n/**\n * Computes the cumulative sum of a `tf.Tensor` along `axis`.\n *\n * ```js\n * const x = tf.tensor([1, 2, 3, 4]);\n * x.cumsum().print();\n * ```\n * ```js\n * const x = tf.tensor([[1, 2], [3, 4]]);\n * x.cumsum().print();\n * ```\n *\n * @param x The input tensor to be summed.\n * @param axis The axis along which to sum. Optional. Defaults to 0.\n * @param exclusive Whether to perform exclusive cumulative sum. Optional.\n *     Defaults to false. If set to true then the sum of each tensor entry\n *     does not include its own value, but only the values previous to it\n *     along the specified axis.\n * @param reverse Whether to sum in the opposite direction. Optional.\n *     Defaults to false.\n *\n * @doc {heading: 'Operations', subheading: 'Scan'}\n */\nfunction cumsum_(x, axis = 0, exclusive = false, reverse = false) {\n    const $x = convertToTensor(x, 'x', 'cumsum');\n    const forward = (backend, save) => {\n        const permutation = getAxesPermutation([axis], $x.rank);\n        let permutedX = $x;\n        if (permutation != null) {\n            permutedX = transpose($x, permutation);\n        }\n        const permutedAxis = getInnerMostAxes(1, $x.rank)[0];\n        let value = backend.cumsum(permutedX, permutedAxis, exclusive, reverse);\n        save([$x]);\n        if (permutation != null) {\n            const reversePermutation = getUndoAxesPermutation(permutation);\n            value = transpose(value, reversePermutation);\n        }\n        return value;\n    };\n    const inputs = { x: $x };\n    const attrs = { axis, exclusive, reverse };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, Cumsum, attrs);\n}\nexport const cumsum = op({ cumsum_ });\n//# sourceMappingURL=cumsum.js.map"]},"metadata":{},"sourceType":"module"}