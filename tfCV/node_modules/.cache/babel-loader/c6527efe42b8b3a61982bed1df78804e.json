{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { ResizeNearestNeighbor } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\n/**\n * NearestNeighbor resize a batch of 3D images to a new shape.\n *\n * @param images The images, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param size The new shape `[newHeight, newWidth]` to resize the\n *     images to. Each channel is resized individually.\n * @param alignCorners Defaults to False. If true, rescale\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\n *     corners of images and resized images. If false, rescale by\n *     `new_height / height`. Treat similarly the width dimension.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\n\nfunction resizeNearestNeighbor_(images, size, alignCorners = false) {\n  const $images = convertToTensor(images, 'images', 'resizeNearestNeighbor');\n  util.assert($images.rank === 3 || $images.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got ` + `rank ${$images.rank}.`);\n  util.assert(size.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ` + `${size}.`);\n  util.assert($images.dtype === 'float32' || $images.dtype === 'int32', () => '`images` must have `int32` or `float32` as dtype');\n  let batchImages = $images;\n  let reshapedTo4D = false;\n\n  if ($images.rank === 3) {\n    reshapedTo4D = true;\n    batchImages = reshape($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);\n  }\n\n  const [newHeight, newWidth] = size;\n  const inputs = {\n    images: batchImages\n  };\n  const attrs = {\n    alignCorners,\n    size\n  };\n\n  const forward = (backend, save) => {\n    save([batchImages]);\n    return backend.resizeNearestNeighbor(batchImages, newHeight, newWidth, alignCorners);\n  };\n\n  const res = ENGINE.runKernelFunc(forward, inputs, null\n  /* gradient */\n  , ResizeNearestNeighbor, attrs);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n\n  return res;\n}\n\nexport const resizeNearestNeighbor = op({\n  resizeNearestNeighbor_\n});","map":{"version":3,"sources":["../../../src/ops/image/resize_nearest_neighbor.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQ,MAAR,QAAkC,cAAlC;AACA,SAAQ,qBAAR,QAA6F,oBAA7F;AAIA,SAAQ,eAAR,QAA8B,uBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,YAAtB;AAEA,SAAQ,EAAR,QAAiB,cAAjB;AACA,SAAQ,OAAR,QAAsB,YAAtB;AAEA;;;;;;;;;;;;;;;AAcA,SAAS,sBAAT,CACI,MADJ,EAC0B,IAD1B,EACkD,YAAY,GAAG,KADjE,EACsE;AACpE,QAAM,OAAO,GAAG,eAAe,CAAC,MAAD,EAAS,QAAT,EAAmB,uBAAnB,CAA/B;AAEA,EAAA,IAAI,CAAC,MAAL,CACI,OAAO,CAAC,IAAR,KAAiB,CAAjB,IAAsB,OAAO,CAAC,IAAR,KAAiB,CAD3C,EAEI,MAAM,iEAAA,GACF,QAAQ,OAAO,CAAC,IAAI,GAH5B;AAIA,EAAA,IAAI,CAAC,MAAL,CACI,IAAI,CAAC,MAAL,KAAgB,CADpB,EAEI,MACI,mEAAA,GACA,GAAG,IAAI,GAJf;AAKA,EAAA,IAAI,CAAC,MAAL,CACI,OAAO,CAAC,KAAR,KAAkB,SAAlB,IAA+B,OAAO,CAAC,KAAR,KAAkB,OADrD,EAEI,MAAM,kDAFV;AAIA,MAAI,WAAW,GAAG,OAAlB;AACA,MAAI,YAAY,GAAG,KAAnB;;AACA,MAAI,OAAO,CAAC,IAAR,KAAiB,CAArB,EAAwB;AACtB,IAAA,YAAY,GAAG,IAAf;AACA,IAAA,WAAW,GAAG,OAAO,CACjB,OADiB,EACR,CAAC,CAAD,EAAI,OAAO,CAAC,KAAR,CAAc,CAAd,CAAJ,EAAsB,OAAO,CAAC,KAAR,CAAc,CAAd,CAAtB,EAAwC,OAAO,CAAC,KAAR,CAAc,CAAd,CAAxC,CADQ,CAArB;AAED;;AACD,QAAM,CAAC,SAAD,EAAY,QAAZ,IAAwB,IAA9B;AAEA,QAAM,MAAM,GAAgC;AAAC,IAAA,MAAM,EAAE;AAAT,GAA5C;AACA,QAAM,KAAK,GAA+B;AAAC,IAAA,YAAD;AAAe,IAAA;AAAf,GAA1C;;AAEA,QAAM,OAAO,GAA0B,CAAC,OAAD,EAAU,IAAV,KAAkB;AACvD,IAAA,IAAI,CAAC,CAAC,WAAD,CAAD,CAAJ;AACA,WAAO,OAAO,CAAC,qBAAR,CACH,WADG,EACU,SADV,EACqB,QADrB,EAC+B,YAD/B,CAAP;AAED,GAJD;;AAMA,QAAM,GAAG,GAAG,MAAM,CAAC,aAAP,CACR,OADQ,EACC,MADD,EACiC;AAAK;AADtC,IAER,qBAFQ,EAEe,KAFf,CAAZ;;AAIA,MAAI,YAAJ,EAAkB;AAChB,WAAO,OAAO,CAAC,GAAD,EAAM,CAAC,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAD,EAAe,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAf,EAA6B,GAAG,CAAC,KAAJ,CAAU,CAAV,CAA7B,CAAN,CAAd;AACD;;AACD,SAAO,GAAP;AACD;;AAED,OAAO,MAAM,qBAAqB,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAhC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { ResizeNearestNeighbor } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\n/**\n * NearestNeighbor resize a batch of 3D images to a new shape.\n *\n * @param images The images, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param size The new shape `[newHeight, newWidth]` to resize the\n *     images to. Each channel is resized individually.\n * @param alignCorners Defaults to False. If true, rescale\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\n *     corners of images and resized images. If false, rescale by\n *     `new_height / height`. Treat similarly the width dimension.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction resizeNearestNeighbor_(images, size, alignCorners = false) {\n    const $images = convertToTensor(images, 'images', 'resizeNearestNeighbor');\n    util.assert($images.rank === 3 || $images.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got ` +\n        `rank ${$images.rank}.`);\n    util.assert(size.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ` +\n        `${size}.`);\n    util.assert($images.dtype === 'float32' || $images.dtype === 'int32', () => '`images` must have `int32` or `float32` as dtype');\n    let batchImages = $images;\n    let reshapedTo4D = false;\n    if ($images.rank === 3) {\n        reshapedTo4D = true;\n        batchImages = reshape($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);\n    }\n    const [newHeight, newWidth] = size;\n    const inputs = { images: batchImages };\n    const attrs = { alignCorners, size };\n    const forward = (backend, save) => {\n        save([batchImages]);\n        return backend.resizeNearestNeighbor(batchImages, newHeight, newWidth, alignCorners);\n    };\n    const res = ENGINE.runKernelFunc(forward, inputs, null /* gradient */, ResizeNearestNeighbor, attrs);\n    if (reshapedTo4D) {\n        return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n    }\n    return res;\n}\nexport const resizeNearestNeighbor = op({ resizeNearestNeighbor_ });\n//# sourceMappingURL=resize_nearest_neighbor.js.map"]},"metadata":{},"sourceType":"module"}