{"ast":null,"code":"import { ENGINE } from '../engine';\nimport { Min } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport * as axis_util from './axis_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { transpose } from './transpose';\n/**\n * Computes the minimum value from the input.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the array is reduced by 1 for each entry in `axes`.\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\n * If `axes` has no entries, all dimensions are reduced, and an array with a\n * single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.min().print();  // or tf.min(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.min(axis).print();  // or tf.min(x, axis)\n * ```\n *\n * @param x The input Tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\n\nfunction min_(x, axis = null, keepDims = false) {\n  const $x = convertToTensor(x, 'x', 'min');\n\n  const forward = (backend, save) => {\n    const origAxes = parseAxisParam(axis, $x.shape);\n    let axes = origAxes;\n    const permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);\n    let minInput = $x;\n\n    if (permutedAxes != null) {\n      minInput = transpose($x, permutedAxes);\n      axes = axis_util.getInnerMostAxes(axes.length, $x.rank);\n    }\n\n    const y = backend.min(minInput, axes);\n\n    if (permutedAxes != null) {\n      minInput.dispose();\n    }\n\n    let res = y;\n\n    if (keepDims) {\n      const expandedShape = axis_util.expandShapeToKeepDim(res.shape, origAxes);\n      res = reshape(y, expandedShape);\n      y.dispose();\n    }\n\n    save([$x, res]);\n    return res;\n  };\n\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    axis,\n    keepDims\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* gradient */\n  , Min, attrs);\n}\n\nexport const min = op({\n  min_\n});","map":{"version":3,"sources":["../../src/ops/min.ts"],"names":[],"mappings":"AAiBA,SAAQ,MAAR,QAAkC,WAAlC;AACA,SAAQ,GAAR,QAAuC,iBAAvC;AAIA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,SAAQ,cAAR,QAA6B,SAA7B;AAEA,OAAO,KAAK,SAAZ,MAA2B,aAA3B;AACA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,OAAR,QAAsB,WAAtB;AACA,SAAQ,SAAR,QAAwB,aAAxB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,SAAS,IAAT,CACI,CADJ,EAC0B,IAAA,GAAwB,IADlD,EACwD,QAAQ,GAAG,KADnE,EACwE;AACtE,QAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,KAAT,CAA1B;;AAEA,QAAM,OAAO,GACT,CAAC,OAAD,EAAyB,IAAzB,KAA+C;AAC7C,UAAM,QAAQ,GAAG,cAAc,CAAC,IAAD,EAAO,EAAE,CAAC,KAAV,CAA/B;AACA,QAAI,IAAI,GAAG,QAAX;AACA,UAAM,YAAY,GAAG,SAAS,CAAC,kBAAV,CAA6B,IAA7B,EAAmC,EAAE,CAAC,IAAtC,CAArB;AACA,QAAI,QAAQ,GAAG,EAAf;;AACA,QAAI,YAAY,IAAI,IAApB,EAA0B;AACxB,MAAA,QAAQ,GAAG,SAAS,CAAC,EAAD,EAAK,YAAL,CAApB;AACA,MAAA,IAAI,GAAG,SAAS,CAAC,gBAAV,CAA2B,IAAI,CAAC,MAAhC,EAAwC,EAAE,CAAC,IAA3C,CAAP;AACD;;AAED,UAAM,CAAC,GAAG,OAAO,CAAC,GAAR,CAAY,QAAZ,EAAsB,IAAtB,CAAV;;AACA,QAAI,YAAY,IAAI,IAApB,EAA0B;AACxB,MAAA,QAAQ,CAAC,OAAT;AACD;;AAED,QAAI,GAAG,GAAG,CAAV;;AACA,QAAI,QAAJ,EAAc;AACZ,YAAM,aAAa,GACf,SAAS,CAAC,oBAAV,CAA+B,GAAG,CAAC,KAAnC,EAA0C,QAA1C,CADJ;AAEA,MAAA,GAAG,GAAG,OAAO,CAAC,CAAD,EAAI,aAAJ,CAAb;AACA,MAAA,CAAC,CAAC,OAAF;AACD;;AAED,IAAA,IAAI,CAAC,CAAC,EAAD,EAAK,GAAL,CAAD,CAAJ;AACA,WAAO,GAAP;AACD,GA1BL;;AA4BA,QAAM,MAAM,GAAc;AAAC,IAAA,CAAC,EAAE;AAAJ,GAA1B;AACA,QAAM,KAAK,GAAa;AAAC,IAAA,IAAD;AAAO,IAAA;AAAP,GAAxB;AAEA,SAAO,MAAM,CAAC,aAAP,CACI,OADJ,EACa,MADb,EAC6C;AAAK;AADlD,IACkE,GADlE,EAEI,KAFJ,CAAP;AAGD;;AAED,OAAO,MAAM,GAAG,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAd","sourceRoot":"","sourcesContent":["import { ENGINE } from '../engine';\nimport { Min } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport * as axis_util from './axis_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { transpose } from './transpose';\n/**\n * Computes the minimum value from the input.\n *\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\n * is true, the rank of the array is reduced by 1 for each entry in `axes`.\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\n * If `axes` has no entries, all dimensions are reduced, and an array with a\n * single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.min().print();  // or tf.min(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.min(axis).print();  // or tf.min(x, axis)\n * ```\n *\n * @param x The input Tensor.\n * @param axis The dimension(s) to reduce. By default it reduces\n *     all dimensions.\n * @param keepDims If true, retains reduced dimensions with size 1.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction min_(x, axis = null, keepDims = false) {\n    const $x = convertToTensor(x, 'x', 'min');\n    const forward = (backend, save) => {\n        const origAxes = parseAxisParam(axis, $x.shape);\n        let axes = origAxes;\n        const permutedAxes = axis_util.getAxesPermutation(axes, $x.rank);\n        let minInput = $x;\n        if (permutedAxes != null) {\n            minInput = transpose($x, permutedAxes);\n            axes = axis_util.getInnerMostAxes(axes.length, $x.rank);\n        }\n        const y = backend.min(minInput, axes);\n        if (permutedAxes != null) {\n            minInput.dispose();\n        }\n        let res = y;\n        if (keepDims) {\n            const expandedShape = axis_util.expandShapeToKeepDim(res.shape, origAxes);\n            res = reshape(y, expandedShape);\n            y.dispose();\n        }\n        save([$x, res]);\n        return res;\n    };\n    const inputs = { x: $x };\n    const attrs = { axis, keepDims };\n    return ENGINE.runKernelFunc(forward, inputs, null /* gradient */, Min, attrs);\n}\nexport const min = op({ min_ });\n//# sourceMappingURL=min.js.map"]},"metadata":{},"sourceType":"module"}