{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Min } from '../kernel_names';\nimport * as axis_util from '../ops/axis_util';\nimport { transpose } from '../ops/transpose';\nimport * as util from '../util';\nimport { gradForMinAndMax } from './min_max_grad_util';\nexport const minGradConfig = {\n  kernelName: Min,\n  inputsToSave: ['x'],\n  outputsToSave: [true],\n  gradFunc: (dy, saved, attrs) => {\n    const minAttrs = attrs;\n    const {\n      axis\n    } = minAttrs;\n    const [x, y] = saved;\n    const origAxes = util.parseAxisParam(axis, x.shape);\n    const permutedAxes = axis_util.getAxesPermutation(origAxes, x.rank);\n    const minGrad = gradForMinAndMax(dy, y, x, origAxes, permutedAxes);\n    return {\n      x: () => {\n        let out = minGrad['x']();\n\n        if (permutedAxes != null) {\n          out = transpose(out);\n        }\n\n        return out;\n      }\n    };\n  }\n};","map":{"version":3,"sources":["../../src/gradients/Min_grad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQ,GAAR,QAA4B,iBAA5B;AAEA,OAAO,KAAK,SAAZ,MAA2B,kBAA3B;AACA,SAAQ,SAAR,QAAwB,kBAAxB;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,SAAQ,gBAAR,QAA+B,qBAA/B;AAEA,OAAO,MAAM,aAAa,GAAe;AACvC,EAAA,UAAU,EAAE,GAD2B;AAEvC,EAAA,YAAY,EAAE,CAAC,GAAD,CAFyB;AAGvC,EAAA,aAAa,EAAE,CAAC,IAAD,CAHwB;AAIvC,EAAA,QAAQ,EAAE,CAAC,EAAD,EAAa,KAAb,EAA8B,KAA9B,KAAqD;AAC7D,UAAM,QAAQ,GAAa,KAA3B;AACA,UAAM;AAAC,MAAA;AAAD,QAAS,QAAf;AACA,UAAM,CAAC,CAAD,EAAI,CAAJ,IAAS,KAAf;AACA,UAAM,QAAQ,GAAG,IAAI,CAAC,cAAL,CAAoB,IAApB,EAA0B,CAAC,CAAC,KAA5B,CAAjB;AACA,UAAM,YAAY,GAAG,SAAS,CAAC,kBAAV,CAA6B,QAA7B,EAAuC,CAAC,CAAC,IAAzC,CAArB;AACA,UAAM,OAAO,GAAG,gBAAgB,CAAC,EAAD,EAAK,CAAL,EAAQ,CAAR,EAAW,QAAX,EAAqB,YAArB,CAAhC;AACA,WAAO;AACL,MAAA,CAAC,EAAE,MAAK;AACN,YAAI,GAAG,GAAG,OAAO,CAAC,GAAD,CAAP,EAAV;;AACA,YAAI,YAAY,IAAI,IAApB,EAA0B;AACxB,UAAA,GAAG,GAAG,SAAS,CAAC,GAAD,CAAf;AACD;;AACD,eAAO,GAAP;AACD;AAPI,KAAP;AASD;AApBsC,CAAlC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Min } from '../kernel_names';\nimport * as axis_util from '../ops/axis_util';\nimport { transpose } from '../ops/transpose';\nimport * as util from '../util';\nimport { gradForMinAndMax } from './min_max_grad_util';\nexport const minGradConfig = {\n    kernelName: Min,\n    inputsToSave: ['x'],\n    outputsToSave: [true],\n    gradFunc: (dy, saved, attrs) => {\n        const minAttrs = attrs;\n        const { axis } = minAttrs;\n        const [x, y] = saved;\n        const origAxes = util.parseAxisParam(axis, x.shape);\n        const permutedAxes = axis_util.getAxesPermutation(origAxes, x.rank);\n        const minGrad = gradForMinAndMax(dy, y, x, origAxes, permutedAxes);\n        return {\n            x: () => {\n                let out = minGrad['x']();\n                if (permutedAxes != null) {\n                    out = transpose(out);\n                }\n                return out;\n            }\n        };\n    }\n};\n//# sourceMappingURL=Min_grad.js.map"]},"metadata":{},"sourceType":"module"}