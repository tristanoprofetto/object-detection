{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { StridedSlice } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { slice } from './slice';\nimport { computeOutShape, getNormalizedAxes, maskToAxes } from './slice_util';\n/**\n * Extracts a strided slice of a tensor.\n *\n * Roughly speaking, this op extracts a slice of size (end-begin)/stride from\n * the given input tensor (x). Starting at the location specified by begin the\n * slice continues by adding stride to the index until all dimensions are not\n * less than end. Note that a stride can be negative, which causes a reverse\n * slice.\n *\n * ```js\n * const t = tf.tensor3d([1, 1, 1 ,2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6],\n *    [3, 2, 3]);\n * t.stridedSlice([1, 0, 0], [2, 1, 3], [1, 1, 1]).print()  // [[[3, 3, 3]]]\n * t.stridedSlice([1, 0, 0], [2, 2, 3], [1, 1, 1]).print()  // [[[3, 3, 3],\n *                                                     // [4, 4, 4]]]\n * t.stridedSlice([1, -1, 0], [2, -3, 3], [1, -1, 1]).print() // [[[4, 4, 4],\n *                                                     // [3, 3, 3]]]\n * ```\n *\n * @param x The tensor to stride slice.\n * @param begin The coordinates to start the slice from.\n * @param end: The coordinates to end the slice at.\n * @param strides: The size of the slice.\n * @param beginMask: If the ith bit of beginMask is set, begin[i] is ignored\n *      and the fullest possible range in that dimension is used instead.\n * @param endMask: If the ith bit of endMask is set, end[i] is ignored\n *      and the fullest possible range in that dimension is used instead.\n * @param shrinkAxisMask: a bitmask where bit i implies that\n * the ith specification should shrink the dimensionality. begin and end must\n * imply a slice of size 1 in the dimension.\n *\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\n */\n\nfunction stridedSlice_(x, begin, end, strides, beginMask = 0, endMask = 0, ellipsisMask = 0, newAxisMask = 0, shrinkAxisMask = 0) {\n  let $x = convertToTensor(x, 'x', 'stridedSlice');\n\n  const forward = backend => {\n    if (strides == null) {\n      strides = new Array(begin.length);\n    }\n\n    const ellipsisAxes = maskToAxes(ellipsisMask);\n\n    if (ellipsisAxes.length > 1) {\n      throw new Error('Multiple ellipses in slice is not allowed.');\n    }\n\n    if (ellipsisMask !== 0 && newAxisMask !== 0) {\n      throw new Error('Using both ellipsisMask and newAxisMask is not yet supported.');\n    }\n\n    if (ellipsisMask !== 0 && shrinkAxisMask !== 0) {\n      throw new Error('Using both ellipsisMask and shrinkAxisMask is not yet supported.');\n    }\n\n    const numInterpolatedAxes = $x.rank - begin.length; // Expand the dims of x based on the newAxisMask.\n\n    const expandAxes = maskToAxes(newAxisMask);\n    const newShape = $x.shape.slice();\n    expandAxes.forEach(axis => {\n      begin[axis] = 0;\n      end[axis] = 1;\n      newShape.splice(axis, 0, 1);\n    });\n    $x = reshape($x, newShape);\n    const {\n      begin: normalizedBegin,\n      end: normalizedEnd,\n      strides: normalizedStrides\n    } = getNormalizedAxes($x.shape, ellipsisAxes, numInterpolatedAxes, begin, end, strides, beginMask, endMask, ellipsisMask);\n    begin = normalizedBegin;\n    end = normalizedEnd;\n    strides = normalizedStrides;\n    const shrinkAxes = maskToAxes(shrinkAxisMask); // Adjust the ends based on the shrink mask.\n\n    shrinkAxes.forEach(axis => {\n      end[axis] = begin[axis] + 1;\n      strides[axis] = 1;\n    }); // Figure out the output shape.\n\n    const size = computeOutShape(begin, end, strides); // Remove the axes based on shrinkMask.\n\n    const outShape = size.filter((_, axis) => shrinkAxes.indexOf(axis) === -1);\n    const nonStrided = strides.every(v => v === 1);\n\n    if (nonStrided) {\n      return reshape(slice($x, begin, size), outShape);\n    }\n\n    const res = backend.stridedSlice($x, begin, end, strides);\n    return reshape(res, outShape);\n  };\n\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  };\n  return ENGINE.runKernelFunc(forward, inputs, null\n  /* grad */\n  , StridedSlice, attrs);\n}\n\nexport const stridedSlice = op({\n  stridedSlice_\n});","map":{"version":3,"sources":["../../src/ops/strided_slice.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { StridedSlice } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { slice } from './slice';\nimport { computeOutShape, getNormalizedAxes, maskToAxes } from './slice_util';\n/**\n * Extracts a strided slice of a tensor.\n *\n * Roughly speaking, this op extracts a slice of size (end-begin)/stride from\n * the given input tensor (x). Starting at the location specified by begin the\n * slice continues by adding stride to the index until all dimensions are not\n * less than end. Note that a stride can be negative, which causes a reverse\n * slice.\n *\n * ```js\n * const t = tf.tensor3d([1, 1, 1 ,2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6],\n *    [3, 2, 3]);\n * t.stridedSlice([1, 0, 0], [2, 1, 3], [1, 1, 1]).print()  // [[[3, 3, 3]]]\n * t.stridedSlice([1, 0, 0], [2, 2, 3], [1, 1, 1]).print()  // [[[3, 3, 3],\n *                                                     // [4, 4, 4]]]\n * t.stridedSlice([1, -1, 0], [2, -3, 3], [1, -1, 1]).print() // [[[4, 4, 4],\n *                                                     // [3, 3, 3]]]\n * ```\n *\n * @param x The tensor to stride slice.\n * @param begin The coordinates to start the slice from.\n * @param end: The coordinates to end the slice at.\n * @param strides: The size of the slice.\n * @param beginMask: If the ith bit of beginMask is set, begin[i] is ignored\n *      and the fullest possible range in that dimension is used instead.\n * @param endMask: If the ith bit of endMask is set, end[i] is ignored\n *      and the fullest possible range in that dimension is used instead.\n * @param shrinkAxisMask: a bitmask where bit i implies that\n * the ith specification should shrink the dimensionality. begin and end must\n * imply a slice of size 1 in the dimension.\n *\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\n */\nfunction stridedSlice_(x, begin, end, strides, beginMask = 0, endMask = 0, ellipsisMask = 0, newAxisMask = 0, shrinkAxisMask = 0) {\n    let $x = convertToTensor(x, 'x', 'stridedSlice');\n    const forward = (backend) => {\n        if (strides == null) {\n            strides = new Array(begin.length);\n        }\n        const ellipsisAxes = maskToAxes(ellipsisMask);\n        if (ellipsisAxes.length > 1) {\n            throw new Error('Multiple ellipses in slice is not allowed.');\n        }\n        if (ellipsisMask !== 0 && newAxisMask !== 0) {\n            throw new Error('Using both ellipsisMask and newAxisMask is not yet supported.');\n        }\n        if (ellipsisMask !== 0 && shrinkAxisMask !== 0) {\n            throw new Error('Using both ellipsisMask and shrinkAxisMask is not yet supported.');\n        }\n        const numInterpolatedAxes = $x.rank - begin.length;\n        // Expand the dims of x based on the newAxisMask.\n        const expandAxes = maskToAxes(newAxisMask);\n        const newShape = $x.shape.slice();\n        expandAxes.forEach(axis => {\n            begin[axis] = 0;\n            end[axis] = 1;\n            newShape.splice(axis, 0, 1);\n        });\n        $x = reshape($x, newShape);\n        const { begin: normalizedBegin, end: normalizedEnd, strides: normalizedStrides } = getNormalizedAxes($x.shape, ellipsisAxes, numInterpolatedAxes, begin, end, strides, beginMask, endMask, ellipsisMask);\n        begin = normalizedBegin;\n        end = normalizedEnd;\n        strides = normalizedStrides;\n        const shrinkAxes = maskToAxes(shrinkAxisMask);\n        // Adjust the ends based on the shrink mask.\n        shrinkAxes.forEach(axis => {\n            end[axis] = begin[axis] + 1;\n            strides[axis] = 1;\n        });\n        // Figure out the output shape.\n        const size = computeOutShape(begin, end, strides);\n        // Remove the axes based on shrinkMask.\n        const outShape = size.filter((_, axis) => shrinkAxes.indexOf(axis) === -1);\n        const nonStrided = strides.every(v => v === 1);\n        if (nonStrided) {\n            return reshape(slice($x, begin, size), outShape);\n        }\n        const res = backend.stridedSlice($x, begin, end, strides);\n        return reshape(res, outShape);\n    };\n    const inputs = { x: $x };\n    const attrs = {\n        begin,\n        end,\n        strides,\n        beginMask,\n        endMask,\n        ellipsisMask,\n        newAxisMask,\n        shrinkAxisMask\n    };\n    return ENGINE.runKernelFunc(forward, inputs, null /* grad */, StridedSlice, attrs);\n}\nexport const stridedSlice = op({ stridedSlice_ });\n//# sourceMappingURL=strided_slice.js.map"]},"metadata":{},"sourceType":"module"}